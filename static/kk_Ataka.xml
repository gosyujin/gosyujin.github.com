<?xml version="1.0" encoding="UTF-8"?>
<diary>
<day date="2000-01-01" title="">
<body>
*1288149401*[日記]sara
emacsのメモ

**環境
-CentOS
--Mac OS からSSHする
-Emacs23.4

**ダウンロード
&gt;||
$ wget http://ftp.jaist.ac.jp/pub/GNU/emacs/emacs-23.4.tar.gz
$ tar zxvf emacs-23.4.tar.gz
$ cd emacs-23.4/
$ ./configure --without-x  # GUIがない場合はx要らない
$ make
$ sudo make install
||&lt;


**構成
特にインストール先を指定しなければ/usr/local/share/の下にemacsディレクトリができた。
&gt;||
emacs

┣23.4
┃┣etc          # NEWやライセンス等
┃┣leim        # EmacsのIM
┃┣lisp         #  Elispが格納、Emacsの全て
┃┗site-lisp   # ユーザのElispをインストールする場所(バージョン依存？)
┗site-lisp      # Emacsのバージョン関係なく使える？
||&lt;

**設定ファイル
設定ファイルは以下のファイルのうち、優先順位に従って一つ読み込まれる
-~/.emacs.el &gt; ~/.emacs &gt; ~/.emacs.d/init.el &gt; ~/.emacs.d/init

**前準備
***キーバインド
本とかネットなどに書いてある書式。この通りに押すとミニバッファに出力される
|*キー|*意味|
|C-x|Control(Ctrl)を押しながらxを押す|
|C-x C-c|Controlを押しながらxを押した後、Controlを押しながらcを押す|
|C-x →|Controlを押しながらxを押した後、右矢印キーを押す|
|M-x|メタキー(Alt)を押しながらxを押す|
|C-M-v|ControlとAltを押しながらvを押す|

|C-x RET f|Controlを押しながらxを押した後、Return(Enter)を押し、fを押す|
|C-SPC|Controlを押しながらSpaceを押す|

***最重要コマンド
-C-x C-c(脱出)
--使い方がわからん時にEmacsでファイルを開かれると、もうターミナルごと落とすしかなくなるので脱出するコマンドだけ覚えておく。なにかあったらC-x C-c！
-C-g(操作キャンセル)
--よくわからん状態になったらこれ。だいたい元の画面に戻れる

***Mac OSのターミナルを使っている場合
EmacsではAltキーをMetaキーとして使う(事が多い)。ただし、Max OSのターミナルは設定を変えないとAltをメタキーとして使う事ができない。

例えば
-C-v 次の画面に進む
-M-v 前の画面に戻る
というコマンドがあり、C-vは普通に使えるが、M-vを押すと「&amp;#402;」を出してしまう。((一応、デフォルトでもescを押してからvとすると前の画面に戻るができるが、連打もできないししんどい。))

メタキーとして使うにはターミナルの環境設定 =&gt; 設定 =&gt; キーボードタブの「メタキーとしてoptionキーを使用」にチェックを入れる

**ファイル操作
$ emacs FILE_NAME でもファイルを作る&amp;開く事はできるが、ここはemacsを起動した状態からファイルを開く。
|*キー|*動作|*備考|
|C-x C-f|ファイルを開く|ミニバッファからファイル名を入力できる(Tabで補完もきく)。((存在しないファイル名を指定した場合はバッファが作成される。))|
|C-x C-s|ファイルを保存|変更を実際のファイルに書き込む|
|C-x s|開いている全てのファイルを保存|変更を実際のファイルに書き込むy/n等で1つずつ確認して保存できる|
|C-x C-w|ファイルを別名保存|ファイルを別名保存する|
|C-x i|別ファイルの内容を流し込む|指定した別ファイルの内容を流し込む|
|C-x RET f|文字コード、改行コード変換|ミニバッファから文字コード、改行コードを変更できる、後述|
|C-x b|バッファ切替|現在保持しているバッファの中から開くファイルを切り替える|
|C-x →|バッファ切替|順番にバッファのファイルを切り替える|
|C-x ←|バッファ切替|順番にバッファのファイルを切り替える|
|C-x k|バッファ消去|現在保持しているバッファの中から消去するファイルを選択する|

***文字コード、改行コード操作
C-x RET f で文字コード、改行コードを変更できる。ミニバッファに
&gt;||
Coding system for saving file (default:nil):
||&lt;

と表示されるので、文字コードと改行コードを選択する。Tab補完がきく。その中で(自分が)使いそうなものを幾つか。
|*コマンド|*動作|
|utf-8|utf-8に変換|
|utf-8-dos|utf-8に変換し、改行コードをCR+LF(Windows)に変換|
|utf-8-unix|utf-8に変換し、改行コードをLFに変換|
|utf-8-mac|utf-8に変換し、改行コードをCRに変換|
|sjis|sjisに変換|
|sjis-dos|sjisに変換し、改行コードをCR+LF(Windows)に変換|
|sjis-unix|sjisに変換し、改行コードをLFに変換|
|sjis-mac|sjisに変換し、改行コードをCRに変換|

**カーソル操作
ファイル内を移動する。
|*キー|*動作|*備考|
|C-f|一文字進む|-|
|C-b|一文字戻る|-|
|C-n|一行進む|-|
|C-p|一行戻る|-|
|C-a|行頭へ|-|
|C-e|行末へ|-|
|C-v|一画面下へ|-|
|M-v|一画面上へ|-|
|M-&lt;(M-S-,)|バッファの先頭へ|-|
|M-&gt;(M-S-.)|バッファの終端へ|-|
|M-g M-g|指定した行番号へ|Goto line: と表示され、入力した行番号へジャンプする|

&gt;||
--
M-&lt;(M-S-,)

--

M-v
--
           C-p
C-a    C-b  _  C-f      C-e
           C-n
--
C-v

--

M-&gt;(M-S-.)
--
||&lt;


**文字列操作
文字をコピーしたり。
|*キー|*動作|*備考|
|C--|アンドゥ？リドゥ？|何か動作原理がよくわからんけど、とりあえずアンドゥはしてくれる？|
|C-x u|アンドゥ？リドゥ？|何か動作原理がよくわからんけど、とりあえずアンドゥはしてくれる？|
|C-d|一文字Delete|-|
|C-k|一行消去|空行は残る(カーソルが文末にある場合のみ改行を消去)、カーソルが行頭にない場合そこから改行を除く文末まで消去|
|M-;|コメントアウト系|空行だと# 挿入、コメント行だと文頭へジャンプ、部通の行だと文末に# 挿入|

|*キー|*動作|*備考|
|C-SPC|マーク|文字列操作の起点。現在の位置を記録(マーク)する。カーソルを動かすとマークからのカーソルの位置まで選択される(リージョン)|
|C-w|カット|リージョン部分をカット|
|M-w|コピー|リージョン部分をコピー|
|C-y|ペースト|コピー、カットした内容をペースト|

**ウィンドウ操作
画面を分割したり。
|*キー|*動作|*備考|
|C-x 2|ウィンドウ水平分割|今の画面を水平に分割|
|C-x 3|ウィンドウ垂直分割|今の画面を垂直に分割|
|C-x o|ウィンドウ移動|カレントから他の画面に移動|
|C-x 1|自分以外のウィンドウを閉じる|-|
|C-x 0|自分のウィンドウを閉じる|-|

**ディレクトリ操作
Emscsを開いたままディレクトリを操作できる
|*キー|*動作|*備考|
|C-x d|ディレクトリを開く|ディレクトリ操作の起点。ファイルを開く(C-x f)のと同じようにディレクトリを指定してディレクトリを開く|

***ディレクトリ操作モード
|*キー|*動作|*備考|
|q|ディレクトリモードを抜ける|-|
|C--|直前の作業を戻す|-|
|+|ディレクトリ作成||
|RET またはf|現在行のファイルを選択|ファイルならオープンしようとする、ディレクトリなら中に入る|
|R|ファイル(ディレクトリ)名リネーム|現在カーソルがある行がリネーム対象※|
|D|ファイル(ディレクトリ)削除|現在カーソルがある行が削除対象※|
|C|ファイル(ディレクトリ)コピー|現在カーソルがある行がコピー対象※|
※後で覚える: マーク (一応消し方だけ *-!)

</body>
</day>
<day date="2009-03-05" title="">
<body>
*1236256429*[日記]再開します
　明日行われる、第2回Wicket勉強会に出席させて頂くのを期に再開します。これからはこの半年で培ったWicketの事でも書きたいな。

　とりあえず明日は俺より強い奴に会いにいく！　寝坊しないように……。

*1236590811*[日記]追記
　行ってきました。羽田に着陸した瞬間に雨どしゃ降りだったり、時間つぶしで入った喫茶店が半端じゃなく寒かったり、会場一番乗りした特典として設営のお手伝いをさせて頂いたり、二次会で朝6時までお話させて頂いたり、とても有意義な時間を過ごさせて頂きました。
　個人的には、もっと早い段階でこういう場に出て行けば良かったと思っています。学生の、もっと言うと就職前に行っておくべきだった……。技術的な話以上に、業界の傾向の話がガンガン聞けたのが今後のためになりました。

　場所を提供して下さったグリー株式会社、最高！
</body>
</day>
<day date="2009-03-09" title="">
<body>
*1236590120*[Java][Wicket]チェックボックスに初期値（デフォルトでチェック）を入れる方法
　Wicket奮闘記第一弾。とりあえず、Wicket開発で一番困った所、CheckGroupとCheckコンポーネントを使用したチェックボックスに初期値＝チェックを入れておく処理です。

　何かユーザ情報を登録するフォームがあってー、入れましたー、編集ボタンを押して編集画面に行きましたー、すると、
[f:id:kk_Ataka:20090309171545p:image]
　最初からこう、チェックが入っていてほしいという状況です。

　テキストのフォーム(TextField)なら、第二引数にDBから引っ張ってきたものを突っ込んでやればこんな感じで表示できるのですが、
[f:id:kk_Ataka:20090309162050p:image]
　チェックボックスはもう少しやらなきゃいけないことがあるみたい……。
&gt;|java|
//第二引数がユーザが持っている値
CheckGroup checkGroup = new CheckGroup(&quot;checkGroup&quot;, /*ユーザが持っているもののリスト*/);
//第二引数が選択項目の値
ListView listView = new ListView(&quot;list&quot;, /*選択肢のリスト*/) {
	private static final long serialVersionUID = 2972646917485688487L;
	@Override
	protected void populateItem(ListItem listItem) {
		listItem.add(new Check(&quot;check&quot;, listItem.getModel()));
    		listItem.add(new Label(&quot;value&quot;, listItem.getModelObjectAsString()));
	}
};
||&lt;
　Javaはこう。で、htmlはこうしてみました。
&gt;|html|
&lt;table&gt;
	&lt;span wicket:id=&quot;checkGroup&quot;&gt;
		&lt;tr&gt;
			&lt;th&gt;なんとか一覧&lt;/th&gt;
		&lt;/tr&gt;
		&lt;tr wicket:id=&quot;list&quot;&gt;
			&lt;td&gt;
				&lt;input type=&quot;checkbox&quot; wicket:id=&quot;check&quot; /&gt;
				&lt;span wicket:id=&quot;value&quot; /&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/span&gt;
&lt;/table&gt;
||&lt;
　これらから生成されるページはこうなります。
[f:id:kk_Ataka:20090309171545p:image]
　このように、チェックボックスにデフォルトでチェックを入れる方法がわからなかったので、色々試してみました。まず、CheckGroupの第二引数にはユーザが選択した値が入ります。上の図で言うと、りんご・もも・すいか・めろん・つくねがユーザが選択しているものです。チェックが入っているから。
　次に、ListViewの第二引数には、選択項目の一覧が入ります。りんご・みかん・もも・すいか・なし・めろん・かき・ぐれーぷふるーつ・つくねがpopulateItemのCheckコンポーネントに一つずつbindされます。
　どうも、このCheckコンポーネントがbindされる時に、&quot;CheckGroupの第二引数のリストとequalsをとっている&quot;ようです。equalsならチェックと。

　populateItem内では、まずりんごbindする時に、ユーザが持っている{りんご・もも・すいか・めろん・つくね}と比較します。ユーザはりんごを持っているのでチェック。次にみかんを{りんご・もも・すいか・めろん・つくね}と比較します。みかんは持っていないのでチェックは入らない……という事を繰り返します。

　なので、CheckGroupに入っているリストのオブジェクトと、Checkでbindするオブジェクトは同じでなければチェックは入らないと思います。最初、DBから選択項目をとってきーの、次にユーザが持っているものをとってきーのして比較したら当然チェックが入らず。仕方ないので、選択項目をまるっととってきて、ユーザが選択した項目はそこからコピーしてequalsが成立するようにしました……。

　とりあえず、チェックが入るようにはなったけど、絶対もっといい方法があると思うなぁ。暫定的な解決方法という事で。
</body>
<comments>
<comment>
<username>hayassh</username>
<body>こんにちは&lt;br&gt;&lt;br&gt;複数のチェックボックスを使う場合はCheckBoxMultipleChoiceを使ってはいかがでしょうか。&lt;br&gt;必ずCheckGroupとCheckを使用しないといけないという状況下であったらゴメンナサイ・・&lt;br&gt;&lt;br&gt;    private List&lt;Company&gt; selected = new ArrayList&lt;Company&gt;();&lt;br&gt;&lt;br&gt;    public FooPage() {&lt;br&gt;        Form form = new Form(&quot;form&quot;);&lt;br&gt;        add(form);&lt;br&gt;&lt;br&gt;        //初期値のセット&lt;br&gt;        selected.add(new Company(1, &quot;Company1&quot;));&lt;br&gt;        selected.add(new Company(2, &quot;Company2&quot;));&lt;br&gt;        &lt;br&gt;        //チェックボックスの項目全て&lt;br&gt;        final List&lt;Company&gt; all = Arrays.asList(new Company(1, &quot;Company1&quot;), new Company(2, &quot;Company2&quot;), new Company(3, &quot;Company3&quot;));&lt;br&gt;&lt;br&gt;        CheckBoxMultipleChoice&lt;Company&gt; multiChoice = new CheckBoxMultipleChoice&lt;Company&gt;(&quot;list&quot;,&lt;br&gt;                new PropertyModel(FooPage.this, &quot;selected&quot;),all ,new ChoiceRenderer(&quot;companyName&quot;, &quot;companyId&quot;));&lt;br&gt;&lt;br&gt;        form.add(multiChoice);&lt;br&gt;        form.add(new Button(&quot;next&quot;));&lt;br&gt;    }&lt;br&gt;    &lt;br&gt;上記のようにChoiceRendererを使用した場合、&lt;br&gt;ChoiceRendererのコンストラクタの第2引数に指定した値(この場合だとCompanyオブジェクトのcompanyIdというフィールド)でのequalsにてデフォルトのチェックが判定されるので特別なオブジェクトのフィールドでなければ期待した動作になるかと思います。&lt;br&gt;(上記の場合だとCompany1とCompany2にデフォルトでチェックが入ります)&lt;br&gt;また、CheckBoxMultipleChoiceで実装すると項目名とチェックボックスのHTMLでの関連付け(Labelタグのfor属性)も自動で行ってくれます。&lt;br&gt;上記の場合だとブラウザ上でCompany1という文字列をクリックしてもチェックボックスにチェックが入るようになります。&lt;br&gt;&lt;br&gt;長々と書いてしまいましたが既にご存知だったり蛇足だったらすみません(^^;)</body>
<timestamp>1236741842</timestamp>
</comment>
<comment>
<username>kk_Ataka</username>
<body>こんにちは。&lt;br&gt;特にCheckGroupとCheckを使用しなければならないという事ではなかったので、早速試させていただきました。&lt;br&gt;これは便利ですね！　単純にCheckBoxMultipleChoiceコンポーネントを知らなかったので、使用経験のあったCheckGroupとCheckでゴリ押ししていたのですが、ソースコードがかなり減りました。&lt;br&gt;ご指摘ありがとうございます。とても参考になりました^^</body>
<timestamp>1236776036</timestamp>
</comment>
</comments>
</day>
<day date="2009-03-11" title="">
<body>
*1236776769*[Java][Wicket]チェックボックスの初期値の続き
　[http://d.hatena.ne.jp/kk_Ataka/20090309/1236590120:title]の続き。

　id:hayasshさんからCheckBoxMultipleChoiceを使用してみては？　というご指摘があったので使ってみたところ、これは超便利でした。しかも、Labelタグのfor属性もつけてくれるという……。((CheckGroupとCheckではそこまでできるのかな？))力技でかわしてた自分の強引さに乾杯。hayasshさんありがとうございました。

　あと、書き忘れていたのですが、自分が使っているWicketのバージョンは1.3です。なのでソースにジェネリクスがなかったり、他諸々1.4とは相違点があります。1.4は矢野さんの本を買ってから勉強しようっと。

*1236706056*[Java][Wicket]自作のWicketサンプルを上げてみる
　ようそこsampleWicket→http://samplewicket.kkataka.staxapps.net/((サイドメニュー＞プロフィール＞自作Wicketサンプルからも行けます。))

　色々使ってみたいコンポーネントを使って動かしてみたサンプルです。CheckGroup, RadioGroup, ListViewの入れ子, GridView, PagingNavigatorなどなど……。

　必要になったんだけど、これってどうやって実現するんだろう？　と思ったものを形にしてみました。((例: mixiのマイミクとかマイコミュニティ表示のようなn行m列のリストとか。))特に入力チェックもしていないので、空欄でも余裕で通ったりします。
　まず上げてみただけなので、今はソースは見れません……。

　あ、Developmentモードで上げてしまった；；
</body>
<comments>
<comment>
<username>hayassh</username>
<body>あぁ、1.4のソースでごめんなさい・・&lt;br&gt;しかもHTMLのソースは書いてないという中途半端っぷり・・&lt;br&gt;&lt;br&gt;私はWicket使い始めて2年くらいになりますが、実は1年くらいCheckBoxMultipleChoiceの存在を知らずにCheckGroupとCheckでゴリゴリ実装してたのは秘密ですｗ</body>
<timestamp>1236779514</timestamp>
</comment>
<comment>
<username>kk_Ataka</username>
<body>やっぱり最初はCheckGroupで力技なんですかねー。&lt;br&gt;&lt;br&gt;後、私が触らせて頂いているのが1.3ベースで運用しているWebシステムなので、特に意識せず1.3ベースで載せてしまいました；　バージョン明記してなくて申し訳ないです。</body>
<timestamp>1236789333</timestamp>
</comment>
</comments>
</day>
<day date="2009-03-12" title="">
<body>
*1236788607*[Java][Wicket]CheckBoxMultipleChoiceとChoiceRendererを使用したチェックボックスの比較
　早速あげあげ。基本はいただいたコメントのソースのまま、項目のBeanなんかは自分が作っていたもの＋Wicket1.3仕様にあわせて……。

&gt;|java|
	private List&lt;SampleObjectModelBean&gt; selected;
	public SampleChoiceRenderer() {
//		自分が取得している項目
		selected = new ArrayList&lt;SampleObjectModelBean&gt;();
		selected.add(GenerateBeanUtility.GenerateSampleObjectModelBean(2));
		selected.add(GenerateBeanUtility.GenerateSampleObjectModelBean(5));
		
		Form form = new Form(&quot;form&quot;);
		add(form);
		
//		選択項目全て
		final List&lt;SampleObjectModelBean&gt; all = GenerateBeanUtility.GenerateSampleObjectModelBean();
//		チェックボックス
		final CheckBoxMultipleChoice multiChoice = 
			new CheckBoxMultipleChoice(&quot;list&quot;, 
						new PropertyModel(this, &quot;selected&quot;), 
						all, 
						new ChoiceRenderer(&quot;name&quot;, &quot;outline&quot;));
//		表示用ラベル
		final Label label = new Label(&quot;label&quot;, &quot;最初&quot;);
		
		form.add(multiChoice);
		form.add(new Button(&quot;next&quot;) {
			private static final long serialVersionUID = -1359417135623629179L;
//		選択したものを連結してLabelにセット
			@Override
			public void onSubmit() {
				List&lt;SampleObjectModelBean&gt; list = 
					(List&lt;SampleObjectModelBean&gt;)multiChoice.getModelObject();
				String value = &quot;&quot;;
				for (SampleObjectModelBean bean : list) {
					value += bean.getOutline() + &quot;, &quot;;
				}
				label.setModelObject(value);
			}
		});
		this.add(label);
    }
||&lt;
　こんな感じにさせてもらいました。ちょっと前回のCheckGroupとCheckのゴリ押しより長く見えるけど、チェック以外のコンポーネントも入っているからで、肝は、
&gt;|java|
//		チェックボックス
		final CheckBoxMultipleChoice multiChoice = 
			new CheckBoxMultipleChoice(&quot;list&quot;, 
						new PropertyModel(this, &quot;selected&quot;), 
						all, 
						new ChoiceRenderer(&quot;name&quot;, &quot;outline&quot;));
||&lt;
　ここだけ。あと、
&gt;|java|
		selected.add(GenerateBeanUtility.GenerateSampleObjectModelBean(2));
		selected.add(GenerateBeanUtility.GenerateSampleObjectModelBean(5));
||&lt;
　ここで、みかんとなしをユーザが取得しているものにaddしています。そして、
&gt;|java|
		final List&lt;SampleObjectModelBean&gt; all = GenerateBeanUtility.GenerateSampleObjectModelBean();
||&lt;
　こっちで項目全てを取得しています。で、htmlはこう。
&gt;|html|
	&lt;h1&gt;ChoiceRendererを使用したチェックボックス&lt;/h1&gt;
	&lt;p&gt;by id:hayasshさん&lt;/p&gt;
	&lt;form wicket:id=&quot;form&quot;&gt;
		&lt;input type=&quot;submit&quot; wicket:id=&quot;next&quot; /&gt;
		&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;2&quot; border=&quot;1&quot;&gt;
			&lt;tr&gt;
				&lt;th&gt;なんとか一覧&lt;/th&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;td&gt;&lt;span wicket:id=&quot;list&quot; /&gt;&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/table&gt;
	&lt;/form&gt;
	&lt;p wicket:id=&quot;label&quot; /&gt;
||&lt;
　すると、何とチェックが！　→[http://samplewicket.kkataka.staxapps.net/?wicket:bookmarkablePage=:sampleWicket.view.choiceRenderer.SampleChoiceRenderer]

　ソースコードも減るし、いい事ずくめでしたとさ。わーい。
</body>
</day>
<day date="2009-03-16" title="">
<body>
*1237134252*[Java][Wicket]Wicketでn行m列で折り返すリストを作る
　Wicket本が未だに入荷しないので一つ書く。Wicket奮闘記第二弾。困り度的には、最悪1列表示で妥協すれば良かったのでそんなに高くない。

　ただのリストじゃなくて、要素が何個か横に続き、n個で折り返す……というサンプル。イメージとしては、mixiのマイミクとかマイコミュニティみたいな感じかなぁ。相変わらずバージョンは1.3なのです。
[f:id:kk_Ataka:20090316004745p:image]
　こんな感じ。横に2つで折り返し。

　どういう風に実現するかすごい困ったけれど、調べてみるとGridViewというコンポーネントがあったのでこれは使えそうだと。以下Javaソース。
&gt;|java|
//	テーブルのcolspanに設定する数
	private int column;
	private List&lt;SampleObjectModelBean&gt; selected;
	
	public SampleGridView() {
//		行の設定
		column = 2;
//		DBから何らかのリスト一覧を持ってきたという体で
		final List&lt;SampleObjectModelBean&gt; list = GenerateBeanUtility.GenerateSampleObjectModelBean();
//		自分が取得している項目という体で
		selected = new ArrayList&lt;SampleObjectModelBean&gt;();
		selected.add(list.get(2));
		selected.add(list.get(5));
		
//		DataProvider 規則的に回すもの
		IDataProvider dataProvider = new IDataProvider() {
			private static final long serialVersionUID = -9120134891423038532L;
			public Iterator&lt;SampleObjectModelBean&gt; iterator(int first, int count) {
				return list.iterator();
			}
			public int size() {
				return list.size();
			}
			public IModel model(Object object) {
				return new Model((Serializable)object);
			}
			public void detach() {
			}
		};
		
		final Form form = new Form(&quot;form&quot;);
		this.add(form);

		final CheckGroup checkGroup = new CheckGroup(&quot;checkGroup&quot;, new PropertyModel(this, &quot;selected&quot;));
		form.add(checkGroup);

		final WebMarkupContainer colspanWMC = new WebMarkupContainer(&quot;colspanWMC&quot;);
//		テーブルのcolspan属性を動的にしてやる
		colspanWMC.add(new SimpleAttributeModifier(&quot;colspan&quot;, String.valueOf(column)));
		checkGroup.add(colspanWMC);

		final GridView gridView = new GridView(&quot;rows&quot;, dataProvider) {
			private static final long serialVersionUID = 3658408852637870671L;
//			ListViewと同様のpopulateItem
			@Override
			protected void populateItem(Item item) {
				SampleObjectModelBean bean = (SampleObjectModelBean)item.getModelObject();
				item.add(new Check(&quot;check&quot;, item.getModel()));
				item.add(new Label(&quot;value&quot;, bean.getName()));
			}
//			空だった場合
			@Override
			protected void populateEmptyItem(Item item) {
				item.add(new Check(&quot;check&quot;).setVisible(false));
				item.add(new Label(&quot;value&quot;, &quot;Empty&quot;));
			}
		};
//		カラムの数をセット
		gridView.setColumns(column);
		checkGroup.add(gridView);

		final WebMarkupContainer listWMC = new WebMarkupContainer(&quot;listWMC&quot;);
		listWMC.setOutputMarkupId(true);
		this.add(listWMC);

//		選択したものを表示
		ListView listView = new ListView(&quot;resultList&quot;, selected) {
			private static final long serialVersionUID = 2797947925339607450L;
			@Override
			protected void populateItem(ListItem listItem) {
				SampleObjectModelBean bean = (SampleObjectModelBean)listItem.getModelObject();
				listItem.add(new Label(&quot;name&quot;, bean.getName()));
				listItem.add(new Label(&quot;outline&quot;, bean.getOutline()));
			}
		};
		listWMC.add(listView);

//		選択決定ボタン
		AjaxButton button = new AjaxButton(&quot;button&quot;) {
			private static final long serialVersionUID = 7635585733674755967L;
			@Override
			protected void onSubmit(AjaxRequestTarget target, Form form) {
				target.addComponent(listWMC);
			}
		};
		form.add(button);
		
//		列を増やしてみる
		AjaxLink incLink = new AjaxLink(&quot;incLink&quot;) {
			private static final long serialVersionUID = 7734634038402851693L;
			@Override
			public void onClick(AjaxRequestTarget target) {
				if (column &lt; list.size()) {
					column++;
				}
				colspanWMC.add(new SimpleAttributeModifier(&quot;colspan&quot;, String.valueOf(column)));
				gridView.setColumns(column);
				target.addComponent(form);
			}
		};
		this.add(incLink);
		
//		列を減らしてみる
		AjaxLink decLink = new AjaxLink(&quot;decLink&quot;) {
			private static final long serialVersionUID = -3611671121498659140L;
			@Override
			public void onClick(AjaxRequestTarget target) {
				if (column &gt; 1) {
					column--;
				}
				colspanWMC.add(new SimpleAttributeModifier(&quot;colspan&quot;, String.valueOf(column)));
				gridView.setColumns(column);
				target.addComponent(form);
			}
		};
		this.add(decLink);
	}
	
	public List&lt;SampleObjectModelBean&gt; getSelected() {
		return selected;
	}
	public void setSelected(List&lt;SampleObjectModelBean&gt; selected) {
		this.selected = selected;
	}
||&lt;
　で、html。
&gt;|html|
	&lt;h1&gt;GridViewを用いてテーブルをn列で折り返した選択フォーム(例:mixiのコミュニティ一覧みたいな)&lt;/h1&gt;
	&lt;form wicket:id=&quot;form&quot;&gt;
		&lt;input type=&quot;submit&quot; wicket:id=&quot;button&quot; /&gt;
		&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;2&quot; border=&quot;1&quot;&gt;
			&lt;span wicket:id=&quot;checkGroup&quot;&gt;
				&lt;tr&gt;
					&lt;th wicket:id=&quot;colspanWMC&quot;&gt;なんとか一覧&lt;/th&gt;
				&lt;/tr&gt;
				&lt;tr wicket:id=&quot;rows&quot;&gt;
					&lt;td wicket:id=&quot;cols&quot;&gt;
						&lt;input type=&quot;checkbox&quot; wicket:id=&quot;check&quot; /&gt;
						&lt;span wicket:id=&quot;value&quot; /&gt;
					&lt;/td&gt;
				&lt;/tr&gt;
			&lt;/span&gt;
		&lt;/table&gt;
	&lt;/form&gt;
	&lt;h1&gt;(おまけ)列を動的に変えてみる&lt;/h1&gt;
	&lt;ul&gt;
		&lt;li&gt;&lt;a href=&quot;#&quot; wicket:id=&quot;decLink&quot;&gt;列減らす&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;#&quot; wicket:id=&quot;incLink&quot;&gt;列増やす&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;
	&lt;h1&gt;選択したもの&lt;/h1&gt;
	&lt;span wicket:id=&quot;listWMC&quot;&gt;
		&lt;dl wicket:id=&quot;resultList&quot;&gt;
			&lt;dt wicket:id=&quot;name&quot;&gt;&lt;/dt&gt;
			&lt;dd class=&quot;recital&quot; wicket:id=&quot;outline&quot;&gt;&lt;/dd&gt;
		&lt;/dl&gt;
	&lt;/span&gt;
||&lt;
　列を変えるボタンのソースとかはおいといて……、とりあえず
[f:id:kk_Ataka:20090316004745p:image]
　の画面は実現できます。普通のListViewでコレクションを表示していくのと違う点は、
++ListViewがGridView
++--表示するオブジェクトがModel(かList)ではなく、DataProvider
++--populateEmptyItemの処理
++--カラム数をセット
++wicket:idでちょこっと
　このくらいです。

　まず、ListViewがGridView。これはそういうコンポーネントがあるのかぁ的な感じでゴリゴリ変えていきます。

　次に、GridViewに変えた事で引数にModelとかListが使えなくなりました……。代わりにDataProviderというものを突っ込んでやらないといけないらしい……。DataProviderはこんな感じ。listはDBから取得してきたという体で生成した選択項目全部のリストです。
&gt;|java|
		IDataProvider dataProvider = new IDataProvider() {
			private static final long serialVersionUID = -9120134891423038532L;
			public Iterator&lt;SampleObjectModelBean&gt; iterator(int first, int count) {
				return list.iterator();
			}
			public int size() {
				return list.size();
			}
			public IModel model(Object object) {
				return new Model((Serializable)object);
			}
			public void detach() {
			}
		};
||&lt;
　とりあえずこんな感じで動きました。iteratorメソッドには引数が二つあったりするんですが、次回は使います。今回は使わなくても動いた……。((不都合が起こるパターンもあるのだろうか？))

　これで、回すのに必要なものは揃ったので、populateItemをオーバライドしますが、populateItemとは別にpopulateEmptyItemというメソッドもオーバライドしないといけません。理由は後述。

　次にテーブルを何列で折り返したいかをsetColumnsメソッドで指定します。今回は頭の方で2に設定しているので、n行2列のテーブルに出来るはずです。しかし、列を指定した事でテーブルに空白が出来る可能性が起こってしまいます。2列のテーブルなら、リストが奇数の場合最後の行が1列しか埋まりません；

　ここでpopulateEmptyItemの出番です。テーブルがまだ全部埋まっていないのに要素が終わってしまった場合、これが呼ばれます。
[f:id:kk_Ataka:20090316004745p:image]
　Emptyと表示しているところがpopulateEmptyItemが呼ばれている箇所です。めでたしめでたし。

　最後にwicket:id。
&gt;|java|
		final GridView gridView = new GridView(&quot;rows&quot;, dataProvider) {
			private static final long serialVersionUID = 3658408852637870671L;
//			ListViewと同様のpopulateItem
			@Override
			protected void populateItem(Item item) {
				SampleObjectModelBean bean = (SampleObjectModelBean)item.getModelObject();
				item.add(new Check(&quot;check&quot;, item.getModel()));
				item.add(new Label(&quot;value&quot;, bean.getName()));
			以下略
||&lt;
　JavaでWicket:idを生成しているのは、
--GridViewのrows
----populateItem内のCheckのcheck
----populateItem内のLabelのvalue
　の三つなんですが、この三つをListView的な感じでバインドしていっても、
&gt;||
WicketMessage: Unable to find component with id 'check' in [MarkupContainer [Component id = 1, page = sampleWicket.view.gridView.SampleGridView, path = 2:form:checkGroup:rows:1.Item, isVisible = true, isVersioned = false]]. This means that you declared wicket:id=check in your markup, but that you either did not add the component to your page at all, or that the hierarchy does not match.
||&lt;
　checkがない！　と怒られてしまいます。

　なんで＞＜　と調べてみると、どうも、
&gt;|html|
				&lt;tr wicket:id=&quot;rows&quot;&gt;
					&lt;td wicket:id=&quot;cols&quot;&gt;
						&lt;input type=&quot;checkbox&quot; wicket:id=&quot;check&quot; /&gt;
						&lt;span wicket:id=&quot;value&quot; /&gt;
					&lt;/td&gt;
				&lt;/tr&gt;
||&lt;
　rows(=GridView)の下にcolsというidを振らないといけないらしい。GridViewクラスの中にも
&gt;|java|
		Item rowItem = newRowItem(newChildId(), row);
		RepeatingView rowView = new RepeatingView(&quot;cols&quot;);
		rowItem.add(rowView);
		add(rowItem);
||&lt;
　こんな記述があって、どうもcolsを振っているらしい！　振れば動く！

　最後はらしいらしいが続いてますが、一応これでmixiのマイピクみたいなテーブルも作れそうです。

　この記事を書くに当たって、[http://hamachan.info/excel/gyoretu.html:title]で行と列のわかりやすい覚え方を知りました。

　行と列わからないんです＞＜　でもこれで忘れない！
</body>
<comments>
<comment>
<username>cheat</username>
<body>某研究室のcheatです&lt;br&gt;なんかエラーググってたらみつけますた</body>
<timestamp>1247234728</timestamp>
</comment>
<comment>
<username>ikura</username>
<body>スタイルシートつかって要素のサイズを決めて、float:leftで設置していくのでは駄目なんでしょうか？？</body>
<timestamp>1320027787</timestamp>
</comment>
<comment>
<username>kk_Ataka</username>
<body>2年前の事なので定かではないですが、この時はWicketでなんとかできないかと考えた末の方法だったのだと思います！</body>
<timestamp>1321447309</timestamp>
</comment>
</comments>
</day>
<day date="2009-03-17" title="">
<body>
*1237297925*[日記]チェックボックスの(中略)続き
　もういいかと思うけど、CheckGroupの初期値についてさらに続き。

　自分より遥か前に打開している方の記事を見つけました。http://d.hatena.ne.jp/yuripop/20090105の小さい発見 - CheckGroupの初期値。自分はモバイルではないのですが、モバイルもPCもやっている事は同じだと思います。

　どうやって初期値を認識させたものかかなり躓いたところだったので、もう少し早く見つけていれば……。でも、CheckGroupとかDropDownChoiceの初期値って結構「？？」ってなる場所なのかも。((TextField系には突っ込めば行けるけどCheckGroup……って所まで同じだったので；))矢野さんの本ではフォローされているのかな？　確認してみようっと。
</body>
</day>
<day date="2009-03-26" title="">
<body>
*1238002057*[Java][Eclipse]Eclipseで優先順位の低いパッケージを補完候補から除外してみた
　id:Yamashiro0217さんのエントリ[http://d.hatena.ne.jp/Yamashiro0217/20090322/1237707686:title]を試した。……確かに、Eclipseの文にも
&gt;&gt;
For example 'java.awt.*' will hide all types from the awt packages.
&lt;&lt;
　って書かれてますね。
[f:id:kk_Ataka:20090326020054p:image]
　↑早速java.awt.*を足してみたら、確かにListがフィルタリングされて除外されてました。すごい！　あとLabelとかも。個人的には、WicketでWebアプリケーションを書いていくなら、java.awt.*の他にjavax.swing.*もフィルタリングすると良いと思います。
&gt;&gt;
「ListViewでエラーが起こる＞＜」
「ListView listView = new ListView(&quot;list&quot;, list) {...。別に間違ってないと思うけど、何ていうエラーが出てるの？」
「コンストラクタにこんな引数はない……かな」
「？？」
.
.
.
「あーこれWicketのListViewじゃなくてSwingのListViewをインポートしてますね！」
ちゃんちゃん
&lt;&lt;
　こんな事を自分も何回かやりましたが、周りでも僕の知る限り何人((初めのうちはですけど、初めのうちだからこそ無意識にひっかかるというか。))かやっていたので。

　フィルタリングを追加するだけでもかなり教育コストや開発時間を削減できると思うんですよね。((あんまりフィルタしすぎるのも考えものですが；))
</body>
</day>
<day date="2009-03-30" title="">
<body>
*1238392970*[Mac][備忘録]MacbookからCDが取り出せなくなったときの対処法
　Macbookが起動画面((グレーの画面＝ジャーン♪　ってなる所))からウンともスンともいわなくなった！　起動ディスクがCDドライブに入っているんだけどそいつも取り出せなくなった！　強制排出ボタン的なものもない！

　むりくり取り出す前に、色々調べてみると、起動時に色々なオプションをつけることができるのね＞Mac

:起動時にマウスボタンを押しっぱなしにする:CDがイジェクトされる(らしい)
:起動時にoptionキーを(ry:MacとかWindowsとか起動するボリュームを選択できる
:起動時にcキー:CDから起動できる(らしい)
:起動時にxキー:強制的にMac OS Xを起動できる(らしい)
:起動時にshiftキー:セーブモードで起動できる(らしい)

　他にもいっぱいあったけど、とりあえず試したのはこのくらい。(らしい)とついているのは今回初めて使用したコマンド。でも効果は上がらず……。

　Mac OSは起動しないわ、ボリューム選択もできないわ、CD排出もできないわで、グレー画面を出したまま←(ここ重要)数分間途方にくれていたら、突然ウィ、ウィ、ウィーンとCDを排出しだした！　排出したらいつも通りMac OSが起動した！((Macを起動させたまま放置してたら勝手に吐き出すのだろうか？))

　こんなん知らんわ！
</body>
<comments>
<comment>
<username>tasa</username>
<body>当方もCDが排出されずに困っていました。起動時に、放置するワザを試してみたところうまく取り出すことができました。ありがとうございました。</body>
<timestamp>1302280899</timestamp>
</comment>
<comment>
<username>kk_Ataka</username>
<body>ありがとうございます！参考になってよかったです！</body>
<timestamp>1303489836</timestamp>
</comment>
</comments>
</day>
<day date="2009-05-22" title="">
<body>
*1242925613*[日記]社会人になって一ヶ月半がたちました

　見出しどおり。色々感じたこともあるので、後日アウトプットしてみよう。

　最近、全然Wicketも触ってないし、むしろJSP/サーブレットの復習をやっている感じです。そこで痛感したのが実は僕はIDEがないと超弱いということ。聖衣のない聖闘士みたいなものでした；((龍星座とか聖衣ない方が強い人もいるけど；；))　かなりの部分でIDEに依存していたんだなぁ。。。

　もっと本質を理解したい＞＜((もっとおもろなりたい＞＜＠駿河学))　と、えらいうっすらとした向上心を持ちつつあります。そこで、自分の中でのプログラムに対するテンションを上げるために、いや、あげあげするためにjava-jaに参加しました。都合がついたらイベントにも行きたい＞＜　Wicket-jaにも継続して参加中デス。
</body>
</day>
<day date="2009-07-01" title="">
<body>
*1246377981*[日記]社会人になって三ヶ月がたちました
　Twitterではやれアイマスがどうだロックマンがどうだとほぼ毎日ポストしてるけどこっちは放置しすぎ。

　現在は、シンプルにjsp/サーブレットのみ使用のwebアプリケーションの作成をしています。webアプリ構築というより、どちらかというと開発プロセスに重きを置いて、様々なドキュメントや仕様書を書く毎日。ここ数日ようやくコーディングとあいなりました（´ω｀）

　ここで、とりあえずエクセルとワードとパワーポイントの三重葬で泣きを見た僕が通りますよっと……。

　プログラミングに関しては、使用可能武器にIDEがないという事でIDEを封印して初期装備で戦っています。とりあえず「いつ、なんどき、誰の挑戦でも受ける」ストロングスタイルの精神で開発環境が揃わない状況でも、「作って」って言われたらがんぶって作ることができるかを意識してやっています。

　今までeclipseに任せていたことも自分でやらなくてはいけなくなったので、また少し深みに入り込んだ気分。さしあたって実はクラスパスとかの概念が全部eclipseに頼りっきりで全然理解していなかったのには泣いた。コンパイル通んないんだもんなぁー！

　今勉強してることをまとめて、いつかメモ帳((とJDKとTomcatとDB……。))でできる！　webアプリケーションまとめみたいなエントリを残してごきげんようさようならしたい。
</body>
</day>
<day date="2009-10-10" title="">
<body>
*1255182752*[Firefox]Firefoxに入れるアドオンめも
　久しぶりすぎて、はてなの使い方忘れてる。

　さて、今回は久々なので自分がFirefoxに入れるアドオンを箇条書きしていきます。というか、今年の春に引越しして以来素のFirefoxを半年近く使い続けてたのが驚き。慣れって怖い。

:FireGestures:マウスジェスチャ
:IE Tab:IEの確認
:Tab Mix Plus:タブ拡張
:テキストリンク:URI文字列の読み込み
:Hatena Bookmark:はてブのFirefox拡張
:はてなスクリーンショット拡張:はてなフォトライフのFirefox拡張？

　今のところこんなところ。……えーもっと使ってたはずなんだけど、全然思い出せないｗ
　使ってたアドオンの設定ですら覚えてない。

-FireGestures
-IE Tab

　この辺は入れとく。

-Tab Mix Plus
--イベント＞タブを閉じる＞最後のタブを閉じたとき、ウィンドウ自体は閉じないにチェック

　これも定番。上記の設定はctrl+F4でウィンドウが死んでしまわないように。

-テキストリンク

　テキストリンクは、aタグで囲まれてないURIの文字列をクリックで読み込めるというアドオン。URIをこぴぺする手間が省けます。

-Hatena Bookmark

　復ッ活ッ！　はてなブックマーク復ッ活ッ！
　これが多分これからしばらく生きていく上で一番重要なアドオンかとッ！　調べ物をしていて役に立ったサイトやブログをここでブックマークしておいて、困ったら見るッ！　何時ッ！　何時ッ！　何の調べ物であってもッッッ！

　勉強した事をまとめておく場って言うものが社会人になった自分の中でまだ作れてなくて。

　自宅なら自分の環境があるのでいいんですが、業務中の調べものが……。社外秘じゃないフッツーのJava/Swingで○○するにはどうするみたいな情報すらまとめておく場がないので。
　4月から今日まで、勉強したこと全て右から左に流れていきました。多分この半年でそうとうバカになっているはず。

　という事で、サイトやブログはメモる！（物理的に）　そして帰ってきてはてブに流し込む！　そうすればいつでも引き出せる。こう書いとけばやるっしょ。（北海道弁）

-はてなスクリーンショット拡張

　なんか便利そうだったから衝動的に入れた。評価は未知数。スクリーンショット取る時に便利か――ってこれブラウザ上しか取れない？　Eclipseとかは……。

　今回はこんな感じで。あーあとWeb Developerがあったか。
</body>
</day>
<day date="2009-10-19" title="">
<body>
*1255949562*[Oracle][SQL]PL/SQLとSQLの種類

　OracleM@sterを目指すためにちょっとずつOracle（というかSQL）のエントリを増やしていく。超にわかなところから徐々にOracleM@sterをコーナーに追い詰めていこうと思います。

　というわけで題名の件。
**PL/SQL
　OracleのOracleによるOracleのための&lt;span style=&quot;font-weight:bold;&quot;&gt;プログラミング言語&lt;/span&gt;。SQLに変数宣言やif文、for文exceptionなどを記述可能にしたプログラミング言語なのでSQLに分類されない。
　記述的にはこんな感じになる。
&gt;|plsql|
DECLARE
	宣言
BEGIN
	IF (条件) THEN
		処理
	END IF
EXCEPTION
	WHEN 例外条件 THEN
		処理
END
||&lt;
　次にSQLの種類。

**SQLの種類

　SQLの操作は大きく四つに分けられて、

-データを&lt;span style=&quot;font-weight:bold;&quot;&gt;定義&lt;/span&gt;する言語: DDL(Data &lt;span style=&quot;font-weight:bold;&quot;&gt;Definition&lt;/span&gt; Language)
-データを&lt;span style=&quot;font-weight:bold;&quot;&gt;操作&lt;/span&gt;する言語: DML(Data &lt;span style=&quot;font-weight:bold;&quot;&gt;Manipulation&lt;/span&gt; Language)
-データを&lt;span style=&quot;font-weight:bold;&quot;&gt;制御&lt;/span&gt;する言語: DCL(Data &lt;span style=&quot;font-weight:bold;&quot;&gt;Control&lt;/span&gt; Language)
-トランザクション制御

　となっている。全部読んで字のごとくなんだけど初見だと略称から意味が出てこない；　あと、若干略称からコマンドが出てこない事がある。コマンドは、

|*DDL|CREATE(作成)|ALTER(変更)|DROP(削除)|&lt;span style=&quot;font-weight:bold;&quot;&gt;TRUNCATE(切捨て)&lt;/span&gt;|　|
|*DML|SELECT(問い合わせ)|INSERT(挿入)|UPDATE(更新)|DELETE(削除)|&lt;span style=&quot;font-weight:bold;&quot;&gt;MERGE(挿入更新)&lt;/span&gt;|
|*DCL|&lt;span style=&quot;font-weight:bold;&quot;&gt;GRANT(権限付与)&lt;/span&gt;|&lt;span style=&quot;font-weight:bold;&quot;&gt;REVOKE(権限削除)&lt;/span&gt;|　|　|　|
|*トランザクション|COMMIT(コミット)|ROLLBACK(取り消し)|SAVEPOINT(RB位置指定)|　|　|

　こんな感じ。
</body>
</day>
<day date="2009-10-31" title="">
<body>
*1257000092*[Oracle][SQL]文字リテラルで'を使用する場合
　シングルクォーテーションがクセモノな'&lt;span style=&quot;font-weight:bold;&quot;&gt;Y's II&lt;/span&gt;' をきちんと挿入・表示させる。

**シングルクォーテーションを重ねる

&gt;||
insert into sample values(2, 'Y''s II')
||&lt;

　まず基本。シングルクォーテーションを重ねればOK。

**代替引用符を使用する

　もしくは、Oracle 10gからサポートされた代替引用符(q or Q)で、任意の文字を引用符として使用する。

&gt;||
insert into sample values(3, q'aY's IIa')
insert into sample values(3, q'%Y's II%')
||&lt;

　上はaで挟がった中がリテラルになり、下は%で挟がった中がリテラルになる。ちなみに任意の文字と指定文字が重なってしまった場合でも、

&gt;||
insert into sample values(3, q'sY's IIs')
||&lt;
　問題ない。頭とおしりできちんと見とるんかな。

**091117追記
　どうやら、
&gt;||
insert into sample values(3, q'[Y's II]')
insert into sample values(3, q'(Y's II)')
||&lt;
　こういう表記も良いらしい。(というか、こっちが主流？)文字や記号だと同じもので挟まないといけないのに、かっこは開きと閉じで対応させる様子。また、
&gt;||
insert into sample values(3, q'YY's IIY')
||&lt;
　これはダメだった。多分イースのイーの部分(Y')が終わりと見なされているから？　記号系では、
&gt;||
insert into sample values(3, q'&amp;Y's II&amp;')
||&lt;
　アンパサンドにすると、置換を求められた。

</body>
</day>
<day date="2009-11-01" title="">
<body>
*1257053470*[Oracle]Oracle Database 10g Express Editionを導入します
-Windows XP Home Edition SP3
-Oracle Database 10g Express Edition
-Firefox 3.5.4

　環境下でOracleスタートさせます。

**Oracleを入手する

　何はなくともOracleを入手する所から。まず[http://www.oracle.com/index.html:title=Oracle公式]へ。Oracle Database ○○というリンクをクリック。
[f:id:kk_Ataka:20091101015327p:image]

　Express Editionリンクをクリック。
[f:id:kk_Ataka:20091101015328p:image]

　Download Oracle Database 10g Express Editionリンクをクリック。
[f:id:kk_Ataka:20091101015329p:image]

　プラットフォームを選択。今回はWindowsなので下で。
[f:id:kk_Ataka:20091101015330p:image]

　規約に同意してダウンロード。上から三つの違いはシングルバイトかマルチバイトかクライアントのみ…？
[f:id:kk_Ataka:20091101015331p:image]

　Oracleのアカウントを持っていない場合このページに飛んでくる。sign up now.リンクをクリック。
[f:id:kk_Ataka:20091101015332p:image]

　お客様プロファイル(Oracle.com)を作成リンクをクリック。
[f:id:kk_Ataka:20091101015333p:image]

　メールアドレスとパスワードを記入し、名前や所属などの情報を記入していく。&lt;span style=&quot;font-weight:bold;&quot;&gt;このメールアドレスがそのままusernameになるので注意&lt;/span&gt;。
[f:id:kk_Ataka:20091101015334p:image]

　以上がダウンロードの手順。次にインストール。

**インストールする

　基本的には次へ次へ。
[f:id:kk_Ataka:20091101015335j:image]
[f:id:kk_Ataka:20091101015336j:image]
[f:id:kk_Ataka:20091101015337j:image]

　ここでパスワード入力。&lt;span style=&quot;font-weight:bold;&quot;&gt;このパスワードを使用するユーザはSYS, SYSTEM！&lt;/span&gt;(これ読み飛ばしてて後で詰まった；)
[f:id:kk_Ataka:20091101015338j:image]
[f:id:kk_Ataka:20091101015339j:image]

**実行まで持っていく

　実行まで持っていく。あと少し。FIGHT!　まずスタートアップにOracle Database 10g Express Edition &gt; Go To Database Home Pageというリンクがあるのでこれをクリック。もしくはブラウザを起動しhttp://127.0.0.1:8080/apex/と入力
[f:id:kk_Ataka:20091101015340j:image]

　ログイン画面が出るので、Usernameに&lt;span style=&quot;font-weight:bold;&quot;&gt;system&lt;/span&gt;、Passwordに&lt;span style=&quot;font-weight:bold;&quot;&gt;インストール時に入力したパスワード&lt;/span&gt;を入力。
[f:id:kk_Ataka:20091101015341p:image]

　ログインが成功するとこんな画面に。
[f:id:kk_Ataka:20091101015342p:image]

　まずは軽くテーブルを作成してみる。Object Browser &gt; Create &gt; Tableをクリック。
[f:id:kk_Ataka:20091101015343p:image]

　ここで、テーブル情報を入力。
[f:id:kk_Ataka:20091101015344p:image]

　以下三つは、Primary Key, Foreign Key, Constraintsの入力。今回はそのままNextで。
[f:id:kk_Ataka:20091101015345p:image]
[f:id:kk_Ataka:20091101015346p:image]
[f:id:kk_Ataka:20091101015347p:image]

　確認が出るので良ければCreate!　実際のSQL文も出る模様。
[f:id:kk_Ataka:20091101015348p:image]

　Object Browser &gt; Browse &gt; Tablesで確認。sampleテーブルができている！
[f:id:kk_Ataka:20091101015349p:image]

　最後に、データを突っ込んで見てみる。SQL &gt; SQL Commands &gt; Enter Command
[f:id:kk_Ataka:20091101015350p:image]

　INSERT中…。
[f:id:kk_Ataka:20091101015351p:image]

　SELECT中…。
[f:id:kk_Ataka:20091101015352p:image]

　以上！
</body>
</day>
<day date="2009-11-05" title="">
<body>
*1257433826*[Oracle]Oracle Database 10g Express Editionの日本語版を導入します

　実は、前回のこのOracleを選択するページにて
[f:id:kk_Ataka:20091101015331p:image]

　上から二つ目のUniversal版を選択しておけば日本語版を導入できました；；　なんでこっち落とさなかったんだ。Multi-byte Unicode database for all language deploymentって書いてあるしっ！

**インストール
[f:id:kk_Ataka:20091106000343j:image]
[f:id:kk_Ataka:20091106000344j:image]
[f:id:kk_Ataka:20091106000345j:image]
[f:id:kk_Ataka:20091106000436j:image]
[f:id:kk_Ataka:20091106000437j:image]
[f:id:kk_Ataka:20091106000438j:image]
**アプリ
[f:id:kk_Ataka:20091106000639p:image]

　完全に日本語ですどうもありがとうございました。さーいじってみようかなっ！
</body>
</day>
<day date="2009-11-16" title="">
<body>
*1258300637*[Oracle][SQL]OracleにおけるWHERE句、BETWEEN句、IN句、LIKE句、ORDER BY句のまとめ
　まずは基本的な句のまとめから。

**論理演算子の優先順位

-NOT &gt; AND &gt; OR

　本当はもっと演算子の優先順位はあるけど、とりあえず引っかかったところだけ。ANDの方がORよりも早いです。

**WHERE句

-文字、日付は'(シングルクォーテーション)で囲む
-文字列の大文字小文字は区別される
-日付データのデフォルト値はDD-MON-RR
-WHERE句では列別名は使えない！
--ただし、ORDER BY句では使用できる！((これなんでなんだろう？　処理の順番とか優先順位的なものがあるのかな？))
　例。普通のSQL文です。。
[f:id:kk_Ataka:20091106011618p:image]
　id列をXYZと名前付けてこいつをWHERE句で使おうとすると…。
[f:id:kk_Ataka:20091106011755p:image]
　エラーになります。しかし、name列をXYZと名前付けてORDER BY句で使おうとすると…。
[f:id:kk_Ataka:20091106011756p:image]
　使えます！

**BETWEEN '○' AND '△'

　○～△で合致するものを探す。こんなテーブルで…
[f:id:kk_Ataka:20091106010119p:image]
　nameが1から9で合致するものを探す。
[f:id:kk_Ataka:20091106010120p:image]
　1から2で合致するもの。
[f:id:kk_Ataka:20091106010121p:image]
((何か、文字列でBETWEEN使ってるシーンをどこかで見た事ある気がするんだけど幻覚かなぁ。))

**name (NOT) IN('AA', 'BB')

　AA、BBいずれかに合致すれば取得します。下図の場合はname列の中からY's IかY's II((以前使ったシングルクォーテーション重ねと代替引用符を使用しています。))に合致する値を探してくるので、
[f:id:kk_Ataka:20091116003449j:image]
　こうなります。
　一方、NOTは合致しないものを取得します。Y's IとY's II以外の値を取得します。
[f:id:kk_Ataka:20091116003450j:image]

**name LIKE '%AA%'

　(任意の文字列)AA(任意の文字列)に合致するものを探します。他には_(アンダーバー)があります。
　NAME = '%AA%'のように=で比較してしまうと完全なる%AA%この文字列と合致するものを探します。

**name LIKE '%A\_A%' ESCAPE '\'

　(任意の文字列)A_A(任意の文字列)を探したい時にname LIKE '%A_A%'としてしまうと、_はワイルドカードと判断されてしまうのでエスケープ。

**name &gt;= 'SQL'

　指定文字よりも文字コードが前のものに合致(？)。SQLは満たすとして、○SQK、○SP、○S、×SQM、×SR、×Tとなります。

**name IS (NOT) NULL

　name = NULLではUNKNOWNが返ってくるのでNULLは取得できません。また、値が設定されていないカラムはNULLとされるので、検索するにはIS NULLしかありません。=で比較してしまうと結果は不定となってしまうようです。
　例。id1から5までのtimstaが値なし、つまりNULLとなっています。
[f:id:kk_Ataka:20091116001633j:image]
　timsta IS NULLでNULLの行を選択すると…。
[f:id:kk_Ataka:20091116001634j:image]
　逆に、timsta IS NOT NULLでは…。
[f:id:kk_Ataka:20091116001636j:image]
　では、timsta = NULLだと…。
[f:id:kk_Ataka:20091116001635j:image]

　なぜ=NULLがダメなのかは[http://www.geocities.jp/mickindex/database/idx_database.html:title]＞NULLにまつわる諸問題にとても詳しく書かれています。一回読んだだけじゃふーん…？　くらいにしかならなかったけど＞＜

**ORDER BY

　SELECT文の最後に記述。ASC(昇順)、DESC(降順)でソート可能。デフォルトはASC。

　ちなみに、1, 2, 3…とかa, b, c…が昇順のはず。昇順と降順が全然覚えられなかった僕です。が！
-[http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1315415703:title]
　階段を1階、2階…と昇るように昇順！　これで忘れない！

**ソート時のNULLの扱い

　NULLはどうやら∞と見なされるようなので、昇順では1, 2…∞となり最後。降順では∞…2, 1となり最初ということに。
[f:id:kk_Ataka:20091116003451j:image]

　一応 NULLS [ FIRST | LAST ] というものがあって指定は可能です。
[f:id:kk_Ataka:20091116003452j:image]
　みたいな感じで。こうすると昇順でもNULLは最初に来るようにできます。
</body>
</day>
<day date="2009-12-08" title="">
<body>
*1260268590*[Mac][備忘録]Macの&quot;書類&quot;とか&quot;ライブラリ&quot;みたいに日本語化されているフォルダを英語化する

　※この作業を行うことによるデメリットはわかんないです。トーシロだからとりあえずガンガン消してみるよ！

　Macの/Users/ユーザ直下のフォルダ((Macってフォルダっていうんだっけ？　ディレクトリ？))って&quot;書類&quot;とか&quot;ライブラリ&quot;とか日本語化されてるくせに、ターミナルから見ると&quot;Document&quot;とか&quot;Library&quot;になっててすごい気になる。でも、言語自体を英語にするのもちょっと……。
[f:id:kk_Ataka:20091208193648p:image]
　ということで、なんとかこの日本語フォルダだけ英語表記にできないもんだろうかと思って調べてみた。原因(？)としては、日本語化されているフォルダには「.localized」っていうファイルがあるようで、こいつが日本語にしている模様。((消してしまったので、どんなファイルだったのかわからな；))

　消します！
[f:id:kk_Ataka:20091208193649p:image]
　消し消し……。
[f:id:kk_Ataka:20091208193650p:image]
　全部英語になった！
[f:id:kk_Ataka:20091208193651p:image]
</body>
</day>
<day date="2009-12-09" title="">
<body>
*1260354373*[Mac][備忘録]Macの日本語入力で数字を入力するときに最初から半角にしたい＋α

　僕はMac＠日本語入力に

+l行(la, li, lu, le, lo)でぁぃぅぇぉが出てほしい
+？/キーで・(なかぐろ)が出てほしい
+数字をうったら半角で12345みたいに出てほしい

　こういう事を求めたいので、これらの設定方法をメモ。使うてないと完全に忘れますな……。ずっと違うところ探してて時間無駄にした。

　まず、画面上のバー((何バー？　タスクバー？))の「あ」とか「A」とかなってる場所をクリック。環境設定を表示という項目を選択。
[f:id:kk_Ataka:20091209192432p:image]
　入力操作では、「Windows風のキー操作」という項目があるのでチェック。((意識して使ったことないけど、Windowsではかな入力中にshift押すと英字モードに切り替わるらしい。Macだとない？　これに拘りがある人は設定いじれないかも……。))することで、一つ目のl行でぁぃぅぇぉが満たせます。
[f:id:kk_Ataka:20091209192433p:image]
　次に入力文字。/キーで入力する文字という項目を・(なかぐろ)に。数字を全角で入力という項目のチェックを外す。これで残り二つも満たせました！
[f:id:kk_Ataka:20091209192435p:image]

</body>
</day>
<day date="2009-12-12" title="">
<body>
*1260621685*[Mac][備忘録]Mac OS X 再インストール(クリーンインストール)手順

　やり方忘れたのでメモ。

**言語選択
-主に日本語を使用する

**ディスク初期化
-上のユーティリティ＞ディスクユーティリティ
-ディスクを選択＞消去タブ
--フォーマットはMac OS 拡張(ジャーナリング)
--名前はデフォルトでいいや
-消去...ボタン
-消去が終了したら閉じる

**Mac OS X インストール
-続ける
-規約に同意

**インストールする前にカスタマイズ！
-インストールするディスクを選択
-カスタマイズ
--プリンタサポート、追加フォント、言語環境のチェックをすべて外す
-その後でインストール……20分くらい？
-インストールが完了したら再起動

　ここから先は個人的なメモ。

====

**ようこそ
-日本を選択

**キーボード入力環境を選択
-ことえりを選択

**すでにMacをお持ちですか？
-情報を今すぐ転送しない

**インターネットの接続方法
-AirMacワイヤレス
-コンピュータをインターネットに接続しないを選択した場合は一個飛ばし

**ワイヤレスネットワークを選択
-ネットワークを選択してKEYを入力

**ユーザ登録の情報
-そのまま続ける
-警告が出ても続ける

**ローカルアカウントの作成
-フルネーム、アカウント名、パスワードと確認を入力し続ける
-ヒントを入力しなくても～と出るが続ける

**このアカウントのピクチャを選択
-とりあえず雪の結晶の気分

**MobileMeのフリートライアル(ネット接続時のみ？)
-今はフリートライアルを利用しない

**時間帯の設定
-最も近い都市を入力し続ける

**登録を忘れずに...
-完了
</body>
</day>
<day date="2009-12-17" title="">
<body>
*1260981278*[java-ja][イベント]java-ja忘年会に参加しました
**java-ja忘年会だ！
　絶対迷うとわかっていたので、かなり早めに新宿へ向かいました。到着後、iPhone片手に新宿アイランドタワーを探すも新宿の複雑さに若干オロオロ。田舎者に東京は難しすぎる……。それでもなんとか20時に着くことができました;;

　暇を持て余してたらTwitterのTL上で着いたと投げていたid:Ewigkeitさんを発見。すかさず合流してもいいですかと投げたら快諾してくれました。いい人＞＜　そしていい時代になったものだ＞＜

　Ewigkeitさんの後ろを着いていき会場入り。結構早い方だった。
　会場入りする人が増えてくると会話も増えて、会話の端々にTwitterIdのような単語が飛び出すと「あ～、あのアイコンの人じゃん！」と一人で盛り上がったり。((僕はjava-ja初参加だったので、知ってる人は第二回wicket勉強会で発表していた人とか、その後の懇親会で一緒だった人くらいしかいなかったのです;;))

　忘年会が始まると、うちの区画はいきなり名刺交換な流れになっていたので乗り遅れないように交換。id:t-wadaさんも同じ区画だった！　ちょっと遠かったけど。

　今回初参加だったので、皆さん何されてるんですか？　くらいの話しか出来なかったのが悔やまれる;;

　しかし、嬉しかった事もあります。前回のwicket勉強会でお話した人が僕を記憶に残しててくれたこと。これは嬉しかった……。id:t_yanoさんも僕のこと覚えててくださったのが驚き！　今年始めのwicket勉強会で非常に良い経験をさせて頂いたため、お礼も兼ねてどうしても挨拶だけしたくて、終わりがけに恐る恐る訪ねたら……！　少ししか話せませんでしたが機会があったらまたお話したい＞＜　wicketも触りたい＞＜

　まだTwitter上でしかあったことがない人もいるので、次回会えたらと思います。

　主催のid:Yamashiro0217さんお疲れさまです。ありがとうございました！　他の皆さんもお疲れさまでした！

　これで僕もjava-jaですっ。

**P.S.
　t-wadaさんがブログラマーたるものジョジョを知らねばならん！　と、ジョジョ勉強会を開催するという噂を耳にしたのですが……。最初Java勉強会の空耳かと思った。
</body>
</day>
<day date="2009-12-26" title="">
<body>
*1261792712*[Mac][備忘録]Logicool MX Revolutionの副ボタンでExpos&amp;#233;とかSpacesを使いたい＠Snow Leopard
**なんか対応されてるみたいです。
-[http://www.logicool.co.jp/index.cfm/428/4676&amp;hub=1&amp;cl=jp,ja?osid=9:title]
　一生懸命やったのに＞＜　トラックバック先もちゃんとおけば良かった＞＜　もう～オバカ！(矢部的な意味で)　このエントリはMX Revolution自分設定備忘録として残しとこ。

**とりあえず、
-親指戻るボタン
--クリック＞中央クリック
[f:id:kk_Ataka:20091226103507p:image]
-親指進むボタン
--アプリケーションの切り替え＞次の右のアプリケーションに切り替える
[f:id:kk_Ataka:20091226103508p:image]
-One-Touch Searchボタン
--キーストローク＞command+W
[f:id:kk_Ataka:20091226103509p:image]
-サムホイールボタン
--画面のキャプチャ＞領域、ファイル
[f:id:kk_Ataka:20091226103510p:image]

　この辺は設定できました。((でも、Google Chromeだと中央クリックが効かないんだよなぁ……。))

　でも、サムホイール前回転と後回転にすべてのウィンドウ(Expoc&amp;#233;)とSpacesを割り当ててもうまく動いてくれなかった。。。どうもSnow Leopardには現段階で対応してない模様？

**調べ中……

　そこで、[http://blog.livedoor.jp/perfectionist0519/archives/759441.html:title]を参考にしてやってみました。

　結論としては動いた！　ボタン設定に用意されているExpos&amp;#233;, Dashboard、およびSpacesを使用せずに、キーストロークでやってしまおうという考え。

　まずすべてのウィンドウから。これってExpos&amp;#233;デフォルトだとF9になっているはず……。これをF9からずらす。F8がボタンかぶってる！　って言われてるけどすぐ直すからキニシナイ！
[f:id:kk_Ataka:20091226103511p:image]
　移したらマウスの設定に戻り、
-サムホイール前回転
--キーストローク＞F9
[f:id:kk_Ataka:20091226103512p:image]
　とする。

　設定したら、Expos&amp;#233;のすべてのウィンドウをF9に戻す。こういう手順を踏まないとキーストロークでF9を入れる事ができないと思う。できるのかな？

　Spacesも同じようにショートカットキーをいったん退避させて(デフォルトならF8のはず)、
[f:id:kk_Ataka:20091226103513p:image]
-サムホイール後回転
--キーストローク＞F8
　とする。

　できた！　けど、早く対応してくれないかなぁ。
</body>
</day>
<day date="2009-12-27" title="">
<body>
*1261847868*[日記]OracleMasterBronze 11g SQL基礎I(1Z0-051)を受験したよ
　11gのSQL基礎受験してきました。

　問題は55問で正答率60％以上で合格。解いてる内に（あーなんかダメだなー……16000円がー）とか思いながら全問解答したのですが、なんと正答率61％で合格でした。うはー。

　とりわけ目を引いた問題が、

&gt;|sql|
　こんな値が欲しいために、下記のSQL文を実行した。
　SELECT 列列, 列列 FROM テーブル WHERE なんたらかんたら

　結果を選べ。

　1.SQL文は実行され期待通りの結果が得られる。
　2.SQL文は実行されるが期待通りの結果は得られない。
　3.○○のためエラーが起こる。
　4.△△のためエラーが起こる。
||&lt;

　こんな感じの問題。この形式がすごく多かった印象。――って、インプレスジャパンの問題集(黒本？)にこんなんあったっけか！？　もう見るのも嫌だから見返さないけど、なかったような気がするぞ……。

　DBAも受けないといけないけど、インプレスジャパンの本は買わないようにしよう……。

　結局この本から得たものは何もない気がする。だから資格取得の勉強ってモチベーションあがんないんだよなーまだ一つも資格持ってないけど。

　テンションあがる資格取得の勉強の仕方ってないもんかな。

</body>
<comments>
<comment>
<username>gishi_yama</username>
<body>おー。合格おめでとー。</body>
<timestamp>1261958189</timestamp>
</comment>
<comment>
<username>kk_Ataka</username>
<body>もういっこ取らないと青銅聖闘士になれないんですよ。</body>
<timestamp>1264179566</timestamp>
</comment>
</comments>
</day>
<day date="2010-01-23" title="">
<body>
*1264179525*[java-ja][イベント]java-ja勉強会に参加しました

　今回のテーマはJOJO！　参考URL→[http://www.google.co.jp/search?q=java+jojo&amp;lr=lang_ja&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:ja-JP-mac:official&amp;client=firefox-a:title]

**僕のJOJO予備知識
-なんかジョジョっぽいアスキーアートは見た事がある
-人名とか用語とか断片的に知ってる
-FF6のやりこみ用語にバイツァ・ダストとキング・クリムゾンがある
-エシディシは悟空の太陽拳で一撃((ファミコンジャンプ的な意味で))

　初心者少なすぎです＞＜

　昔から読むきっかけが欲しくて……これでもう明日から読めます。むしろ読みたくてたまらない＞＜　とりあえず実家からジョジョ全巻持ってきている剛の者を少なくとも二人知っているので手配しようっと。

**三行でおさらいする今日の勉強会
-人間讃歌
-未来への遺産
-才能と技術と成長の緊張関係
</body>
</day>
<day date="2010-08-11" title="">
<body>
*1281453866*[Java][イベント]JVM勉強会に行ってきました
ふむ、jojo勉強会以来…？　あれ、java-ja温泉の事って書いてなかったっけか。書いてなかったのか……。

というわけで行ってまいりましたJVM勉強会。
VMの中の人まで意識した設計をしたことがなく、ClassLoaderをサンプルでちょこちょこって動かした程度のレベルですが。

**参考資料

とりあえず、会場で持ってる人が割といた、もしくは発表内で話題にあがった本など。

-Java仮想マシン仕様
-ガベージコレクションのアルゴリズムと実装
-デコンパイリングJava

この辺りを読んでくると、より内容を楽しめた模様。

**本編
-@ashigeruさん クラスローダについて
--クラスローダはfindClass()をオーバライドする
--loadClass()を実行すると委譲先クラスを探しにいく。親から見ていって、なかったら自分でロード
---親から見ていくので、親が古いライブラリを持っているとそれをロードしてしまう！
--某アプリケーションサーバは親を最後に検索する = PARENT_LAST
---その名のとおり自分のクラスローダを最初に検索するので、親のライブラリの影響を受けにくい
--同じ名前のクラスでも定義ローダーが違えば別のもの。Class.getClassLoader()でどこから呼ばれたか確認できる。
--PARENT_LASTの問題点としてドッペルゲンガーという現象。などなど……

-@skrbさん Stack on JavaVM
--JVMとスタックについて
--スタックを使用した逆ポーランド法のアニメーション（わかりやすい！）
--JVMはスタック
--スタックはThreadひとつにつきひとつ
---中にはプログラムカウンタがひとつ
---フレームの中にはローカル変数とオペランドスタック
--JVMの中ではBooleanはIntとして扱われている
--インスタンスはヒープにアロケーションされる
--スタックは二段構え（JavaStackとオペランドスタック）

-@kmizuさん わかる！Javaバイトコード－30分でわからない？Javaバイトコード入門
--Hello Worldの逆アセンブル
--byte,short,char,boolean -&gt; すべてintとして扱われる
--ロード/ストア命令…定数をオペランドスタックにロードする命令
--ロード/ストア命令2…ローカル変数の値をオペランドスタックにロードする命令
--型変換命令…キャストなどint -&gt;longなど
--配列関係の命令
--オブジェクトの生成・操作命令
--モニタ命令
--クラスファイルベリファイア
---classファイルのフォーマットがJava仮想マシン仕様に従っているかどうかを該当クラスの初期化より前にチェックする。未初期化ローカル変数へのアクセス、型エラー、jasmin……この辺よくわかりませんした＞＜

-@cactusmanさん GCについて
--GC
---ルートを起点として参照できるオブジェクトは生きている
---ルートに到達できないものがGCされる
--GCを学ぶ意義としてメモリ領域の効率的な使い方を意識できる
--マーク＆スイープ
---ルートオブジェクトからたどれるオブジェクトをマークしていく
---マークのないオブジェクトを回収
---メリット：実装は簡単
---デメリット：フラグメンテーション、アロケーション速度、停止時間が長い→マークしている期間
--参照カウント
---自信のオブジェクトが参照されているオブジェクトをカウント
---0になった時点でGC
---メリット：参照が停止されたタイミングで開放、停止時間が短い、参照をたどる必要がない
---デメリット：循環参照を回収できない、カウンターの値の増減処理が重い、実装が難しい
--コピー
---メリット：スループットがいい、メモリ回収と同時にコンパクションを行える(フラグメンテーションが起きない)
---デメリット：ヒープ領域を余分に取る
--GCの種類 ScavengeGC - コピーGC

-@nekopさん クラスローダリークパターン なにそれおいしいの？
--ThreadLocalで設定した値はThreadから強参照される
--java.util.loggingのLevelを継承でリーク
--既製ライブラリ　commons-logging

-日本オラクルたてのさん なれる！CL 5分間で分かる？ (OC4J)クラスローダ入門
--OC4Jのおはなし。
--人間クラスローダ養成講座 &lt;- なにこれすごい受けたい！
--クラスローダは親子モデル、親からロードし子は最後。
--基本は1JavaVM1アプリ1ライフサイクルなのだが、現在は多くのアプリ・多くのライブラリが乗っているので、依存やバージョン競合が起こりそう。
--親子関係では足りなくなるのでloadClassの上書きという修羅の道を通った人もいる。
--ポリシーを組み合わせる -&gt; テンプレートで設定。
--OC4JはWebLogicServerへ…そして伝説へ…

GCの仕組みなど普段は中の人にやってもらっていたところが、どんな仕組みになっていたのかなんとなくイメージできたかな…。
@skrbさんの逆ポーランド方を図示したスライドは超わかりやすかった！　逆ポーランドとスタックは絡めて説明すると感覚的にすごく頭に入ってきやすいと思いました。

最後に、主催者の@yuroyoroさん、二次会を取りまとめてくださった@yamashiroさん、会場を提供してくださった日本Oracle社さんに感謝。

**最後の最後に
Hello Worldをjavapしてみましょう。
&gt;|java|
public class HelloClassLoader {
        public static void main(String args[]) {
                System.out.println(&quot;HelloWorld !!&quot;);
        }
}
||&lt;
&gt;||
MacBook:java kk_Ataka$ javap -c HelloClassLoader
Compiled from &quot;HelloClassLoader.java&quot;
public class HelloClassLoader extends java.lang.Object{
public HelloClassLoader();
  Code:
   0:	aload_0
   1:	invokespecial	#1; //Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V
   4:	return

public static void main(java.lang.String[]);
  Code:
   0:	getstatic	#2; //Field java/lang/System.out:Ljava/io/PrintStream;
   3:	ldc	#3; //String HelloWorld !!
   5:	invokevirtual	#4; //Method java/io/PrintStream.println:(Ljava/lang/String;)V
   8:	return

}
||&lt;

</body>
</day>
<day date="2010-11-13" title="">
<body>
*1289639385*[イベント]Hudson勉強会に行ってきました
Hudson勉強会に行ってきました。名前は聞いたことがありますが、今まで使ってなかったのできっかけになればと思って。

参考:[http://wiki.hudson-ci.org/pages/viewpage.action?pageId=46336352:title]

**Hudson初心者向けデモ

@[http://twitter.com/cactusman:title=cactusman]さん

***Hudsonって何ができるの
+スケジューリング
+SCMからチェックアウト
+ビルドスクリプトの実行、結果のまとめ、通知
などできる！

***起動・操作
-起動は超簡単 「java -jar hudson.war」で一発 &gt; 導入する敷居がグッとさげられる！？　ほぼGUIから操作できるのも便利！
-Javaのパスなどを入力し、ビルドを実行するだけ
-スケジューリングはcronと同じように設定できる &gt; 毎分実行されるなど

**Hudsonプロジェクトの現状と将来

@[http://twitter.com/kohsukekawa:title=kohsukekawa]さん

-rpm/debもあるよ
-インストール後の設定はGUI &gt; 便利！

***Hudsonをおすすめできる理由
-拡張性の高さ！ = Eclipse使われているのと同じ理由
-Java以外の多言語でも利用されてる &gt; Python, Rubyも
-他の競合ツールに比べて利用者が増加し続けている

***日本Hudsonユーザ会発足！
-[http://build-shokunin.org]
-メーリスもあるよ 
-定期的に勉強会するよ

***今後の展望
-面白い拡張ポイントの実装 &gt; プラグインの作者が面白いように
-プラグインも拡張ポイントを実装すべき！ &gt; 現状メッセンジャープラグインがたくさん &gt; しかし、プラグインごとに実装はバラバラ… &gt; メッセンジャー共通部分を作るとか！
-分散ユニットテストなど計算機資源を豪勢に使う
-ビルド環境を柔軟に
-JRuby, Jythonなどでプラグイン開発ができるように
などなど……

**Hudson活用事例

@[http://twitter.com/magnet88jp:title=magnet88jp]さん

どのようにHudsonを活用しているか。実運用からのお話。

***リリースが月に一度！
-自動化テストの効率化がマスト！

***テストケースの構成
-Selenium IDE
-Selenium AES(あまり使っていない)
-JMeter
-Subversion
-Hudson

***実運用で…
-ダッシュボード機能 &gt; 失敗したジョブだけ表示、自分のジョブだけ表示など
-繰り返しテストしやすいジョブ構成
-Hudsonのおかけでかかる時間が18時間から30分くらいに

**Ruby on Rails on Hudsonの活用事例

@[http://twitter.com/kirika_k2:title=kirika_k2]さん

***Ruby on RailsでHudson
-デイリービルドによる日々の成果物チェック &gt; Railsでは実行環境によって動かなくなったりする
-テスト時間を省力化できる
-テストコードを書くモチベーションが上がる
-HudsonでRailsアプリをRPMに変換してRPMのインストールでデプロイ！

***コンセプト
-同じ環境が作れる
-動作確認ができる
-人手を減らせる

***実運用で…
-古いビルドの破棄
-ソースコード管理システムはSubversion
-ビルドトリガ &gt; 毎日5時
-Version NumberPlugin &gt; rpmに日付を入れることができる &gt; モジュール管理に

***注意点
-マシンスペック重要！
-トラブルが発生したときはSSHを使うことが多い

***Hudsonを入れると色々捗る！

**Redmine + Hudson の連携について

@[http://twitter.com/haru_iida:title=haru_iida]さん

***開発ツール三種の神器
-BTS
-リポジトリ
-CIサーバ

BTSとCIサーバがつながりが疎なのでそこを強化する！

***Redmine &gt; Hudson
-Redmine上にHudsonのポータルを表示
-チケットとビルドを関連付け

***Hudson &gt; Redmine
-プラグインあるよ！
-失敗時にHudsonが発行するメールでRedmineにチケット登録ができる！

***プラグインつくろう！

**エルシャダイで学ぶ、大丈夫な「ビルド通知」

@[http://twitter.com/ikikko:title=ikikko]さん

-笑いすぎてメモ取るのほとんど忘れたｗ
-一番いいビルド通知を頼む &gt; XFD(eXtreamFeedbackDevice)を使う！ &gt; ナバズタグでいろいろと
--ナバズタグ参考:[http://robot.watch.impress.co.jp/docs/news/20090427_164003.html]
--会場ではナバズタグが動かなかったので残念…

**Hudsonを用いて適当に？テストする方法の紹介

@[http://twitter.com/wyukawa:title=wyukawa]さん

***メンテナンス大変… &gt; なんで？
-テストの粒度が細かい
-失敗時の切り分けに時間がかかる

***適当なテスト(スモークテスト)
-assertなし
-適当なので仕様変更に強い
-そのレベルで失敗したら明らかにバグ
-ただし、古いDBを使っていると成功してしまう &gt; 継続的データベースインテグレーションを行う！

スモークテストの語源は、何かマシンをテストするときにスイッチオン &gt; 煙モクモク &gt; もうその時点でそれ以降のテストしてる場合じゃないでしょ？　って事らしい。

***とりあえず、適当なテストだけでも自動化してみては？

**モテるHudsonエンジニア

@[http://twitter.com/kiy0taka:title=kiy0taka]さん

***どうすればHudsonでモテるか
-GUIではなくCUI
--TerminalPlugin作りました
--killで自殺するデモ
-説明欄にjavascriptも書けるので……合コン

**日本語化のススメ

@[http://twitter.com/itouakihiro:title=itouakihiro]さん

***プラグインの翻訳
-現在374個あるプラグインのうち、日本語化されているのはたったの34個…
-みんなで翻訳しよう！　翻訳したらモテる！

**最後に、なぜ「Hudson」なの？
-Hudsonには今まで人間がやった事をやってもらう &gt; チームの仲間と思っている &gt; それなら他人を助ける人の名前がいいな &gt; 執事(Hudson)からとろう！

**というわけで
第一回目という事でかなり敷居が低く参加しやすい割に、なかなか濃い2時間でした。会場を提供してくださった法政大学さん。川口さん、cactusmanさん、発表者の皆さん、受付や案内をして下さった皆さんにありがとうございました！！　

そして、Hudson使ってみたくなったので、これアップしたらHudson入れてみます！

**Hudson関係ないけど
懇親会で id:t_yano さんにお会いしました。来月念願の&lt;del datetime=&quot;2010-11-13T18:13:58+09:00&quot;&gt;アイスソード&lt;/del&gt;第3回Wicket勉強会が開催されるようです。「詳しくはブログで！」との事だったのでブログをチェック！　僕もチェックします！
</body>
</day>
<day date="2010-11-21" title="">
<body>
*1290271210*[Ruby][Twitter][API]RubyでTwitterのOAuth認証をしてみる
随分前にTwitterがベーシック認証からOAuth認証に切り替えたという事で。Java+Wicket+AppEngineでベーシック認証を駆使して作っていたTwitterサイトが見れなくなったもんで切り替えました。([http://gihyo.jp/dev/feature/01/wicket:title] を見つつ)

一応出来たんですが、結局のところOAuthがどうなってるのかよくわからなかった……ので、ちょっと一から書いてみようと。

id:Yoshiori さんの[http://d.hatena.ne.jp/Yoshiori/20100929/1285727199:title] と、 id:yuroyoro さんの[http://d.hatena.ne.jp/yuroyoro/20100506/1273137673:title]がとっても詳しかったので、参考にしました。

大きな流れとしては、

+ consumer_keyとconsumer_secretを発行してもらう
+ リクエストトークンを発行してもらう
+ アクセストークンを発行してもらう

の3項目。今回はリクエストトークンを発行してもらうところまでやります。

**準備 Twitterにアプリを登録し、consumer_keyとconsumer_secretを発行してもらう

- Twitterにログイン &gt; 設定 &gt; 連携アプリ を選択

[f:id:kk_Ataka:20101120225746p:image]

- 開発者の方へ &gt; こちら を選択

[f:id:kk_Ataka:20101120230042p:image]

- ページ下部の新しいアプリケーションを追加 を選択

[f:id:kk_Ataka:20101120230314p:image]

後で編集もできるのでとりあえず入力しておく。下記の2項目はとりあえず

-- アプリケーションの種類: クライアントアプリケーション
-- 標準のアクセスタイプ: Read &amp; Write

にしておく。

- 登録したら、consumer_keyとconsumer_secretをもらえるので控えておく

[f:id:kk_Ataka:20101120232314p:image]

フォローをリクエストしました。のURL、Access token URL、Authorize URLは認証時に使うのでこれも控えておく。

**リクエストトークンを発行してもらう

こっからRuby。以下のパラメータを生成してhttp://twitter.com/oauth/request_tokenに送ります。POSTでもGETでもよいみたいなので、今回はGETを使ってURLのおしりにくっつけて送ります。

|*oauth_consumer_key|Twitterからもらったconsumer_key|
|*oauth_nonce|一意な値(にする必要があるが、とりあえず適当でもよいみたい)|
|*oauth_signature|認証するための暗号|
|*oauth_signature_method|認証方式(色々あるようだが、Twitterでは&quot;HMAC-SHA1&quot;固定)|
|*oauth_timestamp|今のタイムスタンプ(ミリ秒)|
|*oauth_version|バージョン(必須ではないが、付ける場合は&quot;1.0&quot;)|

consumer_key, nonce, signature_method, timestamp, versionの生成は難しくないのですが、問題はsignature。signature生成は大きく3つの流れを踏む事になります。

- 認証用の値を生成する(以下の3つの値を&amp;で連結する←この&amp;は&lt;span style=&quot;font-weight:bold;&quot;&gt;エスケープしない&lt;/span&gt;)

++ http_methodの種類(&quot;GET&quot;か&quot;POST&quot;。今回は&quot;GET&quot;)
++ &quot;http://twitter.com/oauth/request_token&quot;をエスケープしたもの
++ 上記のパラメータから&lt;span style=&quot;font-weight:bold;&quot;&gt;oauth_signatureを抜かしたパラメータ&lt;/span&gt;を&lt;span style=&quot;font-weight:bold;&quot;&gt;アルファベット順&lt;/span&gt;に並べて&lt;span style=&quot;font-weight:bold;&quot;&gt;xxx=yyy&amp;vvv=zzz……&lt;/span&gt;の形で連結した値を&lt;span style=&quot;font-weight:bold;&quot;&gt;エスケープしたもの&lt;/span&gt;

- 署名キーを生成する

++ リクエストトークンを発行してもらうときは&lt;span style=&quot;font-weight:bold;&quot;&gt;&quot;consumer_secret&amp;&quot;&lt;/span&gt;(consumer_secretのおしりに&amp;を連結する)

- キーを元に値をHMAC-SHA1方式で暗号化した値をbase64形式でエンコードする

……認証に失敗したとき、どこのステップで間違ってるのかわからなかったので非常に苦労しました。幸いsignatureを生成してくれるページ [http://cgi.geocities.jp/ydevnet/techblog/sample/signature.html:title] があるので、ここで作成した値と同じ状況を作って比較しました。

|*OAuth type|2-legged OAuth|
|*URL|http://twitter.com/oauth/request_token|
|*parameters|なし|
|*consumer key|Twitterからもらったconsumer_key|
|*consumer secret|Twitterからもらったconsumer_secret|
|*version|1.0|
|*timestamp|nowを押して発行されたtimestampをソースに逆移植する|
|*nonce|randomを押して発行されたnonceをソースに逆移植する|
|*signature method|HMAC-SHA1固定|

これでsignして生成された値のうち、signature base stringが「認証用の値を生成する」で生成したかった値。signatureが「キーを元に値をHMAC-SHA1方式で暗号化した値をbase64形式でエンコードする」で生成したかった値となっている。あとはがんばる！

**ソースコード
コードはこんな感じで…かなり泥臭く実装；　基本的に上から下に流れていきますが文字列のエスケープとoauthパラメータの並べ替えと結合は何回か使うのでメソッドにしました。

&gt;|ruby|
require 'openssl'
require 'uri'
require 'net/http'

# 文字列のエスケープ(: / = %をエスケープする。. _ -はそのまま)
def escape(value)
	URI.escape(value, Regexp.new(&quot;[^a-zA-Z0-9._-]&quot;))
end

# oauth_headerの情報をアルファベット順に並べ替え &amp; で結合
def sort_and_concat(oauth_header)
	oauth_header_array = oauth_header.sort
	param = &quot;&quot;
	oauth_header_array.each do |params|
		for i in 1..params.length
			param += params[i-1]
			if i % params.length == 0
				param += &quot;&amp;&quot;
			else
				param += &quot;=&quot;
			end
		end
	end
	param = param.slice(0, param.length-1)
end

# リクエストトークン取得用のURL
request_token_url = &quot;http://twitter.com/oauth/request_token&quot;

# Twitterで登録したらもらえる
consumer_key = &quot;XXXXXXXXXXXXXXXXXXXXXX&quot;
consumer_secret = &quot;YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY&quot;

# oauthパラメータたち
oauth_header = {
	# Consumer Key
	&quot;oauth_consumer_key&quot; =&gt; consumer_key,
	# 一意な値(今回は適当に実装)
	&quot;oauth_nonce&quot; =&gt; &quot;AAAAAAAA&quot;,
	# 署名方式(HMAC-SHA1)
	&quot;oauth_signature_method&quot; =&gt; &quot;HMAC-SHA1&quot;,
	# リクエスト生成時のタイムスタンプ(ミリ秒)
	&quot;oauth_timestamp&quot; =&gt; Time.now.to_i.to_s,
	# バージョン(1.0)
	&quot;oauth_version&quot; =&gt; &quot;1.0&quot;,
}

# signature作成
# oauth_headerのパラメータをソートして連結
param = sort_and_concat(oauth_header)

# メソッドとURLとパラメータを&amp;で連結する
value = &quot;GET&quot; + &quot;&amp;&quot; + escape(request_token_url) + &quot;&amp;&quot; + escape(param)

# sigunature_keyの作成
# リクエストトークン時は&quot;CONSUMER_SECRET&amp;&quot;(アンドが入っている)
signature_key = consumer_secret + &quot;&amp;&quot;

# hmac_sha1
sha1 = OpenSSL::HMAC.digest(OpenSSL::Digest::SHA1.new, signature_key, value)
# base64エンコード signatureを生成できたので、これをoauth_signatureとする
oauth_header[&quot;oauth_signature&quot;] = [sha1].pack('m').gsub(/\n/, '')

# GETする
uri = URI.parse(request_token_url)
proxy_class = Net::HTTP::Proxy(ARGV[0], 8080)
http = proxy_class.new(uri.host)
http.start do |http|
	# oauth_headerのパラメータをソートして連結
	param = sort_and_concat(oauth_header)

	res = http.get(uri.path + &quot;?#{param}&quot;)

	if res.code == &quot;200&quot; then
		print &quot;#{res.code}\n&quot;
		print &quot;#{res.body}\n&quot;
	else
		print &quot;ERROR: #{res.code}\n&quot;
	end
end
||&lt;

結果はこんな感じで。

[f:id:kk_Ataka:20101121013615p:image]

成功するとbodyにoauth_token, oauth_token_secret他がくっついた値が帰ってきます。次はこれを使ってアクセストークンをもらいます！

まだRubyも知らない事多すぎる！

</body>
<comments>
<comment>
<username>moridai</username>
<body>oauthの勉強の参考になりました。&lt;br&gt;ちなみに &quot;sort_and_concat&quot; の関数の中は&lt;br&gt;oauth_header.sort.map{|i|i.join(&quot;=&quot;)}.join(&quot;&amp;&quot;)&lt;br&gt;と書くとすっきりかけると思います（動くはず...</body>
<timestamp>1297579290</timestamp>
</comment>
<comment>
<username>kk_Ataka</username>
<body>おお、ありがとうございます！&lt;br&gt;mapちょっと試してみます！</body>
<timestamp>1299062371</timestamp>
</comment>
</comments>
</day>
<day date="2010-11-30" title="">
<body>
*1291125511*[Ruby][Twitter][API]RubyでTwitterのOAuth認証をしてみる その2

[http://d.hatena.ne.jp/kk_Ataka/20101121/1290271210:title=前回のエントリ] では、リクエストトークンまで発行してもらえました。だもんで今回は前回に続いてアクセストークンを発行してもらいます。アクセストークン発行の流れとしては、

+今もらったリクエストトークンを付加して http://twitter.com/oauth/authorize へアクセスする
+画面に表示されるPINコード(oauth_verifier)を控える
+リクエストトークンとPINコードをを付加して http://twitter.com/oauth/access_token へアクセスする

行きます。

**PINコードを発行してもらう

リクエストトークンを発行してもらうと、 

&gt;||
oauth_token=XXXXXXXXXX&amp;oauth_token_secret=YYYYYYYYYYYYYYYYYYYYYYYYYYYY&amp;oauth_callback_confirmed=true
||&lt;

という文字列がbodyに埋まってきたはず。((この時のoauth_tokenとoauth_token_secretは一時的なものらしいので、アクセストークンがもらえれば忘れても良いようです。))

この中から oauth_tokenを抜き出し、 http://twitter.com/oauth/authorize にパラメータとしてくっつけます。こんな感じ。

http://twitter.com/oauth/authorize?oauth_token=XXXXXXXXXX

アドレスが正しければ、以下のような画面が出るはず。((Twitterにログインしていなければ、ログイン画面がまず出たはず。))アプリケーションからのアクセスを許可しますか？　と尋ねられるので許可するを選択。

[f:id:kk_Ataka:20101130220734j:image]

許可すると、PINコードが画面に表示されるのでこれを控えておく。

[f:id:kk_Ataka:20101130220731j:image]

**再度signatureを作成する

このPINコードを&quot;oauth_verify&quot;として。先ほどURLに貼っつけたoauth_tokenを&quot;oauth_token&quot;としてパラメータとして持たせます。

そして、ここでもう一度signatureを作成を作成します。注意点としては、

+今まで使っていたoauth_signatureは一旦消して、以下のパラメータで新たにつくり直す
++oauth_consumer_key
++oauth_nonce
++oauth_signature_method
++oauth_timestamp
++oauth_version
++oauth_token &lt;span style=&quot;color:#FF0000;&quot;&gt;New!&lt;/span&gt;
++oauth_verifier &lt;span style=&quot;color:#FF0000;&quot;&gt;New!&lt;/span&gt;
+URLは&quot;http://twitter.com/oauth/access_token&quot;をエスケープしたもの
+暗号化用のキーは&quot;consumer_secret&amp;oauth_token_secret&quot;((リクエストトークンを作るときは&quot;consumer_secret&amp;&quot;でした))

この3点でしょうか。
signatureが作成できたら、前回と同様にアルファベット順に並べて連結し、URLのおしりにくっつけます。URLはこんな感じになります。

[f:id:kk_Ataka:20101130223243j:image]

成功したら、oauth_token, oauth_token_secret,  user_id, screen_nameが返ってきます。これ俺や！！

[f:id:kk_Ataka:20101130220728j:image]

ここで返してもらったoauth_tokenとoauth_token_secretは本物なので大切にとっておく！　というわけで、次は自分のTimelineを取得します！

ソースはこんな感じ。

&gt;|ruby|
require 'openssl'
require 'uri'
require 'net/http'

# signature作成
def signature(method, consumer_secret, oauth_token_secret, url, oauth_header)
	# signature_keyの作成
	# リクエストトークン時は&quot;CONSUMER_SECRET&amp;&quot;(アンドが入っている)
	# アクセストークン時は&quot;CONSUMER_SECRET&amp;OAUTH_TOKEN_SECRET&quot;として使用
	signature_key = consumer_secret + &quot;&amp;&quot;
	if !oauth_token_secret.nil? then
		signature_key += oauth_token_secret
	end

	# oauth_headerのパラメータをソートして連結
	param = sort_and_concat(oauth_header)

	# httpメソッドとURLとパラメータを&amp;で連結する
	value = method + &quot;&amp;&quot; + escape(url) + &quot;&amp;&quot; + escape(param)
	# hmac_sha1
	sha1 = OpenSSL::HMAC.digest(OpenSSL::Digest::SHA1.new, signature_key, value)
	# base64
	base64 = [sha1].pack('m').gsub(/\n/, '')
	return base64
end

# 文字列のエスケープ(: / = %をエスケープする。. _ -はそのまま)
def escape(value)
	URI.escape(value, Regexp.new(&quot;[^a-zA-Z0-9._-]&quot;))
end

# oauth_headerの情報をアルファベット順に並べ替え &amp; で結合
def sort_and_concat(oauth_header)
	oauth_header_array = oauth_header.sort
	param = &quot;&quot;
	oauth_header_array.each do |params|
		for i in 1..params.length
			param += params[i-1]
			if i % params.length == 0
				param += &quot;&amp;&quot;
			else
				param += &quot;=&quot;
			end
		end
	end
	param = param.slice(0, param.length-1)
end

# リクエストトークン取得用のURL
request_token_url = &quot;http://twitter.com/oauth/request_token&quot;
# PINコード取得用URL
authorize_url = &quot;http://twitter.com/oauth/authorize&quot;
# アクセストークン取得用のURL
access_token_url = &quot;http://twitter.com/oauth/access_token&quot;

# Twitterで登録したらもらえる
consumer_key = &quot;XXXXXXXXXXXXXXXXXXXXX&quot;
consumer_secret = &quot;YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY&quot;

# Twitterからもらえるアクセストークン(最初は使わない)
oauth_token = &quot;&quot;
oauth_token_secret = &quot;&quot;

# oauthパラメータたち
oauth_header = {
	# Consumer Key
	&quot;oauth_consumer_key&quot; =&gt; consumer_key,
	# 一意な値(今回は適当に実装)
	&quot;oauth_nonce&quot; =&gt; &quot;AAAAAAAA&quot;,
	# 署名方式(HMAC-SHA1)
	&quot;oauth_signature_method&quot; =&gt; &quot;HMAC-SHA1&quot;,
	# リクエスト生成時のタイムスタンプ(ミリ秒)
	&quot;oauth_timestamp&quot; =&gt; Time.now.to_i.to_s,
	# バージョン(1.0)
	&quot;oauth_version&quot; =&gt; &quot;1.0&quot;,
}

# signature作成
oauth_header[&quot;oauth_signature&quot;] = signature(&quot;GET&quot;, 
					consumer_secret, 
					nil, 
					request_token_url, 
					oauth_header)

# GETする
uri = URI.parse(request_token_url)
proxy_class = Net::HTTP::Proxy(ARGV[0], 8080)
http = proxy_class.new(uri.host)
http.start do |http|
	# oauth_headerのパラメータをソートして連結
	param = sort_and_concat(oauth_header)

	res = http.get(uri.path + &quot;?#{param}&quot;)

	if res.code == &quot;200&quot; then
		# 返ってきた値を分割
		params = res.body.split(&quot;&amp;&quot;)
		params.each do |param|
			# さらに=で分割し前部分をkey、後方部分をvalueに格納
			key,value = param.split(&quot;=&quot;)

			# リクエストトークンを格納
			if (&quot;oauth_token&quot; == key) then
				oauth_token = value
			elsif (&quot;oauth_token_secret&quot; == key) then
				oauth_token_secret = value
			end
		end

		# プロンプトにPINコード取得用URL表示
		print &quot;#{authorize_url}?oauth_token=#{oauth_token}\n&quot;
		print &quot;Input PIN Code. Input...\n&quot;

		# PINコード入力待ち
		oauth_verifier = STDIN.gets
		# 改行コード(\n)取り除き
		oauth_verifier = oauth_verifier.slice(0, oauth_verifier.length-1)

		# ヘッダにアクセストークンとPINコード追加
		oauth_header[&quot;oauth_token&quot;] = oauth_token
		oauth_header[&quot;oauth_verifier&quot;] = oauth_verifier
		
		# いったんoauth_signature削除
		oauth_header.delete(&quot;oauth_signature&quot;)

		# 再びsignature作成
		oauth_header[&quot;oauth_signature&quot;] = signature(&quot;GET&quot;, 
							consumer_secret, 
							oauth_token_secret, 
							access_token_url, 
							oauth_header)

		# oauth_headerのパラメータをソートして連結
		param = sort_and_concat(oauth_header)

		# GETする
		uri = URI.parse(access_token_url)
		proxy_class = Net::HTTP::Proxy(ARGV[0], 8080)
		http = proxy_class.new(uri.host)
		http.start do |http|
			res = http.get(uri.path + &quot;?#{param}&quot;)
			if res.code ==&quot;200&quot; then
				print &quot;#{res.code}\n&quot;
				print &quot;#{res.body}\n&quot;
			else
				print &quot;ERROR: #{res.code}\n&quot;
			end
		end
	else
		print &quot;ERROR: #{res.code}\n&quot;
	end
end
||&lt;

処理の流れとしては、oauth_tokenを貼りつけたhttp://twitter.com/oauth/authorizeのアドレスを出力するので、(お手数ですが)ブラウザからアクセスしてもらう。

[f:id:kk_Ataka:20101130220736j:image]

ブラウザに表示されたPINコードを貼っつけてもらって、これをoauth_verifierとし、アクセストークンを発行してもらう。

[f:id:kk_Ataka:20101130220728j:image]

PINコードの所はいちいちブラウザから行かないようにすることもできそうなんですが……。

</body>
</day>
<day date="2010-12-07" title="">
<body>
*1291733295*[Ruby][Twitter][API]RubyでTwitterのタイムラインを取得してみる
**前回までのあらすじ
+[http://d.hatena.ne.jp/kk_Ataka/20101121/1290271210:title]
+[http://d.hatena.ne.jp/kk_Ataka/20101130/1291125511:title]

前回までで、なんとかOAuth認証を突破する事ができました。目標は達成できたっちゃあできたんですが……せっかくなので、取得したアクセストークンを使ってTwitterからタイムラインを取得してみます！

**タイムラインの取得方法
+signatureを作成する
+以下のパラメータをアルファベット順にxxx=yyy&amp;vvv=zzz……の形で連結した値を[http://api.twitter.com/1/statuses/home_timeline.json]のおしりにくっつけてGET or POST
++oauth_consumer_key
++oauth_nonce
++oauth_signature
++oauth_signature_method
++oauth_timestamp
++oauth_token
++oauth_version

取得はこれで完了。

signatureの作成方法は今までと同じで、

+認証用の値を生成する(以下の3つの値を&amp;で連結する)
++&quot;GET&quot;
++&quot;[http://api.twitter.com/1/statuses/home_timeline.json]&quot;をエスケープしたもの
++oauth_signature以外のパラメータ((oauth_consumer_key, oauth_nonce, oauth_signature_method, oauth_timestamp, oauth_token, oauth_versionの6個っすねー。oauth_tokenを忘れずに。))をアルファベット順に並べてxxx=yyy&amp;vvv=zzz……の形で連結した値をエスケープしたもの
+署名キーを生成する
++&quot;consumer_secret&amp;oauth_token_secret&quot;
+キーを元に値をHMAC-SHA1方式で暗号化した値をbase64形式でエンコードする

です。OAuth認証して獲得したアクセストークン、oauth_tokenとoauth_token_secretを随所で使います。そして作成したsignatureと他のパラメータを[http://api.twitter.com/1/statuses/home_timeline.json]のおしりにくっつけて(今回は)GETリクエスト。

**戻ってきたタイムライン

タイムラインらしきものはjsonという形式のデータで戻って来ます。home_timeline.jsonのjson部分をxmlとかrssに変えるとxml形式のタイムライン、rss形式のタイムラインが返ってくるようですが今回はこのjsonを何とかしてみます。

jsonの詳細は後にググるとして、一人当たりの情報はこんな感じ。((本来は一行で取得します))

&gt;|json|
.......},{
	\&quot;coordinates\&quot;:null,
	\&quot;created_at\&quot;:\&quot;Tue Dec 07 13:50:49 +0000 2010\&quot;,
.
(略)
.
	\&quot;in_reply_to_screen_name\&quot;:null,
	\&quot;in_reply_to_status_id_str\&quot;:null,
	\&quot;id_str\&quot;:\&quot;99999999999999999\&quot;,
	\&quot;contributors\&quot;:null,
	\&quot;retweet_count\&quot;:null,
	\&quot;in_reply_to_user_id\&quot;:null,
	\&quot;in_reply_to_user_id_str\&quot;:null,
	\&quot;user\&quot;:{
.
(略)
.
		\&quot;screen_name\&quot;:\&quot;kk_Ataka\&quot;,
		\&quot;profile_sidebar_border_color\&quot;:\&quot;C0DEED\&quot;,
		\&quot;follow_request_sent\&quot;:false,
		\&quot;location\&quot;:\&quot;Kawasaki, Kanagawa, Japan\&quot;,
.
(略)
.
		\&quot;profile_link_color\&quot;:\&quot;0084B4\&quot;},
	\&quot;geo\&quot;:null,
	\&quot;retweeted\&quot;:false,
	\&quot;id\&quot;:99999999999999999,
	\&quot;text\&quot;:\&quot;test\&quot;
},{......
||&lt;

初見だとこれ×20件のデータが改行なしでずらりと画面に並ぶので、面食らったのですが、よく見てみると見覚えがあるデータもちらほら……。

例えば、userの中にあるscreen_nameはkk_Ataka……これ俺や！　あとは、text:testも、testってツイートした後だったので、ツイート内容なのかなと。

リプライしたときはin_reply_to系のキーにリプライ相手のidやscreen_nameが入っていると思います。

んで、このデータをどうやって解析しようか……と思ってググってみると、jsonをparseしてハッシュにしてくれるプログラムが。@webos_goodiesさんの[http://webos-goodies.jp/archives/51071565.html:title]このプログラムをありがたく使わせていただきました。

ソースはこんな感じ。上記のparserは下記のrbファイルと同じディレクトリ、もしくはパスの通っている場所にsimplejsonparser.rbとして配備しました。

&gt;|ruby|
require 'openssl'
require 'uri'
require 'net/http'
# http://webos-goodies.jp/archives/51071565.html
require 'simplejsonparser'
require 'nkf'
require 'time'

# signature作成
def signature(method, consumer_secret, oauth_token_secret, url, oauth_header)
	# signature_keyの作成
	# リクエストトークン時は&quot;CONSUMER_SECRET&amp;&quot;(アンドが入っている)
	# アクセストークン時は&quot;CONSUMER_SECRET&amp;OAUTH_TOKEN_SECRET&quot;として使用
	signature_key = consumer_secret + &quot;&amp;&quot;
	if !oauth_token_secret.nil? then
		signature_key += oauth_token_secret
	end

	# oauth_headerのパラメータをソートして連結
	param = sort_and_concat(oauth_header)

	# httpメソッドとURLとパラメータを&amp;で連結する
	value = method + &quot;&amp;&quot; + escape(url) + &quot;&amp;&quot; + escape(param)
	# hmac_sha1
	sha1 = OpenSSL::HMAC.digest(OpenSSL::Digest::SHA1.new, signature_key, value)
	# base64
	base64 = [sha1].pack('m').gsub(/\n/, '')
	return base64
end

# 文字列のエスケープ(: / = %をエスケープする。. _ -はそのまま)
def escape(value)
	URI.escape(value, Regexp.new(&quot;[^a-zA-Z0-9._-]&quot;))
end

# oauth_headerの情報をアルファベット順に並べ替え &amp; で結合
def sort_and_concat(oauth_header)
	oauth_header_array = oauth_header.sort
	param = &quot;&quot;
	oauth_header_array.each do |params|
		for i in 1..params.length
			param += params[i-1]
			if i % params.length == 0
				param += &quot;&amp;&quot;
			else
				param += &quot;=&quot;
			end
		end
	end
	param = param.slice(0, param.length-1)
end

# 自分のタイムライン取得用のURL
home_timeline_url = &quot;http://api.twitter.com/1/statuses/home_timeline.json&quot;

# Twitterで登録したらもらえる
consumer_key = &quot;XXXXXXXXXXXXXXXXXXX&quot;
consumer_secret = &quot;YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY&quot;

# Twitterからもらえるアクセストークン
oauth_token = &quot;11111111-ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ&quot;
oauth_token_secret = &quot;VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV&quot;

# oauthパラメータたち
oauth_header = {
	# Consumer Key
	&quot;oauth_consumer_key&quot; =&gt; consumer_key,
	# 一意な値(今回は適当に実装)
	&quot;oauth_nonce&quot; =&gt; &quot;AAAAAAAA&quot;,
	# 署名方式(HMAC-SHA1)
	&quot;oauth_signature_method&quot; =&gt; &quot;HMAC-SHA1&quot;,
	# リクエスト生成時のタイムスタンプ(ミリ秒)
	&quot;oauth_timestamp&quot; =&gt; Time.now.to_i.to_s,
	# バージョン(1.0)
	&quot;oauth_version&quot; =&gt; &quot;1.0&quot;,

	# アクセストークン
	&quot;oauth_token&quot; =&gt; oauth_token 
}

# signature作成
oauth_header[&quot;oauth_signature&quot;] = signature(&quot;GET&quot;, 
					consumer_secret, 
					oauth_token_secret, 
					home_timeline_url, 
					oauth_header)

# GETする
uri = URI.parse(home_timeline_url)
proxy_class = Net::HTTP::Proxy(ARGV[0], 8080)
http = proxy_class.new(uri.host)
http.start do |http|
	# oauth_headerのパラメータをソートして連結
	param = sort_and_concat(oauth_header)
	
	res = http.get(uri.path + &quot;?#{param}&quot;)
	if res.code == &quot;200&quot; then
		json = res.body
		# simplejsonparserでparseしてもらう
		jsonparse = JsonParser.new.parse(json)

		# 逆順にして古い物から取得する
		jsonparse = jsonparse.reverse

		for i in 0..jsonparse.length-1

			# 日付フォーマットを年/月/日 時間に変更
			time = Time.parse(jsonparse[i][&quot;created_at&quot;]).strftime(&quot;%Y/%m/%d %X&quot;)

			# SJIS変換(コマンドプロンプトで見る用)
			# print NKF.nkf('-s', &quot;■#{jsonparse[i][&quot;user&quot;][&quot;screen_name&quot;]} (#{jsonparse[i][&quot;user&quot;][&quot;name&quot;]}) #{time}\n　#{jsonparse[i][&quot;text&quot;]}\n&quot;)
			print &quot;■#{jsonparse[i][&quot;user&quot;][&quot;screen_name&quot;]} (#{jsonparse[i][&quot;user&quot;][&quot;name&quot;]}) #{time}\n　#{jsonparse[i][&quot;text&quot;]}\n&quot;
		end
	else
		print &quot;#{res.code}\n&quot;
	end
end
||&lt;

結果はこう。タイムラインゲットー！
[f:id:kk_Ataka:20101207233454j:image]

**Windows用……
ソースの最後、parseも終わってその中からほしいキーの値を取り出してるところで。

&gt;|ruby|
			# SJIS変換(コマンドプロンプトで見る用)
			# print NKF.nkf('-s', &quot;■#{jsonparse[i][&quot;user&quot;][&quot;screen_name&quot;]} (#{jsonparse[i][&quot;user&quot;][&quot;name&quot;]}) #{time}\n　#{jsonparse[i][&quot;text&quot;]}\n&quot;)
||&lt;

SJIS変換してるところがあるんですが、これ、もともとWindowsのコマンドプロンプトで動かしたくて作っていたものなんです。でもコマンドプロンプトって文字コードがSJISのようでそのまま表示すると文字化け起こすのでこういう対応を。

一応軽くググった感じだと、コマンドプロンプトでもUnicode文字を読めるようなのですが……。

</body>
</day>
<day date="2010-12-11" title="">
<body>
*1292077752*[java-ja][イベント]java-ja忘年会に参加しました2010

**今年は渋谷。

定時までに終わるかなーと思っていたミーティングがまさかの2時間オーバー。そして人身事故によるりんかい線のダイヤ乱れ。北海道に着いたのは20:45くらいでした……。Tweetviteでは出席になっていたのに、会費は集計して足りなかったらでいいよ！　と言ってくれた名幹事やましろさん++　いつも取りまとめありがとうございます。

**二次会は部隊編成
そして場所を変えて二次会。ハンター組とハンターじゃない組に別れて二次会が開催されました。僕はハンターじゃない組。二次会では主に食べてました。　＠[http://twitter.com/Ewigkeit:title=Ewigkeit]さんにいっぱいサービスしてもらった＞＜

飯以外では、＠Ewigkeitさん、@[http://twitter.com/leather_sole:title=leather_sole]さん、@[http://twitter.com/kamekoopa:title=kamekoopa]さんとPHPの話、タバコの話((途中でタバコの試供品を配るお姉ちゃんがきてたからだと思う……。))、staticおじさんや相互フォロー推進委員会suspendされた話で盛り上がりました。社内でstaticおじさんとか相互フォロー推進委員会なんて単語出した事ないなー((おれは会社でなんの話をしているんだろう？))とか思いつつ……やっぱjava-jaいいわー。

イベントに出ると、会った人の顔とTwitter idとTwitterアイコンを一致させるのが難しいですよねーという話も。「あれ？　この人会ったことある……idなんだっけ？」「idはタイムラインで見たことあるなぁ……」等々……。難しいですよね……。

**終わりに

何とか滑り込みで2年連続2回目の出場をキメる事ができました…。来年も参加するぞ！　いや、その前に時間通りにイベントに参加できるようにだな…。

一次会幹事の@[http://twitter.com/yamashiro:title=yamashiro]さん、ハンターじゃない方の二次会を取りまとめてくださった@[http://twitter.com/meso:title=meso]さん、java-jaの皆様お疲れさまでした！

</body>
</day>
<day date="2010-12-21" title="">
<body>
*1292940870*[イベント]pixiv Tech Meetingに行ってきました
-詳細: [http://atnd.org/events/10866:title]

日頃からプレミアム会員として利用させていただいているシステムの裏側が見れる！　という事で、ATND見てから参加余裕でした。今回はなんとか時間通りに辿りつけました。一瞬GoogleMap先生が変な場所指すので迷子になったけど。

内容としては、次々にアップされる画像ファイルの捌き方や一番いいインフラの運用法、画面はjsを使用しているって事で、普段自分が触った事のない分野の話が大半。リファクタリング話やiPhoneSafariでのjsゲーム作成など、自分が普段使っている分野から近い話は頭に入ってきやすかったのですが、インフラの話などはわからない用語が出たら適宜ググってました；

以下メモ。


**VPとSPIDERを使ったMySQL運用 @kamipoさん - [http://www.slideshare.net/kamipo/vpspidermysql:title]
-VP+SPIDERでホスト間テーブル移動をやる
--VPはカラムごとにテーブルを垂直分割
--SPIDERはテーブルを複数ホストに水平分割

***VP
-vp_copy_tables()でaにあるテーブルの値をbにコピー出来る
-vp_copy_tables()はPRIMARY_KEYがないと使えない

***注意
-COMMENTは60文字までしか書けない -&gt; MySQL5.5なら大丈夫！
-MySQL5.0だと色々なクエリでエラーが起こるので、できるだけ最新版を使おう

***質問
-エクストラバックアップの方が早くね？
--用途が違う。これは止めずに移動できるのがいい


**pixiv.js -4年目のサービスをきれいにしよう @[http://twitter.com/#!/yksk:title=yksk]さん
-15億PV/月達成！　ソースを綺麗に

***現在は、Prototype.js + jQueryで走っている
-最終的にはjQueryに統一したい！
-$.noConflict(jQuery)を使えば、衝突することなくjQueryで行ける！

&gt;http://semooh.jp/jquery/api/core/jQuery.noConflict/_/&gt;
この関数を実行すると、$関数の動作が先に定義されている動作に戻る。
$関数はprototype.jsなどをはじめ、多くのライブラリがそれぞれ拡張している関数である。
jQueryでも、核となるjQueryオブジェクトのショートカットして極めて頻繁に利用される。
このコマンドは、そのような$関数を定義する複数のライブラリを用いた際に衝突することを防ぐものである。
&lt;&lt;

***名前空間をひとつに統一する
-windows.pixiv.*に統一すればかぶる可能性は無くなる

***html5を使う
-記述がちょっと減る
-scriptタグとか簡略化できる
-プレースホルダーなどのUIの新機能が使える
-data-*属性は要素に好きな名前をつけられるようになった

***1ページ1ファイル、ページごとに読むjsを変更するのが大変
-URLディスパッチャーで振り分ける

***LABjs
-非同期でスクリプトを読み込める、順番を指定できる
-他のファイルの読み込みをブロックしない
-Twitterでも使われている
-実は、Loadの仕組みは標準化されていないので、ブラウザが新しくなるたびチェックする必要がある
--将来的にはscript async/deferに移行するかも

***QUnit
-ブラウザを開けばテストできる、簡単！

***まとめ
-コアライブラリが2つあるのはまずいので1つに
-URLディスパッチャーとLABjsで高速化、ソースも綺麗
-QUnitでテスト！


**エログロOK!? JavaScriptとCanvasで作るiPhone向け勝手ゲーム開発 @[http://twitter.com/#!/Moyashipan:title=Moyashipan]さん
-もともとFLASHer
-jsでゲームが作れるよ！　というデモ
-実際にiPhoneを持っている人はiPhoneでデモページを見ながら話を聞く

***jsでiPhone向けゲームを作成するメリット
-アプリじゃないのでAppleの審査が不要
-他プラットフォームでも動かせる

***デメリット
-描画性能がとても貧弱
-画面固定ができない(iPhone自体で回転をロックしないとグルグルするゲームは厳しい)

***表示と移動はDOM、Canvas(html5)でできる
-Canvasで、FLASHのベジェ曲線同等

***描画がとても遅い…
-再描画範囲の固定
--背景、キャラ、エフェクトとレイヤを分ける
-縦に長いゲームにするとブラウザのスクロールを使える！(チョビのゲームのようにジャンプしていくヤツ)

***webkit transformで回転・移動

***まとめ
-iPhoneのブラウザゲームは素直につくるとすぐ重くなる
-再描画は最小範囲に


**pixivの画像アップロードシステム @cubicdaiyaさん - [http://www.slideshare.net/cubicdaiya/pixiv-6261780:title]
***従来のアップロードの問題
-サムネイル生成が同期的に処理される
--アクセスが集中するととても重くなった((確かにアップにものすごい時間がかかっていた時期があったような？))

***アップロードのフロー
-ファイル選択→※→情報入力→完了画面
--※でサムネを作っていた＝画面が切り替わるのを待たないといけないためユーザには遅く感じられる、というか実際遅かった
-アップロード時の上記3画面の中では、情報入力画面が一番開かれている時間が長い
--じゃあここで非同期でアップしよう！
-サムネイル生成の非同期化を行う事によって処理性能がアップした！


**pixivのリコメンデーションシステム @[http://twitter.com/#!/aopico:title=aopico]さん
-チームラボのロゴを書いた
-リコメンデーションシステム＝おすすめ機能の話

***おすすめ機能を作ったわけ
-古いイラストが埋もれる
-趣味・趣向が多様
-ロングテール

***協調フィルタリングとは
-以下のように5つのitemと4人のUserがいたとする。今回はAさんを基準にする
|　|item1|item2|item3|item4|item5|
|UserA|買|　|買|買|　|
|UserB|　|買|　|買|　|
|UserC|　|　|　|　|買|
|UserD|買|　|買|買|買|

++Aさんと似ているユーザを探す…Dさん
++CさんはAさんが買っているitem1, 3, 4の他にitem5を買っている
++ならば、Aさんも5を買うのではないか？　…という推論

-実際にAmazonで使われている
--Amazonのものは計算量が多い
--なるべくサーバに不可をかけたくない
---もっとシンプルにならないか？

***ブックマークタグ*ユーザ
-メカ好きのAopicoさんとエロス好きのAopicoさんは別と考える
-同じブックマークタグを付けているユーザの数をカウントする
-たくさんブックマークを付けている人は重みを下げる

***実装
-C++
-メモリは5G
-初回計算は12時間

***今後
-ユーザ間の類似度計算
-ブックマークされていないイラストの救済
-タグ揺れの解消


**私事……
今回の発表は、全員床に座りながら聞くというスタイルでした。なかなかベストな座り方を見つけられず、このあたりで持病の腰痛と激しいバトルを繰り広げ始めたため、メモの量が著しく落ち……(; _ _)


**SSD+Squidで画像をキャッシュしなイカ？ @phji]さん - [http://www.slideshare.net/phji/ssdsquidika:title]
***Squid
-proxyサーバ、キャッシュサーバ、イカ
-イカ娘、名前だけでも覚えて帰ってくださいねという感じ

***SSDの用途
-データベース
-画像参照のキャッシュ
--調査の結果、Sサイズの画像のリクエストが最も多かったので、SSDはまずSサイズ画像から

**6GbpsをさばくオレオレCDN構築術 @semindさん - [http://www.slideshare.net/semind/20101220-pixiv-techmeeting-6267332:title]
***画像にアクセスがくる
-画像を保存しているサーバだけでは捌けない

***CDN
-コンテンツの配信を代わりにやってくれるもの
-データセンタを借りて自分のCDNを

***今年の初夏にトラフィックが頭打ち
-構成なども限界だった

***なのでデータセンタを借りる事に…
-しかし、時間もないし経験者もいない

***詳しいことは懇親会で！


**PHPあるある話 @[http://twitter.com/#!/cocoitiban:title=cocoitiban]さん
-なにか一つでも発見があれば
***文化編
-マニュアルはとても充実している
-unset: nullへのキャストというものがある
-コーディング規約がたくさん
--PEARコーディング規約
--ZendFramework規約
--PEAR2コーディング規約

***コーディング編
-HttpClientは何を使うか…いっぱいある
--PEAR Http_Request
--PEAR2 Http_Request
--Zend Http_Request
--curl などなど

-REDHAD系ならRPMで構築するのがいい

-短時間にデプロイをたくさんしたらメモリがあふれた
--デプロイ時にApacheのメモリが倍になっている
--xcache？


**phjosh(仮)プロジェクト @moriyoshitさん - [http://www.slideshare.net/moriyoshi/phjosh:title]
***jsでオブジェクト指向…あまり美しくない
-既存言語から生成する

***GWT
-jsをJavaのソースコードから生成できる
-IDEを使える

***rb2js
-Rubyからjsに

***py2js
-alpha quarity…どうなった？

***PHPは？
-PHPはjsと似ている

**発表終了後
懇親会の会場へ歩いていたとき。たまたま一緒に話しながら歩いていた人が大学の研究室の先輩である事が判明。Σ(ﾟ口ﾟ;. 自分が学部3年の時、修士2年だったので、会っていた期間は僅かのはず…。いや～～……どこで、誰に会うかわからないもんですね。

聞けば、同じ会社で働いていた人がpixivへ転職、今回のスピーカーだったためたまたま見にきたとの事。

それだけでも偶然だと思ったのに、その先輩と@Moyashipanさんが同じ高校出身、同郷であったことも判明。どんだけ狭いのだ。

そんな@Moyashipanさんは自分と同い年((今まで参加した勉強会では1,2年上や1,2年下の割と世代の近しい方とはお会いした事があったのですが、完全に同じ年代の人は初めてあった。))なのに、既にpixivに様々なシステムを作りリリースしているという点で、尊敬と&lt;del&gt;もうExcelをこねくり回して共有サーバでファイル管理するお仕事は嫌だお&lt;/del&gt;自分も頑張らねばと。何か作りたい衝動に駆られます。

今回はすごく勉強になりました、技術的な話意外にも色んな意味で来てよかった……。さしあたってjs系とQUnitはちょっと使ってみたいと思いました。会場を提供してくださったpixivさん、発表者の皆さんありがとうございました！！

**こっそり
@aopicoさん…ブクマ0の人の寂しいレコメンデーションに救済を……。
</body>
</day>
<day date="2011-01-12" title="">
<body>
*1294833920*[Java][Wicket][イベント]Wicket勉強会に参加しました

-詳細: [http://atnd.org/events/11066:title]

TwitterのTL取得ページを自分用に作った程度ですが、二年連続二回目の出席をキメました。バージョン1.3メインで使っていた(いる？)人なので、もう1.5が出るのかーっといったところです。

1.5になると矢野さんのWicket本の1/3が意味なくなるらしい…。

**Wicket1.5の新機能 @[http://twitter.com/t_yano:title=t_yano]さん

-WebRequestCycleが消えた
-steps(), step()も消えた
--RequestTargetという概念が消えた→IRequestHandlerで代替
-UrlCodingStrategy→IRequestMappterで代替
-リクエストのサイクル
&gt;||
IRequestHandler
　↑　　　　↓
--------------------
IRequestMapper
--------------------
　↑　　　　↓
Request      Url
||&lt;

-RequestHandlerを使えればWicketの世界に入っていける
-RequestHandlerStack: リクエスト処理の中心でRequestHandlerをスタックとして扱う

***Urlマウント
-mountBookmarkablePageが消え、代わりにmountPageになった。
-${}で変数をUrlに埋め込めるようになった

&gt;||
/mountpath/${year}/

StringValue year = parameter.get(&quot;year&quot;)
||&lt;

--現状はページのみ。リソースの場合はインデックスで取れる

&gt;||
/user/t_yano/image/

parameter.get(0) //user
parameter.get(1) //t_yano
||&lt;

***コンポーネントの初期化と設定

-コンストラクタ？onBeforeRender？
--onInitialize()が追加された
---自身が&lt;strong&gt;ページにadd済み&lt;/strong&gt;である事を保証。ただし&lt;strong&gt;一度しか呼ばれない&lt;/strong&gt;
---isVisibleがfalseだったりすると呼ばれない
--onConfigure()
---&lt;strong&gt;レンダリング前にかならず呼ばれる&lt;/strong&gt;事を保証
---&lt;strong&gt;全コンポーネントが揃っている事が保証できる&lt;/strong&gt;タイミング
---&lt;strong&gt;isVisibleがfalseでも呼ばれる&lt;/strong&gt;
-ButtonとかLinkとかPanelに書くもので、Pageに書くものではない

***コンポーネントの独立性

-密結合
--ボタンを押すとあるコンポーネントが消えるという場合…
---ボタンと消すコンポーネントを連携させないといけなかった

-IEventSink: イベントを受け取るオブジェクト
-IEventSource: イベントを送信できるオブジェクト
--あらゆるコンポーネントはIEventSinkかつIEventSource

-Page#sendで送れる範囲
--BREADTH: 子に広げる
--WIDTH: 子から自分まで上がる
--BUBBLE: 自分から親に上がる
---BREADTHしか使わないんじゃないか？

&gt;||
◯　　　　　◯　　◯　　◯
↓イベント　↑　　↑　　↑
フ　レ　ー　ム　ワ　ー　ク
||&lt;

-他のコンポーネントを意識しなくてもよくなった！
-今後はページからではなくコンポーネントから考えよう

-ajaxコンポーネントを更新するaddComponent()メソッドはadd()になった

**最終的な表示処理は誰のもの？ @[http://twitter.com/t_hyssh:title=hayassh]さん

-Wicket歴4年
-40人以上のプロジェクトでWicketを使っている

***こんなときどうするか
-住所を一行で表示
-郵便番号はXXX-XXXX
-郵便番号と住所は半角スペースひとつあける
--郵便番号にハイフンを入れる、半角スペースあけで表示するというのは表示側の都合

***上記の処理をWicketのどの部分でやるか？？
-Component部分でやるか
--再利用性が高くなる
--拡張性も保たれる
--テスタビリティが低い
--WicketTesterを使用しなければいけない

-Comverterでやるか
--Componentよりテスタビリティが高い
--変換処理だけ考えるので責務がはっきりする
--Stringへの変換しかしない
--Nullの場合にConverterが適用されない

-ViewHelperでやるか
--テスタビリティが高い
--概念が理解されやすい
--CompoundPropertyModelと相性がいい
--再利用性・拡張性が悪い

***入力があればConverter。表示するだけならModelでなんとかする？再利用単位はコンポーネントがいい？

***まとめ
-Componentで行えば再利用性が高まる？
-ただし、ViewHelperはJUnitでテストができる

**タイトル未定 @[http://twitter.com/tetsuyas:title=tetsuyas]さん

-大学の教員をやっている
-Shuugi.in - [http://shuugi.in/:title] というサービスを作成している

***Shuugi.inサイトでの事例
-更新すべきパネルをもち回している。
-OAuth
--Twitter
---Twitter4j
--はてな
---oauth-signpostを利用
---OAuthConsumer,OAuthProviderをもち回す
-ModalWindow内でのページ遷移

**Wicket1.3から1.4へのマイグレーション時にハマった事 @[http://twitter.com/gishi_yama:title=gishi_yama]さん

-大学の教員をやっている
-学内のシステムをWicketで開発

***構成
-Wicket + Guice + JDBC
-コンポーネントをシンプルに使用
-確認は目視

***マイグレーション後
-エラー350近く、ワーニングは5000近く
--エラーの原因はメソッドの廃止によるものがほとんど
--ワーニングはジェネリクス、Validator

***工数
-300クラス/3.2万ステップ
-社内SE2人でコード修正、確認など…80H

***マイグレーションで注意
-CompundPropertyModelを使用したFileUploadFieldコンポーネント
--FileUploadFieldにModelを指定しないとエラーになる
-ModelをセットしないLinkやFormに対するジェネリクス
--Link&lt;Void&gt;にする
-htmlの書き換え
--xmlnsを1.3から1.4にかえる
-1.4からのコンポーネントに置き換え
--EnumLabel,onConfigure(),onInitialize()など
-1.3から1.4で仕様変更したコンポーネント

***changelogとかWicketTesterを使いこなせば…

**PropertyModelクラスがオブジェクトのフィールド変数を取得する仕組みについて  ravicotさん

***アクセサがないのにどう取得しているのか？
-リフレクションを使っていた
-動的にアクセサを使用していた
-PropertyResolver.getValueを使用している
--フィールドを取得してアクセサがなければアクセサ作成を試みる！

**Wicket:idを利用しないテンプレートとの対応付け @[http://twitter.com/madogiwa:title=madogiwa]さん

***html5だとwicket:idタグは警告される

***警告を消すには…
-xmllnを追加する
-wicket:idを使わなければいいじゃない！

***どうする
-フィルターを拡張する
-フィルターを有効にする
-具体的には……[http://d.hatena.ne.jp/mdgw/20101106/p1:title]

-何か意外と簡単にできるらしい…これはやってみたいかも

**WicketとFlexの連携 @[http://twitter.com/chimerast:title=chimerast]さん

***Wicketのajax系のコンポーネントとFlexの連携

***W→F
-FlexのcreateComplete内でaddCallbackを呼び出し、jsリストに関数を追加
-そしてWicketから呼び出す

***F→W
-AbstractDefaultBehavior#renderHead()をオーバライドしjs関数を追加
-Flexから追加した関数を呼び出す

***テキストエンコーディング
-F→js
--特に問題なし
-js→W
--endodeURIComponent()

**感想とか二次会とか
大学時代に作ったWicketの遺産が発掘されたので、これ、1.5にあげてみたいと思うなど。何かLTのネタでもできるようにWicketを使っていきたい。

その後の二次会では主にPHPとかWindowsとかOfficeがディスられてました。また、今回はATNDでのアテンドなのに出席率がめちゃめちゃ良かったとの事でした。

**最後に
長い時間受付をして下さった[http://twitter.com/yoshioterada:title=yoshioterada]さん、会場を提供して下さった日本オラクルさんありがとうございました！

</body>
</day>
<day date="2011-01-23" title="">
<body>
*1295789180*[Ruby][Twitter][API]RubyでTwitterにツイートをキメてみる
**前回までのあらすじ
+[http://d.hatena.ne.jp/kk_Ataka/20101121/1290271210:title]
+[http://d.hatena.ne.jp/kk_Ataka/20101130/1291125511:title]
+[http://d.hatena.ne.jp/kk_Ataka/20101207/1291733295:title]

ターミナルからOAuth認証をキメて、タイムラインを見られるようになりました。最後にターミナルからツイートが出来れば一応Twitterの見る・書くがライブラリ無しでできたことになります。

**ツイートする方法
+signatureを作成する。必要な値は以下のとおり。
++oauth_consumer_key
++oauth_nonce
++oauth_signature
++oauth_signature_method
++oauth_timestamp
++oauth_token
++oauth_version
++status &lt;span style=&quot;color:#FF0000;&quot;&gt;New!&lt;/span&gt;

statusっていうのがツイートの本文ですね。signature作成するのにエスケープします。作成後のheaderはこんな感じ。((実際はインデントとかなし。))statusには「確認確認」って入ってます。

&gt;||
{
	&quot;oauth_nonce&quot;=&gt;&quot;3c8293f9c5a0295148d428a26edb9f46&quot;, 
	&quot;oauth_timestamp&quot;=&gt;&quot;1295784908&quot;, 
	&quot;oauth_signature_method&quot;=&gt;&quot;HMAC-SHA1&quot;, 
	&quot;oauth_consumer_key&quot;=&gt;&quot;XXXXXXXXXXXXXXXXXXXXXX&quot;, 
	&quot;oauth_token&quot;=&gt;&quot;99999999-YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY&quot;, 
	&quot;oauth_signature&quot;=&gt;&quot;UKt1BmJ+UWNWrSmBuAyJ40iiCNY=&quot;, 
	&quot;status&quot;=&gt;&quot;%E7%A2%BA%E8%AA%8D%E7%A2%BA%E8%AA%8D&quot;, 
	&quot;oauth_version&quot;=&gt;&quot;1.0&quot;
}
||&lt;

**signature作成後
-signatureを作成したら、headerからstatusを消します
-残ったheaderをアルファベット順に並べ、xxx=yyy&lt;span style=&quot;color:#FF0000;&quot;&gt;,&lt;/span&gt;vvv=zzz……の形で連結します。連結後はこんな感じ

&gt;||
oauth_consumer_key=XXXXXXXXXXXXXXXXXXXXXX,oauth_nonce=341d852d61cdc3c22e3e847b0ab69d20,oauth_signature=MR5WEJ1qHuE49ozgRYduNJ%2BBiCs%3D,oauth_signature_method=HMAC-SHA1,oauth_timestamp=1295785315,oauth_token=99999999-YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY,oauth_version=1.0
||&lt;

-連結した上記の値をAuthorizationヘッダに入れる。入れた後はこんな感じ。

&gt;||
&quot;Authorization&quot;=&gt;&quot;OAuth oauth_consumer_key=XXXXXXXXXXXXXXXXXXXXXX,oauth_nonce=341d852d61cdc3c22e3e847b0ab69d20,oauth_signature=MR5WEJ1qHuE49ozgRYduNJ%2BBiCs%3D,oauth_signature_method=HMAC-SHA1,oauth_timestamp=1295785315,oauth_token=99999999-YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY,oauth_version=1.0&quot;
||&lt;

-Authorizationヘッダを作成したらhttp://api.twitter.com/1/statuses/home_timeline.jsonへPOST。また、ツイート本文を「status=本文」の形でくっつける

**結果
以上で、Twitterにツイートが完了しました！　おっぱいきたーー
[f:id:kk_Ataka:20110123215838j:image]

**ソース
ソースはこんな感じです。

&gt;|ruby|
# -*- encoding: UTF-8 -*-

require 'openssl'
require 'uri'
require 'net/http'
require 'nkf'
require 'time'

# 署名
def sigunature(method, 
		consumer_secret, 
		oauth_token_secret, 
		url, 
		oauth_header=nil)
	# sigunature_keyの作成
	# リクエストトークン時は&quot;CONSUMER_SECRET&amp;&quot;(アンドが入っている)
	# アクセストークン時は&quot;CONSUMER_SECRET&amp;OAUTH_TOKEN_SECRET&quot;として使用
	sigunature_key = consumer_secret + &quot;&amp;&quot;
	if !oauth_token_secret.nil? then
		sigunature_key += oauth_token_secret
	end

	param = sort_and_concat(oauth_header)

	# メソッド + URL + パラメータ
	value = method + &quot;&amp;&quot; + escape(url) + &quot;&amp;&quot; + escape(param)
	# hmac_sha1
	sha1 = OpenSSL::HMAC.digest(OpenSSL::Digest::SHA1.new, sigunature_key, value)
	# base64
	base64 = [sha1].pack('m').gsub(/\n/, '')
	return base64
end

# 文字列のエスケープ(: / = %をエスケープする。. _ -はそのまま)
def escape(value)
	URI.escape(value, Regexp.new(&quot;[^a-zA-Z0-9._-]&quot;))
end

# oauth_headerの情報をアルファベット順に並べ替え &amp; で結合
def sort_and_concat(oauth_header)
	oauth_header_array = oauth_header.sort
	param = &quot;&quot;
	oauth_header_array.each do |params|
		for i in 1..params.length
			param += params[i-1]
			if i % params.length == 0
				param += &quot;&amp;&quot;
			else
				param += &quot;=&quot;
			end
		end
	end
	param = param.slice(0, param.length-1)
end

# -------------------------------------------------------------

update_url = &quot;http://twitter.com/statuses/update.json&quot;

url = update_url
# コマンドプロンプトはutf8変換
text = escape(ARGV[0])
# text = escape(NKF.nkf('-w', ARGV[0]))
proxy = ARGV[1]

# Twitterで登録したらもらえる
consumer_key = &quot;XXXXXXXXXXXXXXXXXXX&quot;
consumer_secret = &quot;YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY&quot;
# Twitterからもらえるリクエストトークン(最初は使わない)
oauth_token = &quot;11111111-ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ&quot;
oauth_token_secret = &quot;VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV&quot;

# oauthパラメータたち(決め打ちのもの)
oauth_header = {
	# Consumer Key
	&quot;oauth_consumer_key&quot; =&gt; consumer_key,
	# 一意な値
	&quot;oauth_nonce&quot; =&gt; OpenSSL::Digest::Digest.hexdigest('MD5', &quot;#{Time.now.to_f}#{rand}&quot;), 
	# 署名方式(HMAC-SHA1)
	&quot;oauth_signature_method&quot; =&gt; &quot;HMAC-SHA1&quot;,
	# リクエスト生成時のタイムスタンプのミリ秒
	&quot;oauth_timestamp&quot; =&gt; Time.now.to_i.to_s, 
	# バージョン(1.0)
	&quot;oauth_version&quot; =&gt; &quot;1.0&quot;,

	# アクセストークン
	&quot;oauth_token&quot; =&gt; oauth_token
}

# headerにツイート追加
oauth_header[&quot;status&quot;] = text

# 署名生成
oauth_header[&quot;oauth_signature&quot;] = sigunature(&quot;POST&quot;,
					consumer_secret,
					oauth_token_secret,
					url,
					oauth_header)

# headerからツイート削除
oauth_header.delete(&quot;status&quot;)
# 署名エンコード
oauth_header[&quot;oauth_signature&quot;] = escape(oauth_header[&quot;oauth_signature&quot;])
param = sort_and_concat(oauth_header)

param = param.gsub('&amp;', ',')

header = {
	&quot;Authorization&quot; =&gt; &quot;OAuth &quot; + param
}

# POST
uri = URI.parse(update_url)
proxy_class = Net::HTTP::Proxy(proxy, 8080)
http = proxy_class.new(uri.host)
http.start do |http|
	res = http.post(uri.path, &quot;status=#{text}&quot;, header)

	if res.code == &quot;200&quot; then
		print &quot;#{res.code} tweet: #{ARGV[0]}\n&quot;
	else
		print &quot;ERROR: #{res.code}\n #{res.body}\n&quot;
	end
end
||&lt;

*1295789120*[イベント]MacBook Air 11インチ欲しい！

[[MacBook Air 11インチ欲しい！]]

</body>
</day>
<day date="2011-01-25" title="">
<body>
*1295956879*[Ruby]RubyでFizzBuzzみじかいのに挑戦した
-参考: [http://togetter.com/li/92612:title]

FizzBuzz自体は組んだことあるけど、短いのは考えたことがなかったのでこれを機会に挑戦。

**一つ目
&gt;|ruby|
101.times{|i|p(i%15==0?'FizzBuzz':i%3==0?'Fizz':i%5==0?'Buzz':i)}
||&lt;

&gt;|ruby|
101.times{ |i|
	p (
		i % 15 == 0 ? 'FizzBuzz' 
			: i % 3 == 0 ? 'Fizz'
					: i % 5 == 0 ? 'Buzz' : i
	)
}
||&lt;

-do～endが文字数消費するので{}を使った
-if～elseが文字数消費するので三項演算子を使った
-アウトプットをpにして文字数を稼いだ

三項演算子の入れ子なんて初めて使ったからどうインデントしたら綺麗に見えるのかもわからん！　しかもこれで66byte…某Y!社に入れないなぁ。

また、どうもFizzBuzzって1から100でやるらしく、上記のソースだと0から100まで実行してしまうので他の部分も含めてちょっと考え直し……。

**二つ目
&gt;|ruby|
(1..100).each{|i|p(i%15&gt;0?i%5&gt;0?i%3&gt;0?i:'Fizz':'Buzz':'FizzBuzz')}
||&lt;

&gt;|ruby|
(1..100).each{ |i|
	p (
		i % 15 &gt; 0 ?
			i % 5 &gt; 0 ?
				i % 3 &gt; 0 ? i
				: 'Fizz'
			: 'Buzz'
		: 'FizzBuzz'
	)
}
||&lt;

-eachにしてループを1から100までにした
-条件を割り切れたら(i%15==0)から割り切れなかったら(i%15&gt;0)に変更

条件式で3byte縮めたけどtimesからeachに交えたせいで67byteに増えた……。

その後、最短方法をいろいろググッてみると配列使うテクニックとかがあるみたいすなあ。&quot;FizzBuzz&quot;の出力の仕方でもうちょい短縮できそうかな。

</body>
</day>
<day date="2011-01-30" title="">
<body>
*1296401919*[JavaScript][Git][イベント]BPStudy#41に参加しました
-詳細: [http://atnd.org/events/11755:title]

ATNDなどでBPStudyの存在は知っていたのですが、今回初参加。

分散SCMを勉強しようと思って最近Gitを使いはじめたのですが、リアル周りに使っている人がいないので知識共有ができず……。他の人はどうやって使っているのかなーと思っているところに神速さんがGitの発表をすると聞いたので、自重せずに参加しました。

以下メモ。前半戦のjsも、聞けばわかるかなーとか思っていたら甘かった……jsは勉強不足でした。もう少し使えないと話にもついていけない……。

**JavaScript @[http://twitter.com/monjudoh:title=monjudoh]さん
-[http://d.hatena.ne.jp/monjudoh/20110128/1296205331:title]

***RequireJS実践編
-RequireJSって何？
--jsの依存性解決をしてくれるライブラリ
--モジュール内で他のモジュールを再帰的に読み込みを行いたい場合…define関数を使用して読み込んでいく
--require関数を使うと逆に読み込んでいく

-RequireJS読み込みの前にrequireなんたらという名前が付いているグローバル変数がある場合、設定ファイルとして使ってくれる

-モジュールjsのあるディレクトリが深い場合呼び出しがめんどい
--baseUrlを指定してjsがあるパスを基底のパスにすると楽になる

-パスの上書きもできる
--スタブモジュールと置き換える事もできる

-キャッシュされた古いJavaScriptを読みこまないようにもできる
--クエリパラメータにデプロイ日時を入れる

***jQuery custom event 応用編
-custom eventって何？
--ブラウザがサポートしてないイベント((普通はユーザがクリックするとか、ページが読み込み終わるとイベントが始まるけど、jQueryはtriggerHandlerメソッドで(ユーザに関係なく)始まる))を定義する独自のイベント

-普通のプログラムのような事もcustom eventでできる
--関数呼び出し
--引数付き呼び出し
--インスタンス変数へのアクセス
--クラス作成のような事
--mixin
--callback
--mixout
--同名のn(≧0)個の関数呼び出し

***疎結合なUIコンポーネントの作成について
-複数画面で使えるAjaxformダイアログのコンポーネントを作りたい
--例えば、Googleカレンダーのように日付セルをクリックしたらスケジュール登録ダイアログが出るように

-仕様変更
--セルをクリックしたらアクティブ、アクティブをクリックしたらスケジュール登録ダイアログが出るように
--ダイアログを開く→custom eventにして「開く」と「ユーザアクションの検知」を別に

-仕様変更
--スケジュール一覧画面を作る、画面に新規追加ボタンもあり、カレンダーのセルをクリックしたときと同じダイアログをだす
--ユーザアクション検知のモジュールをカレンダー画面とスケジュール表示画面に分ける
--callback処理も分ける

-本体の再利用性も高いし、挿し込むパーツも機能が明確なので再利用性が高くなる

**マスタリング非同期読み込み @[http://twitter.com/os0x:title=os0x]さん
-[http://ss-o.net/event/js20110128/:title]

***最近非同期読み込みが流行っているらしい…
-Node.jsなどが有名
-JavaScriptは他のリソースの読み込みをブロックするので非同期で行いたい
-新UIになったTwitterでも使われている
--けど、あまりはやくなってない？
--本文が最後に表示されるから(先に読み込もうとしているけど表示に時間がかかっている)

***ライブラリ
-LAB.js
--ロード処理をjsで実装。Twitterでも使われている
-ControlJS
--scriptタグのtypeをtext/javascript→text/cjsにしてあとでcjsとして評価する
-RequireJS
--document.createElement('script')してinsertで使える
--が、依存がネストすると非同期にならない→先に読み込んでおく

**gitの歴史改変について @[http://twitter.com/sinsoku_listy:title=sinsoku_listy]さん
-[https://dl.dropbox.com/u/3501492/bpstudy-41/presen.html:title]

***分散SCMの利点について
-各操作が早い
-他リポジトリに影響を与えない

***今回のGitコマンド
-git add -p 
--部分変更を記録するコミット
-git rebase -i
--歴史を書き換えるコマンド
---コミットの変更、コミットメッセージの変更などができる

***デモ
-pep8規約違反を起こしたコードを改変する
--bisect(テストの失敗したコミットを二分探索でさがす)で探して改変
--rebaseでコミットの修正

***まとめ
-詳しくは「入門Git」で！
-他人が作ったコミット、他人に渡したコミットは改変してはいけない
-…が、実際はプロジェクトの方針によってまちまち

**発表後
ATNDに登録していなかったのですが、無理を言って懇親会に参加させていただきました。懇親会の場で話題にあがった、先のない技術の維持をダラダラ続けているのは守りの姿勢、それならニートでいる方がよっぽど攻めている。自分が本当に突き詰めたいものをもって外に攻め出たほうがいい。という言葉がちょっと考えさせられました。本当にこのままでいいのだろうかという……。とりあえず少しずつ。Gitを使いこなす所から始めよう。

**最後に
主催者の@haru860さん、発表者の@monjudohさん、@os0xさん、@sinsoku_listyさん、受付をしてくださった皆さん今回はありがとうございました！
</body>
</day>
<day date="2011-03-02" title="">
<body>
*1299062938*[Ruby][API]Read it LaterをRubyで取得する
ブラウザからログインせずともRILを見たい！　追加したい！　ということで。

**前準備
-はじめにapikeyを取得するためにhttp://readitlaterlist.com/api/signup/にアクセスします。((ReadItLaterのアカウントを持っていない場合は、あらかじめ作っておきます。))
-必須項目(AppNameとContact Email)を記入し、Generate API Keyします。
-取得したapikeyを取っておきます。

[f:id:kk_Ataka:20110302190610p:image]

-APIの概要はhttp://readitlaterlist.com/api/docs/に載っているので、基本的にはこれを見ながらできる…はず。

**記事をGetする
以下のパラメータを生成し、URLのおしりに?AAA=BBB&amp;CCC=DDD...形式でくっつけてhttps://readitlaterlist.com/v2/getに送ります。((順不同でもよい))パラメータは他にもあるけど、とりあえずこれだけあれば取得はできます。

|*apikey(必須)|今生成したapikey|
|*username(必須)|Read It Laterのアカウント|
|*password(必須)|パスワード|
|*format|レスポンスのフォーマット。jsonかxmlが選択できる。デフォルトはjson|

パスワードが丸見えなのでショルダーハックとかされるとアレですが…。

**ソースコード
ここまでをRubyで書いてみました。jsonの解析はTwitterから取得したツイートを解析したときと同じようにsimplejsonparserを使用させていただきました。

&gt;|ruby|
require 'uri'
require 'net/http'
# http://rubyforge.org/snippet/detail.php?type=snippet&amp;id=148
require 'simplejsonparser'
require 'pp'

# RIL取得用のURL
url = &quot;https://readitlaterlist.com/v2/get&quot;

# アカウント名とパスワード
username = &quot;kk_Ataka&quot;
password = PASSWORD
# apikey
apikey = APIKEY
# format json or xml
format = &quot;json&quot;

# パラメータ作成
param = &quot;username=#{username}&amp;password=#{password}&amp;apikey=#{apikey}&amp;format=#{format}&quot;

# GETする
uri = URI.parse(url)
proxy_class = Net::HTTP::Proxy(ARGV[0], 8080)
http = proxy_class.new(uri.host)
http.start do |http|
        res = http.get(uri.path + &quot;?#{param}&quot;)
        if res.code == &quot;200&quot; then
                json = res.body
                # jsonparseでparseしてもらう
                jsonparse = JsonParser.new.parse(json)

                pp jsonparse
        else
                print &quot;#{res.code}\n&quot;
        end
end
||&lt;

すると、こんな感じに返ってきます。

[f:id:kk_Ataka:20110302190611j:image]

json形式では、こんなフォーマットで返ってくるみたい。

&gt;http://readitlaterlist.com/api/docs/#get&gt;
{
　　&quot;status&quot;:&quot;1&quot;,			// 1=normal, 2=no changes since your provided 'since'
　　&quot;since&quot;:&quot;1245626956',		// timestamp of this response
　　&quot;list&quot;:{
　　　&quot;93817&quot;:{
　　　　&quot;item_id&quot;:&quot;93817&quot;		    // unique id identifying the url
　　　　&quot;url&quot;:&quot;http://url.com&quot;,
　　　　&quot;title&quot;:&quot;Page Title&quot;,
　　　　&quot;time_updated&quot;:&quot;1245626956&quot;,       // time the item was last added/changed
　　　　&quot;time_added&quot;:&quot;1245626956&quot;,	    // time item was added to list
　　　　&quot;tags&quot;:&quot;comma,seperated,list&quot;,
　　　　&quot;state&quot;:&quot;0&quot;,                       // 0=unread, 1=read
　　　},
...
&lt;&lt;

さしあたり、欲しいのはlist内のurl,titleくらいなんだけど、これどうやって取得するんだろう。うまい方法が思い浮かばなかったので、一旦listのkeyを全部取得してkey分forを回すというあまりイケてない方法に。parse以降をこう変えました。

&gt;|ruby|
                # jsonparseでparseしてもらう
                jsonparse = JsonParser.new.parse(json)
                
				# listのキーを取得
                keys = jsonparse[&quot;list&quot;].keys
                for i in 0..keys.length-1
                        print_url = jsonparse[&quot;list&quot;][keys[i]][&quot;url&quot;]
                        print_title = jsonparse[&quot;list&quot;][keys[i]][&quot;title&quot;]

                        print &quot;#{print_title} ■ #{print_url}\n&quot;
                end
||&lt;

すると表示は、

[f:id:kk_Ataka:20110302192703p:image]

おお、ニコニコ動画！　次はAddをやりたい。むしろそっちが目的！

</body>
</day>
<day date="2011-03-08" title="">
<body>
*1299588433*[Ruby][API]RubyではてなのWSSE認証をしてはてブにブクマをポストする
ReadItLaterの続きをやろうと思ったのですが、GitHubにはてブスクリプトをコミットしたので先にまとめる。

結構前に作ったので、OAuthではなくWSSE認証を使っています。

**手順

+X-WSSEヘッダを作成する
+ブックマークするUrl・コメントを記述したxmlデータと、X-WSSEヘッダを含めたリクエストをhttp://b.hatena.ne.jp/atom/postへPOSTする

手順はこれだけ。次に詳細を…。

**ヘッダを作成する

以下のデータを用意します

|*Username|はてなID|
|*Nonce|HTTPリクエスト毎に生成したセキュリティ・トークンをBASE64エンコードしたもの((一意な値ならとりあえず動くようです。))|
|*Created|Nonce作成時のタイムスタンプをISO-8601表記で記述したもの|
|*PasswordDigest|「Nonce+Created+はてなのパスワード」をSHA1でダイジェスト化しBASE64エンコードしたもの|

これらのデータをX-WSSEヘッダに以下の形式で格納します。

&gt;||
UsernameToken Username=&quot;USERNAME&quot;, PasswordDigest=&quot;PASSWORDDIGEST&quot;, Nonce=&quot;NONCE&quot;, Created=&quot;CREATED&quot;
||&lt;

**POSTする

ヘッダは完成したので、次にブックマークする情報を用意します。形式はxmlで以下のようなフォーマットで作成します。((ブックマークコメントを[]でくくるとタグになります。[Google]みたいな。))

&gt;||
&lt;entry xmlns=&quot;http://purl.org/atom/ns#&quot;&gt;
                &lt;title&gt;dummy&lt;/title&gt;
                &lt;link rel=&quot;related&quot; type=&quot;text/html&quot; href=&quot;ブックマークするURL&quot; /&gt;
                &lt;summary type=&quot;text/plain&quot;&gt;ブックマークコメント&lt;/summary&gt;
&lt;/entry&gt;
||&lt;

作成されたヘッダとデータはこんな感じになります。

[f:id:kk_Ataka:20110308213639j:image]

最後に作成したヘッダとブックマークデータをhttp://b.hatena.ne.jp/atom/postへポストすると。

[f:id:kk_Ataka:20110308213640j:image]

おお。

正常に作成された場合は、ステータスコードは201が返ってくるようです。

**ソース

Gistは直接貼れるけどGitHubは貼れないのね…。ここにあります。[https://github.com/gosyujin/hatena:title]

&gt;|ruby|
require 'rubygems'
require 'pit'
require 'time'
require 'digest/sha1'
require 'net/http'
require 'uri'
require 'nkf'

# wsse認証を行う
def wsse(hatena_id, password)
	# 一意な値(仮実装)
	nonce = [Time.now.to_i.to_s].pack('m').gsub(/\n/, '')
	# nonce作成時のタイムスタンプをISO-8601表記で記述したもの
	now = Time.now.utc.iso8601
	
	# SHA1ダイジェスト化した文字列をBase64エンコード
	digest = [Digest::SHA1.digest(nonce + now + password)].pack(&quot;m&quot;).gsub(/\n/, '')
	
	{ 'X-WSSE' =&gt; sprintf(
		%Q&lt;UsernameToken Username=&quot;%s&quot;, PasswordDigest=&quot;%s&quot;, Nonce=&quot;%s&quot;, Created=&quot;%s&quot;&gt;,
		hatena_id, digest, nonce, now)
	}
end

# はてブ登録用xmlを生成する
def getXml(link, summary)
	%Q(
	&lt;entry xmlns=&quot;http://purl.org/atom/ns#&quot;&gt;
		&lt;title&gt;dummy&lt;/title&gt;
		&lt;link rel=&quot;related&quot; type=&quot;text/html&quot; href=&quot;#{link}&quot; /&gt;
		&lt;summary type=&quot;text/plain&quot;&gt;#{summary}&lt;/summary&gt;
	&lt;/entry&gt;
	)
end

b_url = ARGV.shift || abort(&quot;Usage: hatenabookmark.rb &lt;url&gt; &lt;comment&gt;&quot;)
b_comment = ARGV.shift

# エンドポイント
url = &quot;http://b.hatena.ne.jp/atom/post&quot;

# ユーザ情報読み込み
hatena = Pit.get(&quot;hatena&quot;, :require =&gt; {
	# はてなIDとパスワード
	&quot;hatena_id&quot; =&gt; &quot;your hatena_id&quot;, 
	&quot;password&quot; =&gt; &quot;your password&quot;, 
})
# pitを使わずにべた書き用
# hatena = {
#	hatena_id =&gt; HATENA_ID, 
#	password = PASSWORD
# }

# WSSE認証
header = wsse(hatena[&quot;hatena_id&quot;], hatena[&quot;password&quot;])

uri = URI.parse(url)
proxy_class = Net::HTTP::Proxy(ENV[&quot;PROXY&quot;], 8080)
http = proxy_class.new(uri.host)
http.start do |http|
	# 読み込んだ文字列をutf-8に変換
	# b_url = NKF.nkf('-w', b_url)
	# b_comment = NKF.nkf('-w', b_comment)
	
	# エンドポイントへPOST
	res = http.post(uri.path, getXml(b_url, b_comment), header)
	if res.code == &quot;201&quot; then
		print &quot;Bookmark success: #{b_url}\n&quot;
	else
		print &quot;#{res.code} Error: #{b_url}\n&quot;
	end
end
||&lt;

参考にしたサイトにトラックバック打とうと思ったけど前すぎて忘れた＞＜　見つけたら追記します。

</body>
</day>
<day date="2011-04-23" title="">
<body>
*1303489798*[Unix][備忘録][Dropbox][さくらVPS]さくらVPSにDropboxをインストールした
&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;※インストール後、Enable LAN sync(LAN同期を有効にする)オプションをOFFにする必要がある&lt;/span&gt; [http://d.hatena.ne.jp/kk_Ataka/20111008/1318068887:title]
**あらすじ
-GUIがなくてもDropboxを使いたい！→CUI版のDropboxがあるらしい

**参考サイト
-http://wiki.dropbox.com/TipsAndTricks/TextBasedLinuxInstall
-[http://www.hyk-home.com/blog/infra/archives/2009/05/05-202601-137.html:title]

上記のサイトの情報だけで全部できました。以下自分用メモ。

**OSとかPythonとか

|*CentOS|5.5 x86_64|
|*Python|2.6.2|

-Pythonはデフォルトで2.4.3が入っているがこれじゃあ動かなかった。2.6が必須らしい。
-[http://www.python.org/ftp/python/:title] 必要に応じてダウンロードしておく。

**Dropboxを手に入れる～インストール

-&lt;del datetime=&quot;2012-04-07T12:38:37+09:00&quot;&gt;[http://wiki.dropbox.com/TipsAndTricks/TextBasedLinuxInstall#Step-by-stepversion:title=Step-by-stepversion] の1.～7.まで順番に実行していく。&lt;/del&gt;
-&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;(2012/04/07追記)手順を一部修正&lt;/span&gt;
--[https://www.dropbox.com/install?os=lnx:title]
&gt;||
$ cd ~ &amp;&amp; wget -O - &quot;http://www.dropbox.com/download?plat=lnx.x86&quot; | tar xzf -
||&lt;
--&lt;del datetime=&quot;2012-04-07T12:38:37+09:00&quot;&gt;1. ホームディレクトリに移動する。((デフォルトでインストールする場所に合わせる？))&lt;/del&gt;
--&lt;del datetime=&quot;2012-04-07T12:38:37+09:00&quot;&gt;2. [http://www.getdropbox.com/download?plat=lnx.x86:title=32bit版Dropbox] をダウンロードする。&lt;/del&gt;
--&lt;del datetime=&quot;2012-04-07T12:38:37+09:00&quot;&gt;3.～5. ダウンロードしたファイルを解凍する。&lt;/del&gt;解凍するとホームディレクトリに.dropbox-dist/が生成される。ドットファイルなので隠しファイル。((見つけるのに時間がかかった…))
--6. .dropbox-dist/dropboxd を実行する。実行するとリンクしてください！　と言われる。他のPCから指定のアドレスへアクセスし、自分のDropboxアカウントでログインする。

[f:id:kk_Ataka:20110423012022j:image]

--リンクすると、自動で同期が始まる。

**確認
-[http://www.getdropbox.com/download?dl=packages/dropbox.py:title=dropbox.py] でステータスなどが確認できる。

&gt;|python|
$python dropbox.py status
||&lt;

[f:id:kk_Ataka:20110423012021j:image]

-これはwhileで回しまくってる時にファイルを同期させた所を確認している。よし！

**使わなかったもの
-http://dl.getdropbox.com/u/6995/dbmakefakelib.py
-http://dl.getdropbox.com/u/6995/dbreadconfig.py

参考サイトでは使ってたけど、この2つは使わなくても同期できるみたい？

</body>
</day>
<day date="2011-05-01" title="">
<body>
*1304204171*[Ruby][Redmine][Windows][備忘録]Redmineインストール備忘録(Windows)

**参考サイト
-http://redmine.jp/tech_note/install/

**OSとRubyとか
-OSはWindows XP
-Ruby, RubyGemsインストール済み
-DBはSQLite3にする

**必要なものをDL, インストール
-GemでRailsをインストール
&gt;|winbatch|
&gt;gem install rails
||&lt;

-同じくsqlite3をインストール
--最新のsqlite3-ruby(1.2.4)ではなく、1.2.3を指定((http://redmine.ruby-lang.org/issues/1097))
&gt;|winbatch|
&gt;gem install sqlite3-ruby --version '= 1.2.3'
||&lt;

-[http://www.sqlite.org/download.html:title] でSQLite3のdllをDLしC:\WINDOWS\system32(パスが通ってるところ)にコピー
--コマンドラインから動かす予定はないのでexeは落とさない

-[http://rubyforge.org/frs/?group_id=1850:title] でRedmineをDLし解凍

**各種設定
-Redmineフォルダ内のconfig/database.ymlを作成し((確かサンプルファイルがあったはず。))、最低限下記のように編集
&gt;|??|
production:
	adapter: sqlite3		# SQLite3を指定
	database: db/redmine.db	# DB名は任意
	timeout: 5000		# タイムアウト時間
||&lt;

-config/initializers/session_store.rb作成
&gt;|winbatch|
&gt;rake generate_session_store
||&lt;

-DBの初期化
&gt;|winbatch|
&gt;rake db:migrate RAILS_ENV=production
&gt;rake redmine:load_default_data RAILS_ENV=production
||&lt;

-…が、ここでエラー
--rackバージョンが1.2.2はダメ、1.0.1にしてって事らしい
&gt;|winbatch|
rake aborted!
RubyGem version error: rack(1.2.2 not ~&gt; 1.0.1)
||&lt;
-バージョン指定してインストールし直し、再度DBの初期化を実行
&gt;|winbatch|
&gt;gem uninstall rack
&gt;gem install rack -v=1.0.1
||&lt;
-2つ目のコマンド実行時、途中で言語を求められるのでjaを指定
&gt;|winbatch|
(略)
Select language: bg, bs, ca, cs, da, de, el, en, en-GB, es, eu, fi, fr, gl, he,
hr, hu, id, it, ja, ko, lt, lv, mk, mn, nl, no, pl, pt, pt-BR, ro, ru, sk, sl, s
r, sr-YU, sv, th, tr, uk, vi, zh, zh-TW [en]
||&lt;

**起動
&gt;|winbatch|
&gt;ruby script\server -e production
||&lt;

というわけで、一人でRedmine使ってみる。

</body>
</day>
<day date="2011-05-17" title="">
<body>
*1305560776*[Ruby][Windows]MicrosoftOutlookのメールをRubyで操作する！

**あらすじ
+職場のメールはMicrosoftOutlook…添付ファイルとかメール本文を手動で保存するだけの簡単なお仕事がめんどいのでマクロを作った
+ある日、なんか共通マクロを適用してくださいねとか通達がきたので適用した(今まで使っていた自分のマクロは退避した)
+新マクロにはご丁寧にパスワードがかけられていた…編集不可／(^o^)＼
+Outlookからマクロを実行するのは諦めて外部からメールを操作しよう…((もしかしたらググッたら打開策があるのかもしれない。))
+Rubyでできないかな？　…win32oleというものがあるらしい！←今ここ

**参考サイト
-[http://jp.rubyist.net/magazine/?0007-Win32OLE:title]

ドンピシャでした。

**やりたい事
-メール本文を保存したい(ファイル名は件名.txt)
-添付ファイルを保存したい(ファイル名は添付ファイル名のまま)
-上記のファイルをYYYYMMDD_添付ファイル名(拡張子なし)フォルダの中へ格納
-保存場所はマイドキュメントかデスクトップ

こんな感じ
&gt;||
[メール]
件名:subsubject
添付ファイル:tmptmpfile.zip

↓ダウンロード

[マイドキュメント]
└[YYYYMMDD_tmptmpfile]
　├tmptmpfile.zip
　└subsubject.txt
||&lt;

**手順
まずソースはこんな感じ。GitHubは [https://github.com/gosyujin/outlook_for_ruby:title]
&gt;|ruby|
# -*- encoding: UTF-8 -*-
require &quot;win32ole&quot;

# 保存ディレクトリ基準。一応マイドキュメントへ
SaveRootPath = &quot;#{ENV[&quot;USERPROFILE&quot;]}\\My Documents&quot;

class Outlook
	def initialize
		# Outlookに接続
		ol = WIN32OLE::connect(&quot;Outlook.Application&quot;)
		# NameSpace取得(getNameSpaceの引数は&quot;MAPI&quot;のみ)
		@nameSpace = ol.getNameSpace(&quot;MAPI&quot;)
	end

	# EntryIDを元にメールを取得	
	def mail(entryId)
		item = @nameSpace.GetItemFromID(entryId)
		return item
	end
	
	# メールの一覧を取得
	def mails
		# GetDefaultFolder(6)は受信トレイ
		folder = @nameSpace.GetDefaultFolder(6)
		folder.Items.each do |mail|
			GC.start
			yield mail
		end
	end	
end

outlook = Outlook.new
# メールのタイトル、送信日時、EntryID一欄を表示
outlook.mails do |mail|
	#puts &quot;To     :#{mail.To}&quot;
	puts &quot;#{mail.SentOn} | #{mail.Subject.unpack(&quot;a50&quot;)}&quot;
	puts &quot;#{mail.EntryID}&quot;
end

# 入力待ち。保存したいメールのEntryIdを貼りつけ
mail = outlook.mail(STDIN.gets.chomp)
#puts mail.Attachments.ole_methods
#puts mail.Attachments.Item(1).ole_methods

# 添付ファイルのファイル名を取得
file = mail.Attachments.Item(1).FileName
# RootPath下に添付ファイル名のディレクトリ作成
SaveDir = &quot;#{SaveRootPath}\\#{file.split(&quot;.&quot;)[0]}&quot;
Dir.mkdir(SaveDir)

# 添付ファイル保存
mail.Attachments.Item(1).SaveAsFile(&quot;#{SaveDir}\\#{file}&quot;)

# ディレクトリ下にタイトル.txtファイルを作成し送信者、タイトル、本文を書きこむ
File.open(&quot;#{SaveDir}\\#{mail.Subject}.txt&quot;, &quot;w&quot;) do |file|
	file.write &quot;SENDER      : #{mail.SenderName}(#{mail.SenderEmailAddress})\n&quot;
	file.write &quot;TO          : #{mail.To}\n&quot;
	file.write &quot;CC          : #{mail.CC}\n&quot;
	file.write &quot;ReceivedTime: #{mail.SentOn}\n&quot;
	file.write &quot;SUBJECT     : #{mail.Subject}\n&quot;
	file.write &quot;BODY: \n#{mail.Body}\n&quot;
end
||&lt;

基本的に参考サイトの「Ruby から Outlook を操作する」の章の通りに進めば、まず受信トレイの一覧を取ってこれるまではいけます。詰まったのは添付ファイルの扱い…Attachmentsオブジェクトの扱い方でした。

-まず、自作のOutlook#mailを呼び出し特定のメールを取得します。(EntryIDを元に)
&gt;|ruby|
	# EntryIDを元にメールを取得	
	def mail(entryId)
		item = @nameSpace.GetItemFromID(entryId)
		return item
	end
||&lt;
-このメールオブジェクトにAttachmentsが。そしてAttachments.Item(number)に添付ファイルが格納されているようです。Itemのnumberは1から始まっている？　0だとエラーが出たような…。
-Item(number)#FileNameで添付ファイル名が、Item(number)#SaveAsFile(path)で添付ファイルの保存ができました。この辺り。
&gt;|ruby|
file = mail.Attachments.Item(1).FileName
# RootPath下に添付ファイル名のディレクトリ作成
SaveDir = &quot;#{SaveRootPath}\\#{file.split(&quot;.&quot;)[0]}&quot;
Dir.mkdir(SaveDir)

# 添付ファイル保存
mail.Attachments.Item(1).SaveAsFile(&quot;#{SaveDir}\\#{file}&quot;)
||&lt;

**まとめ
-メール本文を保存したい(ファイル名は件名.txt)
--とりあえずできた
-添付ファイルを保存したい(ファイル名は添付ファイル名のまま)
--とりあえずできた
-上記のファイルをYYYYMMDD_添付ファイル名(拡張子なし)フォルダの中へ格納
--YYYYMMDD付加はまだ、フォルダはできた
-保存場所はマイドキュメントかデスクトップ
--マイドキュメントに保存はできた

**TODO
-フォルダ名先頭にYYYYMMDD
-フォルダ名に使用できない文字を全角に置換
-フォルダ存在時の対処
-デスクトップに保存したい

穴だらけだしまだわからない事も多いけど、とりあえず動く所までは行けた！　ので続く。

</body>
</day>
<day date="2011-06-26" title="">
<body>
*1309044393*[Python]PythonでCOBOLファイルの行頭に連番をふる
**あらすじ
限られた環境の中でCOBOLを書かなくてはならかった。(FF2)

COBOL自体はviやらでゴリゴリ書いていけるんですが、ソース書いて間に挿入…を繰り返していると行頭の連番((一連番号領域と呼ぶようです。))にズレが生じていきます。幸いPythonは入っていたので書いてみました。Python初心者なので練習も兼ねる。

**ソース
&lt;script src=&quot;https://gist.github.com/1047001.js?file=cobol.py&quot;&gt;&lt;/script&gt;

**結果
-このCOBOLファイルに
f:id:kk_Ataka:20110626081707j:image
-こうはさがってきた場合
f:id:kk_Ataka:20110626081706j:image
-こう置換できた！
f:id:kk_Ataka:20110626081705j:image


</body>
</day>
<day date="2011-07-09" title="">
<body>
*1310140318*[Windows][Ruby]MicrosoftOutlookのメールをRuby(win32ole)で操作する！ その2
**前回までのあらすじ
[http://d.hatena.ne.jp/kk_Ataka/20110517/1305560776:title]

あれから色々変えたので追記。前回のTODOは…

+フォルダ名先頭にYYYYMMDD
+フォルダ名に使用できない文字を全角に置換
+フォルダ存在時の対処
+デスクトップに保存したい

全部消化。とりあえずOutlook開いて添付ファイル付きのメールファイルをデスクトップに保存するだけの簡単なお仕事はできるようになりました！やった！

**GitHub
[https://github.com/gosyujin/outlook_for_ruby:title]

**なにやってるかの流れ
-まず初期化。
&gt;|ruby|
	# MicrosoftOutlookに接続後初期化処理を行う。
	# MicrosoftOutlookが起動していないと終了する。
	def initialize
		begin
			ol = WIN32OLE::connect(&quot;Outlook.Application&quot;)
		rescue WIN32OLERuntimeError
			putsError(&quot;MicrosoftOutlookが起動していません。&quot;)
			exit
		else
			desktopJa = Kconv.tosjis(&quot;デスクトップ&quot;)
			# NameSpace取得(getNameSpaceの引数は&quot;MAPI&quot;のみ)
			@nameSpace = ol.getNameSpace(&quot;MAPI&quot;)
			# 保存パス指定
			@saveRootPath = &quot;#{ENV[&quot;USERPROFILE&quot;]}\\&quot; + desktopJa + &quot;\\&quot;
			# 保存パスに作成するディレクトリ作成
			@saveDir = &quot;&quot;
			# フォルダ選択番号、ハッシュ
			@folderNum = -1
			@folder = Hash.new
			# メール選択番号、ハッシュ
			@mailNum = -1
			@mail = Hash.new
			# 取得件数のデフォルト値
			@defaultCount = 20
		end
	end
||&lt;
-初期化した後、トップレベル((デフォルトだと個人用フォルダ、保存フォルダみたいな名前かな。ostファイル単位？))のメールフォルダ全部を取得してます。
-コマンドから選べるように{num =&gt; EntryID}のハッシュを作っておきます。{ &quot;1&quot; =&gt; &quot;受信トレイのEntryID&quot; }みたいな。
&gt;|ruby|
	# ルートからフォルダの一覧を取得する
	def folders(count=@defaultCount)
		folders = @nameSpace.Folders
		@folderNum = 1
		folders.each do |f|
			if count &lt; @folderNum then
				break
			end
			GC.start
			puts f.Name
			puts &quot;N | CNT | FolderName&quot;
			findFolder(f.EntryId)
		end
	end
||&lt;
&gt;|ruby|
	# entoryIdを元にフォルダ名を再帰的に取得する
	def findFolder(entryId, count=@defaultCount)
		folder(entryId).Folders.each do |f|
			if count &lt; @folderNum then
				break
			end
			begin
				puts &quot;#{@folderNum} | &quot; + 
				      &quot;#{f.Items.Count}通 | &quot; + 
				      &quot;#{f.Name}&quot;
				      # + &quot; | #{f.Parent.Name}&quot;
				@folder[@folderNum.to_s] = f.EntryId
				@folderNum += 1
				findFolder(f.EntryId)
			rescue =&gt; ex
				putsError(ex)
			end
		end
	end
||&lt;
-フォルダ一覧から一つ選んだら、そのフォルダ内のメール一覧を取得します。
-これもコマンドから選べるように{num =&gt; EntryID}のハッシュを作っておきます。{ &quot;1&quot; =&gt; &quot;とあるメールのEntryID&quot; }みたいな。
&gt;|ruby|
	# entryIdを元に対象フォルダのメール一覧を取得する
	def mails(entryId, count=@defaultCount)
		f = @nameSpace.GetFolderFromID(entryId)
		if f.Items.Count == 0 then
			raise &quot;フォルダにメールがありません。&quot;
		end
		@mailNum = 1
		puts &quot;N | A | SentOn              | Name       | Subject&quot;
		f.Items.each do |mail|
			if count &lt; @mailNum then
				break
			end
			GC.start
			puts &quot;#{@mailNum} | &quot; +
						&quot;#{mail.Attachments.Count} | &quot; +
						&quot;#{mail.SentOn} | &quot; +
						&quot;#{mail.SenderName.unpack('A10')} | &quot; +
						&quot;#{mail.Subject.unpack('A35')}&quot;
			@mail[@mailNum.to_s] = mail.EntryId
			@mailNum += 1
		end
	end
||&lt;
-なお、メールオブジェクト(MailItem)からは以下のような情報を取得できます。
|*MailItem#Attachments.Count|添付ファイルの数|
|*MailItem#SentOn|送信時間|
|*MailItem#SenderName|送信者名|
|*MailItem#Subject|件名|
|*MailItem#To|送信先|
|*MailItem#CC|CC|
|*MailItem#Body|本文|
-メール一覧から一つ選んだら、デスクトップにディレクトリを作って、その中にメール本文と添付ファイルを保存します。
&gt;|ruby|
	# @saveRootPath下にディレクトリを作成する
	def mkdir(mail)
		# 受信日のYYYYMMDD
		receivedTime = Date.strptime(mail.SentOn, &quot;%Y/%m/%d&quot;).strftime(&quot;%Y%m%d&quot;)
		@saveDir = &quot;#{@saveRootPath}&quot; + 
								&quot;#{receivedTime}_#{replace(mail.Subject)}\\&quot;
		if !File.exist?(@saveDir) then
			Dir.mkdir(@saveDir)
		end
	end
||&lt;
&gt;|ruby|
	# @saveDir下にSubject.txtファイルを作成しメール内容を書きこむ
	def saveMail(mail)
		fullPath = &quot;#{@saveDir}#{self.replace(mail.Subject)}.txt&quot;
		File.open(fullPath, &quot;w&quot;) do |file|
			file.write &quot;SENDER      : #{mail.SenderName}&quot; + 
									&quot;(#{mail.SenderEmailAddress})\n&quot;
			file.write &quot;TO          : #{mail.To}\n&quot;
			file.write &quot;CC          : #{mail.CC}\n&quot;
			file.write &quot;ReceivedTime: #{mail.SentOn}\n&quot;
			file.write &quot;SUBJECT     : #{mail.Subject}\n&quot;
			file.write &quot;BODY        : \n#{mail.Body}\n&quot;
			#puts &quot;■本文保存　　　　:#{fullPath}&quot;
			puts &quot;■本文保存　　　　:#{self.replace(mail.Subject)}&quot;
		end
	end
||&lt;
&gt;|ruby|
	# @saveDir下に添付ファイルを保存する
	def saveFile(mail)
		if mail.Attachments.Count != 0 then
			mail.Attachments.each do |item|
				item.SaveAsFile(&quot;#{@saveDir}#{self.replace(item.FileName)}&quot;)
				puts &quot;■添付ファイル保存:#{item.FileName}&quot;
				
				# ファイルが.msgだった場合添付ファイルをぶっこぬき
				# フォルダ名も変更
				if item.FileName =~ /.*\.msg/ then 
					msg = MsgParse.new
					msg.inputMsg(&quot;#{@saveDir}#{self.replace(item.FileName)}&quot;)
					fileName = msg.saveFile(@saveDir)
					renameFolder(mail, fileName)
				end
			end
		else
			puts &quot;添付ファイルはありません。&quot;
		end
	end
||&lt;
-Attachmentオブジェクトからは以下のような情報を取得できます。
|*Attachment#SaveAsFile(PATH)|添付ファイルをPATHへ保存|

-ぶっこぬきのくだりは次回…。

今ソース貼ってたら命名とか特にひどい＞＜
リファクタリングしよー。
</body>
</day>
<day date="2011-08-01" title="">
<body>
*1312213654*[Agile][イベント]BPStudy#47に参加しました
**詳細: [http://atnd.org/events/17717:title]

-サーバの調達が毎回めんどい上に自由に使えるマシンがないので、仮想で立てられるXenServer見てみたい
-アジャイルには縁のない、ウォーターフォール一直線の日々なのでことはじめ的な話を聞いてみたい

というわけで久しぶしにBPStudy参加。

**XenServerによるお手軽開発用サーバ運用 @[http://twitter.com/tokibito:title=tokibito]さん

***Webシステムを作るに当たって

-本番に近い環境、お客さんに見てもらう環境を作りたい
-Wikiや課題管理をしたい

という事で、開発用のサーバを立てたくなる時がよくあると。ただし…

-費用がかかりすぎては本末転倒なのでコストはかけない
-あれもこれも盛り込みすぎてもダメなので、今必要のないものはいらない

この2点を念頭に置いて立てる。

***実際にサーバを立てる

色々な方法があるが…

-レンタル？(共用サーバ、専用サーバ、VPSなど)
-自前？

プロジェクト毎に別の環境(OSなども)を作りたいので共用サーバでは設定的に難しい。1～3ヶ月が1プロジェクトの平均サイクルなので、データセンターなども難しい。じゃあ自前でやろう。

***自前サーバに導入できるXenServerを選んだ。なぜXenServerなの？

-対抗はVPS
-メモリ増やしたりとかはVPSより自前の方が融通がきく
-&lt;span class=&quot;deco&quot; style=&quot;font-weight:bold;&quot;&gt;XenServerが無料になったので！&lt;/span&gt;

***Xen
-オープンソースのフリーウェア
-サーバの仮想化
-ハードウェアの上で直接動作するOS
-Amazon EC2 とかでも使ってる
&gt;||
のっけ方
VM        Xen
ゲストOS
  VM      OS OS OS
ホストOS  XenServer
  HW         HW
||&lt;
-Linux、Windowsを動かせる


***インストール方法
+iso落とす
+XenCenterを管理用端末にインストールする(XenCenterは残念ながらWindows専用)
+ライセンスファイルを取得し、XenCenter経由でライセンスファイルをインストールする

***XenCenter特徴
-GUI
-複数管理も楽
-スナップショットとって壊しても戻せる
-VM単位でバックアップが取れる
-まったく同じ構成の環境も簡単に作れる
-リソース割り当てもXenCenterから簡単に
-別のホストにVMをまるごと移動できる

***めんどい事
-ネットワークの設定…IPを固定したりホスト名変えたり
-なのでスクリプト組んだ https://gist.github.com/1113337
-ユーザ管理もめんどい

***運用管理
-VMの管理はスプレッドシートとかで原始的にやるしかない
-リソースははじめは少なめに作って足りなかったら管理者に言って！　という方針

***今後
-バックアップ強化したい

***ちなみに
-XMLRPCのAPIが使える
-なのでWebアプリに組み込んでWebから起動とかバックアップとかできる

**非アジャイラーにアジャイルという言葉を使わずにアジャイルな見積りについて語ってみた+α @[http://twitter.com/bash0C7:title=bash0C7]さん

***プロジェクトとは

-戦略/ポートフォリオ/プロダクト/リリースにわけられる

***プロジェクトの成功とは

-予定通りの期間、予算で最初の定義したフィーチャを実現できている事
-…でもほんと？　それだけ？
-最初に定義したことが必ずしも最高とは限らない
--すべてうまくいったとしてもメンバーが全員疲弊したら意味ないよね

***失敗する要因

--…いっぱい！
--原因の一つとして見積もりミス
---…でも見積もり無駄じゃないか？
---そうでもない。実施価値判断、優先順位付け、体制検討に見積もりは使える

***とりあえず3つ覚えて帰ってくださいね。不確実性コーン、規模と期間、正確さと労力

--不確実性コーン
---横軸がウォーターフォールにおける各工程(要件定義とか？)、縦軸が誤差
---プロジェクトの最初の段階は誤差が生じやすい
---が、工程が進むことによって少しずつ誤差は収束する傾向にある(最後でだいばくはつする事もある)
---詳しくはぐぐる

***規模と期間

-たとえば、東京-大阪間でかかる時間。のぞみだと2時間40分かかる、こだまだともっとかかる＝期間。乗り物(開発者)によって変わる。
-乗り物(開発者)によってかかる時間(規模)を求め比率で出してみる
-ユーザ追加機能は3くらいだから…削除機能は2？　みたいな

***正確さと労力

-見積もりに時間かけ過ぎてもいかん。見積りなんか天気予報と同じ。
-どんだけやっても100％にはならないので、適度な所で切り上げることも大事

***アジャイルな見積もりと計画づくり

-このあたりの内容は「[http://amzn.to/pc5emT:title=Agileな見積もりと計画づくり(Amazon)]」に乗っている。簡単に絶版になるらしい(！)

***アジャイルの手法？　というか流れ？

|*Product Backlog|これからやることを積んでおく|
|*Sprint Backlog|「これ」を達成するためにやらないといけない「あれ」や「それ」|
|*Sprint Review|成果物確認(1週間ごと)|
|*Test Release|まずは自分の環境 -&gt; そしてチーム内 -&gt; 最終的にお客さんに見せるように|
|*Sprint Reviewの内容|週一の進捗報告。こんなものつくりましたーな成果物デモのみ。コードレビューは別の場で|
-成果物がないと動かせるものがないので進捗報告がモロに出てしまう…だがそれがいい

***その他まとまらないメモ

-MSProjectによる謎の進捗報告
--耳が痛い
-会場にアジャイルやってる人
--…いない
-「慎重にウォーターフォールで開発」
--…言わんとしてることは分かるけど…

-タイムリーにリリース(手っ取り早く適当にうごかす) vs 未来を明らかにする(慎重にすべての事態を調べる)
--うまく共存できないか　-&gt; 順々に明らかにしていけ

-スクラムマスター:スクラムプロセスがうまくいくよう外部からチームを守る
-- -&gt; 具体的にどんな事するんだろう？

**最後に
アジャイル導入は環境的にムリダナと思いつつ、何か一部だけでも取り入れられないかなーと思うものの、なかなか難しい。。。とりあえず、アジャイルあんまり関係ないけど「Excel管理」と「ソースファイルに日付入れてバックアップ」やめればっ！？　っつってSubversionとRedmine導入しようとしてみてます。
また、皆の自由な開発環境((入れても使う人いるのかは知らない。))を手に入れるためXenServerがけっこういい感じというのも知れたのでちょっと導入できるか探ってみようとおもいました。

そして流れるように懇親会へ…。@[http://twitter.com/haru860:title=haru860]さんの顔認識能力に驚愕；；

お疲れさまでした。

</body>
</day>
<day date="2011-08-14" title="">
<body>
*1313326346*[Subversion][備忘録]Subversionのauto-props設定ではまった
SubversionでExcelファイルをコミットしようとするとエラーが発生。
&gt;||
ファイル 'C:\～～～\なんとか管理表.xls' の MIMEタイプ属性はバイナリです
||&lt;
んーなんでだっけー？.xlsファイルのmime-typeを指定してないからかなー？ という事でconfigファイルにmime-type指定。[http://trac.symfony-project.org/wiki/SymfonyRepositoryTips:title] ここを参考に。
&gt;||
 *.xls = svn:mime-type=application/vnd.ms-excel
||&lt;
しかしエラーは変わらず。なんでだー。というか今までは別にmime-type指定しなくてもいけてた気がするのに…と、ここまでやってconfigをよく見ると
&gt;||
 *.xls = svn:mime-type=application/vnd.ms-excel
 * = svn:eol-style=native
||&lt;
こうなってた。全部のファイルにeol-style=nativeしている！！((自分でやったんだけど))　とあるファイル種別&lt;span class=&quot;deco&quot; style=&quot;font-weight:bold;&quot;&gt;以外&lt;/span&gt;、みたいな指定はできない？　っぽいので、横着せずに一拡張子毎に設定を書いてうまく行きました。 
&gt;||
 *.xls = svn:mime-type=application/vnd.ms-excel
 *.sh = svn:eol-style=native
||&lt;

</body>
</day>
<day date="2011-08-23" title="">
<body>
*1314103220*[Ruby][Windows]MicrosoftOutlookで消せなくなったフォルダをwin32ole経由でRubyから消してみる

&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;※&lt;del datetime=&quot;2011-08-25T07:19:37+09:00&quot;&gt;この操作をすると新しくフォルダを追加してもOutlookの画面から見れなくなるようです？win32ole経由だと見えるのになんで…。&lt;/del&gt;→Windows再起動したらなおりました。&lt;/span&gt;

**あらすじ
OutlookのRSSフィード内にどうやっても消えないフォルダが出来てしまい途方に暮れていた。

何がどうなってこうなのかは定かではないんですが、誤って「RSSフィードフォルダ」内にある「RSSフィード記事」に対して「RSSフィードフォルダ」自体をD&amp;Dしてしまった時に生まれたフォルダだと思いまする。。

フィードをまるごと削除しようとしても「権限を見直してからまた挑戦してねてへぺろ(・ω＜)」((一応、権限を確認してみたところ己のアカウントは「所有者」となっており、ファイルの削除もできる設定になっていた。というか他のフィードはサクサク消せる。))とか言って絶対消えてくれないのでOutlookフォルダとかレジストリとかいじらないと消滅させられないのかなーと悩んでいました。

……が、正直どこをどういじればいいかわからないので、最後にダメ元でwin32oleにお願いしてみた。

**解法そして解放
これで消えた……。
&gt;|ruby|
require 'win32ole'
ol = WIN32OLE::connect(&quot;Outlook.Application&quot;)
nameSpace = ol.getNameSpace(&quot;MAPI&quot;)
# RSSFEEDは「RSS フィード」フォルダのEntryId
nameSpace.getFolderFromID(RSSFEED).Folders.Remove(1)
# puts nameSpace.getFolderFromID(RSSFEED).Name =&gt; # RSS フィード
||&lt;
Removeメソッドはインデックスを指定するとの事。
&gt;http://jp.rubyist.net/magazine/?0007-Win32OLE:title&gt;
|*メソッド・プロパティ|説明|
|*Add|指定した名前の Outlook フォルダを追加します。|
|*GetFirst|最初の Outlookフォルダを取得します。|
|*GetNext|次の Outlook フォルダを取得します。|
|*Item|あるインデックスの Outlook フォルダを取得します。|
|*Remove|あるインデックスの Outlook フォルダを削除します。| 
&lt;&lt;
また、インデックスは1から始まりフォルダビューの親フォルダ直下にあるフォルダを1とし2, 3...と並んでいる様子。上記のソースでは「RSS フィード」フォルダ直下の(1番目の)フォルダを削除できた！

EntryIdを見つけるにはFoldersオブジェクトを回してEntryIdを調べる。これを繰り返せば深い階層までいける。
&gt;|ruby|
folders = nameSpace.Folders
folders.each do |f|
  puts f.Name
  puts f.EntryId
end
||&lt;
ありがとうwin32ole…。

**おまけ
Windowsのirbにショートカットでペーストする方法をはじめて知ったのでメモ。((今までは Alt+Space -&gt; 編集 から貼り付けしていた。))
-&lt;span class=&quot;deco&quot; style=&quot;font-weight:bold;&quot;&gt;Shift + insert !!&lt;/span&gt;

</body>
</day>
<day date="2011-09-04" title="">
<body>
*1315146050*[Solaris][備忘録]vmstatとかiostatとかsarとかswapコマンドのメモ
すぐ忘れるのでメモ。あと略称とかも。

**vmstat
-表示
&gt;||
 kthr      memory            page            disk          faults      cpu
 r b w   swap  free  re  mf pi po fr de sr ** ** ** **   in   sy   cs us sy id
||&lt;
-kthr: KernelTHRead
|*r|Run queue|待ち行列内のカーネルスレッド数(mpstatやprstatでも取得可能)|
|*b|?|I/Oで待たされているカーネルスレッド数|
|*w|?|スワップアウトされたカーネルスレッド数|
-memory
|*swap|-|現在利用可能なスワップ領域(ディスク上+メモリ上のスワップ領域)|
|*free|-|空きメモリ領域|
-page
|*re|pageREclaims|freeListに入れられた後、復帰したページ数|
|*mf|MinorFault|HAT faultとAddress Space faultを足した数|
|*pi|PageIn|ページインされたメモリサイズ(キロバイト)|
|*po|PageOut|ページアウトされたメモリサイズ(キロバイト)|
|*fr|FRee?|解放されたメモリサイズ(キロバイト)|
|*de|DEficit|次のプロセスで必要と予測しSolarisが確保する仮想メモリのバッファ|
|*sr|?|ページデーモンによってスキャンされたページ数(0以外だと実行されている)|
-disk 
|*最高4台のデータを表示|読み書きした回数|
-fault
|*in|INterrupt|1秒あたりの割り込み(インタラプト)回数|
|*sy|SYstemcall|1秒あたりのシステムコース回数|
|*cs|CpucontextSwitches|コンテクストスイッチ発生回数|
-cpu
|*us|USertime?|ユーザモードで使用したCPU時間|
|*sy|SYstemtime?|システムモードで使用したCPU時間|
|*id|IDletime|CPUが使用されていなかった時間|

**iostat -D
-表示
&gt;||
    ****          ****          ****          ****
rps wps util  rps wps util  rps wps util  rps wps util
||&lt;
-パラメータ
|*rps|ReadperSec|毎秒何回読み取りしているか|
|*wps|WriteperSec|毎秒何回書き込みしているか|
|*util|UTILization?|各デバイスの使用率|

**iostat -x(全てのディスク情報)
-表示
&gt;||
                 extended device statistics
device    r/s    w/s   kr/s   kw/s wait actv  svc_t  %w  %b
||&lt;
-パラメータ
|*device|-|デバイス名|
|*r/s|ReadperSec|毎秒何回読み取りしているか|
|*w/s|WriteperSec|毎秒何回書き込みしているか|
|*kr/s|KiloReadperSec|毎秒何KB読み取りしているか|
|*kw/s|KiloWriteperSec|毎秒何KB書き込みしているか|
|*wait|-|実行待ち中のI/Oの数|
|*actv|ACTiVe|毎秒処理されているI/Oの数|
|*svc_t|SerViCeTime|平均サービス時間？|
|*%w|?|待ち行列が存在している時間の割合、リーマン和|
|*%b|?|ディスクビジーの時間の割合、リーマン和|

**swap -s
-表示
&gt;||
合計: 7429999k バイト割り当て済み + 99999k 予約済み = 8399999k 使用済み, 5199999k使用可
||&lt;
-パラメータ
|*allocated|割り当て済み|バックアップ用の記憶域として使用可能なスワップ空間を表す1024バイトのブロック数|
|*reserved|予約済み|後から使用できるようにメモリによって回収されるスワップ空間を表す1024バイトのブロック数|
|*used|使用済み|割り当て・予約済みのスワップ空間を表す1024バイトのブロック数|
|*available|使用可|後から予約や割り当てに使用可能なスワップ空間を表す1024バイトのブロック数|

</body>
</day>
<day date="2011-09-07" title="">
<body>
*1315401886*[Ruby][Redmine][SQLite3][Windows][備忘録]Redmineのプラグイン作成のための備忘録と、時々SQLite3
**あらすじ
:今あると幸せになれるもの:チケットのCSVエクスポート機能。ただし、履歴つきで。これがあるといわゆるバグとかPJ課題の管理がRedmineで一元化できExcelの呪縛から解き放てられる……

既に履歴つきCSVエクスポートプラグインは存在しているようです。[http://d.hatena.ne.jp/suer/20101003/1286120294:title]　ただ、履歴の出方が1履歴毎に列を更新なんですよね。。
&gt;||
No, ... ,履歴
1, ... ,#1の履歴,#2の履歴,#3の履歴
2, ... ,#1の履歴,#2の履歴
||&lt;
今自分が抱えている縛り的にはこう出てほしい。
&gt;||
No, ... ,履歴
1, ... ,&quot;#1の履歴
#2の履歴,
#3の履歴&quot;
2, ... ,&quot;#1の履歴,
#2の履歴&quot;
||&lt;
吐き出したときにチケット1つの履歴を1セルの中に収めたい。CSVに改行はどうなんだとか1セルに改行しまくるのはどうなんだとか色々ありますがそこは縛りなので。。。

だもんで、これを機会にRedmineのプラグインはどう作るのかを調べてみました。

**参考サイト
-[http://www.r-labs.org/projects/r-labs/wiki/%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E9%96%8B%E7%99%BA%E3%82%AC%E3%82%A4%E3%83%89:title]
-[http://gihyo.jp/dev/serial/01/ruby/0038:title]

**環境
-WindowsXP
-Redmine 1.0.0(([http://redmine.jp/guide/RedmineInstall/:title]　に準拠。))
--Ruby 1.8.7
--Rails 2.3.5
--Rack 1.0.1
-SQLite3 バージョン失念

**プラグインのスケルトン作成
まずはプラグインのスケルトンというものを作成する。テンプレートみたいなもの？　以下のコマンドで自動生成してくれます。((途中でコマンドプロンプトからConsole2というフリーソフトに切り替えたのでパスの区切りが\だったり/だったりしてます。))
&gt;||
&gt;ruby script\generate redmine_plugin extendCsv
||&lt;
するといきなりエラー。
&gt;||
!!! The bundled mysql.rb driver has been removed from Rails 2.2. Please install
the mysql gem and try again: gem install mysql.
||&lt;
さらに、
&gt;||
LIBMYSQL.dll が見つからなかったため、このアプリケーションを開始できませんでした。…
||&lt;
libmysqlが必要らしい。なんでmysqlなんだろう？　SQLite3使うようにしてなかったっけ？

(略)

あーわかった。config/database.ymlがこうなっていた。
&gt;||
production:
  adapter: sqlite3
  database: db/redmine
 
development:
  adapter: mysql
  database: redmine_development
  host: localhost
  username: root
  password:
  encoding: utf8
||&lt;
productionは変えていたけどdevelopmentはデフォルト=MySQLのままだった。開発時はdevelopmentモードを使うようになっているからmysql探し出したのか。変えてみた。
&gt;||
production:
  adapter: sqlite3
  database: db/redmine
 
development:
  adapter: sqlite3
  database: db/redminedev
||&lt;
再度。
&gt;||
&gt;ruby script\generate redmine_plugin extendCsv
||&lt;
&gt;||
C:\redmine-1.0.0&gt;ruby script\generate redmine_plugin extendCsv
      create  vendor/plugins/redmine_extend_csv/app/controllers
      create  vendor/plugins/redmine_extend_csv/app/helpers
      create  vendor/plugins/redmine_extend_csv/app/models
      create  vendor/plugins/redmine_extend_csv/app/views
      create  vendor/plugins/redmine_extend_csv/db/migrate
      create  vendor/plugins/redmine_extend_csv/lib/tasks
      create  vendor/plugins/redmine_extend_csv/assets/images
      create  vendor/plugins/redmine_extend_csv/assets/javascripts
      create  vendor/plugins/redmine_extend_csv/assets/stylesheets
      create  vendor/plugins/redmine_extend_csv/lang
      create  vendor/plugins/redmine_extend_csv/config/locales
      create  vendor/plugins/redmine_extend_csv/test
      create  vendor/plugins/redmine_extend_csv/README.rdoc
      create  vendor/plugins/redmine_extend_csv/init.rb
      create  vendor/plugins/redmine_extend_csv/lang/en.yml
      create  vendor/plugins/redmine_extend_csv/config/locales/en.yml
      create  vendor/plugins/redmine_extend_csv/test/test_helper.rb
||&lt;
vendor/plugins下にスケルトンができた。この「vendor/plugins/今回作成したディレクトリ」というのがプラグインのルートになるようです。
&gt;||
C:\redmine-1.0.0\vendor\plugins&gt;dir

2011/09/06  09:24    &lt;DIR&gt;          .
2011/09/06  09:24    &lt;DIR&gt;          ..
略
2011/09/06  09:24    &lt;DIR&gt;          redmine_extend_csv
略
||&lt;
プラス、自動で頭に「redmine」付加+スネークケースにリネームしてくれている。これが規約か…？　とりあえずフォルダ構成等は置いておいて、次の章へ。

**init.rbの作成
プラグイン名、作者名などを記述できるが今は特になにも設定せず。後でプラグインを表示さす時に戻って来ます。

ここで一回起動してみる。
&gt;||
&gt;ruby script\server
||&lt;
オプションに-e productionをつけないとdevelopmentモードで起動する。その前に、DBの初期化をしていない場合は初期化を……。(RAILS_ENV=productionを除外)
&gt;||
&gt;rake db:migrate
&gt;rake redmine:load_default_data
||&lt;
そしてRedmine起動 -&gt; 管理 -&gt; プラグインを見に行くと…あった！(写真なし)

**補足:SQLite3あれこれ
ちょっとSQLite3も使ってみる。コンソールから見ることもないだろうとexeはDLしていなかったので今回初。
-まずexe版SQLite3をDL
-実行
&gt;||
# Redmineのconfig/database.ymlで定義し作成したDBへ接続
&gt;sqlite3.exe REDMINE_DB_FILE
SQLite version 3.7.7.1 2011-06-28 17:39:05
Enter &quot;.help&quot; for instructions
Enter SQL statements terminated with a &quot;;&quot;
||&lt;
今回はとりあえず下記の2つのコマンドを覚えて帰る。
|*.table|テーブル一覧を取得する|
|*pragma_table_info(TABLE)|テーブルのカラム情報を取得する|
-.table
&gt;||
sqlite&gt; .table
attachments                          news
auth_sources                         open_id_authentication_associations
boards                               open_id_authentication_nonces
changes                              projects
changesets                           projects_trackers
changesets_issues                    queries
comments                             repositories
custom_fields                        roles
custom_fields_projects               schema_migrations
custom_fields_trackers               settings
custom_values                        time_entries
documents                            tokens
enabled_modules                      trackers
enumerations                         user_preferences
groups_users                         users
issue_categories                     versions
issue_relations                      watchers
issue_statuses                       wiki_content_versions
issues                               wiki_contents
journal_details                      wiki_pages
journals                             wiki_redirects
member_roles                         wikis
members                              workflows
||&lt;
-pragma_table_info(TABLE)
&gt;||
sqlite&gt; pragma table_info(issues);
0|id|INTEGER|1||1
1|tracker_id|integer|1|0|0
2|project_id|integer|1|0|0
3|subject|varchar(255)|1|''|0
4|description|text|0||0
5|due_date|date|0||0
6|category_id|integer|0||0
7|status_id|integer|1|0|0
8|assigned_to_id|integer|0||0
9|priority_id|integer|1|0|0
10|fixed_version_id|integer|0||0
11|author_id|integer|1|0|0
12|lock_version|integer|1|0|0
13|created_on|datetime|0||0
14|updated_on|datetime|0||0
15|start_date|date|0||0
16|done_ratio|integer|1|0|0
17|estimated_hours|float|0||0
18|parent_id|integer|0|NULL|0
19|root_id|integer|0|NULL|0
20|lft|integer|0|NULL|0
21|rgt|integer|0|NULL|0
||&lt;
今回欲しいテーブルはissues, journals, journal_detailsの3つでOKのはずなので((チケットの履歴がjournalテーブルで管理されているのを探すのに手間取ったんだけど、どう探すのがクールなんだろう。チケット画面遷移したときのログで探して辿り着いたんだけど。))これをちょっとメモしておく。
&gt;||
sqlite&gt; pragma table_info(issues);
 0|id              |INTEGER     |1|    |1
 1|tracker_id      |integer     |1|0   |0
 2|project_id      |integer     |1|0   |0
 3|subject         |varchar(255)|1|''  |0
 4|description     |text        |0|    |0
 5|due_date        |date        |0|    |0
 6|category_id     |integer     |0|    |0
 7|status_id       |integer     |1|0   |0
 8|assigned_to_id  |integer     |0|    |0
 9|priority_id     |integer     |1|0   |0
10|fixed_version_id|integer     |0|    |0
11|author_id       |integer     |1|0   |0
12|lock_version    |integer     |1|0   |0
13|created_on      |datetime    |0|    |0
14|updated_on      |datetime    |0|    |0
15|start_date      |date        |0|    |0
16|done_ratio      |integer     |1|0   |0
17|estimated_hours |float       |0|    |0
18|parent_id       |integer     |0|NULL|0
19|root_id         |integer     |0|NULL|0
20|lft             |integer     |0|NULL|0
21|rgt             |integer     |0|NULL|0

sqlite&gt; pragma table_info(journals);
 0|id              |INTEGER     |1|    |1
 1|journalized_id  |integer     |1|0   |0
 2|journalized_type|varchar(30) |1|''  |0
 3|user_id         |integer     |1|0   |0
 4|notes           |text        |0|    |0
 5|created_on      |datetime    |1|    |0

sqlite&gt; pragma table_info(journal_details);
 0|id              |INTEGER     |1|    |1
 1|journal_id      |integer     |1|0   |0
 2|property        |varchar(30) |1|''  |0
 3|prop_key        |varchar(30) |1|''  |0
 4|old_value       |varchar(255)|0|    |0
 5|value           |varchar(255)|0|    |0
||&lt;
これで準備とデータを見ることはできるようになった！　次からは実際にプラグインの中身に入っていく！ 

</body>
</day>
<day date="2011-09-12" title="">
<body>
*1315826713*[Solaris][備忘録]Solarisのパッケージを作ってみる
&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;もう少し学んだ。[http://d.hatena.ne.jp/kk_Ataka/20110914/1316002377:title]&lt;/span&gt;
**あらすじ
-Solarisのパッケージの作り方を学ぶ刻がきた

**参考サイト
-[http://www.syuhitu.org/other/package/package.html:title]
-[http://www.nognog.com/techmemo/Solaris_Package_Creation_HOWTO.php:title]
-http://blogs.oracle.com/yappri/entry/create_solaris_package

**インストール後のファイルを作成する
作業用ディレクトリに移動する。
&gt;||
$ cd /tmp/kk_Ataka
||&lt;
次にインストール後のファイル構成を作る。今回はこんなパッケージを作る。
&gt;||
/home/kk_Ataka/testpkg
/home/kk_Ataka/testpkg/readme.txt
||&lt;
実際に作る。
&gt;||
$ mkdir /home/kk_Ataka/testpkg
$ touch /home/kk_Ataka/testpkg/readme.txt
||&lt;
あと、パッケージ名を考えておく。今回はTESTPKGでいいかな。
**Prototypeファイルを作成する
以下のような内容のファイルを作成し保存する。名前は適当でよいので今回はtext.txtとした。これはまだPrototypeファイルではない。
&gt;||
/home/
/home/kk_Ataka/
/home/kk_Ataka/testpkg/
/home/kk_Ataka/testpkg/readme.txt
||&lt;
次に下記コマンドを実行する。
&gt;||
pkgproto &lt; test.txt &gt; Prototype
||&lt;
成功したら、カレントディレクトリにPrototypeというファイルが出来ている。中身はこんなもん。
&gt;||
d none /home 0755 root root
d none /home/kk_Ataka 0755 kk_Ataka users
d none /home/kk_Ataka/testpkg 0755 kk_Ataka users
f none /home/kk_Ataka/testpkg/readme.txt 0644 kk_Ataka users
||&lt;
左がファイルのタイプ？(d:ディレクトリ、f:ファイル)　noneはなんだろう？作成するファイル、権限、ユーザ名、グループ名かな。
PrototypeファイルができたらPrototypeファイルの先頭に以下を追加する。
&gt;||
i pkginfo
||&lt;
なのでこうなる。
&gt;||
i pkginfo
d none /home 0755 root root
d none /home/kk_Ataka 0755 kk_Ataka users
d none /home/kk_Ataka/testpkg 0755 kk_Ataka users
f none /home/kk_Ataka/testpkg/readme.txt 0644 kk_Ataka users
||&lt;
***どっちがいいのか？
ちなみに、test.txtを一番最下層のファイルのみにするとこうなるが、どっちの方がいいんだろう。後で試してみる。
&gt;||
/home/kk_Ataka/testpkg/readme.txt
||&lt;
&gt;||
f none /home/kk_Ataka/testpkg/readme.txt 0644 kk_Ataka users
||&lt;
**pkginfoファイルを作成する
pkginfoファイルを作成する。中身はパッケージの情報。
&gt;||
PKG=&quot;TESTPKG&quot;
NAME=&quot;This is a Test Package.&quot;
ARCH=&quot;sparc&quot;
VERSION=&quot;1.0&quot;
CATEGORY=&quot;system&quot;
||&lt;

|*PKG|必須|パッケージ名称|
|*NAME|必須|パッケージの名前|
|*ARCH|必須|アーキテクチャ sparc, i386など|
|*VERSION|必須|バージョン|
|*CATEGORY|必須|カテゴリ application, systemなどがあるらしい|

**パッケージ作成
Prototypeファイルとpkginfoファイルを使いパッケージを作成する。
&gt;||
$ pkgmk -r / -d .
## prototype ファイルから pkgmap を作成中です。
## pkginfo ファイルを処理中です。
    警告: パラメータ &lt;PSTAMP&gt; の値は &quot;xxx999999999999999999&quot; に設定されます。
    警告: パラメータ &lt;CLASSES&gt; の値は &quot;none&quot; に設定されます。
## pkgmap の 4 個の項目をボリューム単位で分割しようとしています。
第  1 部-- 21 ブロック, 14 エントリ
## 1 部をパッケージ処理中です。
/tmp/kk_Ataka/TESTPKG/pkgmap
/tmp/kk_Ataka/TESTPKG/pkginfo
/tmp/kk_Ataka/TESTPKG/root/home/kk_Ataka/testpkg/readme.txt
## 制御スクリプトの妥当性検査中です。
## パッケージ処理は完了しました。
||&lt;
pkginfoに設定する項目が足りないせいか警告は出たが問題なさげ。ともかくこれでパッケージはできた！
&gt;||
$ pwd
/tmp/kk_Ataka
$ ls
Prototype   TESTPKG/    pkginfo     test.txt
||&lt;
**パッケージを一つにまとめる
今のままではTESTPKGというディレクトリなので、これをパッケージ(.pkg)としてまとめる。以下のコマンドを使用する。
&gt;||
$ pkgtrans . TESTPKG.pkg
||&lt;
&gt;||
$ pkgtrans . TESTPKG.pkg

The following packages are available:
  1  TESTPKG     This is a Test Package.
                 (sparc) 1.0

Select package(s) you wish to process (or 'all' to process
all packages). (default: all) [?,??,q]:

Transferring &lt;TESTPKG&gt; package instance
$ ls
Prototype     TESTPKG/      TESTPKG.pkg   pkginfo       test.txt
||&lt;
TESTPKGがTESTPKG.pkgにまとまった。
**パッケージをインストールする
最後にインストール。root権限で。
&gt;||
# pkgadd -d TESTPKG.pkg
||&lt;
以上。

</body>
</day>
<day date="2011-09-14" title="">
<body>
*1316002377*[Solaris][備忘録]Solarisのパッケージを作ってみる もう少し学んだ版

**前回までのあらすじ
-[http://d.hatena.ne.jp/kk_Ataka/20110912/1315826713:title]
もう少し調べてみた。

**参考サイト
-[http://dlc.sun.com/osol/g11n/content/PACKINSTALL/ja/ch2buildpkg-11300.html:title]

**必要なもの
:パッケージコンテンツ:ディレクトリ含めたソース一式。ざっくりソース一式とか言ってるのでここは作るものによってもう少しブレークダウンする必要がある
:pkginfoファイル:パッケージ名等のパラメータを定義するファイル。コマンドではなくファイル。
:Prototypeファイル:パッケージのコンポーネント一覧を記載するファイル

**場合によって用意するもの(必須ではない)
:compverファイル:パッケージと互換性がある以前のバージョンのパッケージの定義ファイル
:dependファイル:パッケージと関連があるパッケージの定義ファイル
:spaceファイル:インストールに必要なディスク容量の定義ファイル
:copyrightファイル:インストール時に表示される著作権メッセージの定義ファイル

**パッケージコンテンツの作成
作成ディレクトリと内訳。
&gt;||
$ pwd
/home/kk_Ataka/pkgroot/

MYAPpkg┳bin┳proccess
　　　 ┃　 ┗start
　　　 ┣lib━common.lib
　　　 ┗etc━etcFile
||&lt;
これを/直下にインストールしたい。

**pkginfoファイル作成
/にインストールしたいので、BASEDIRが/でいいのか？
&gt;||
PKG=&quot;MYAPpkg&quot;
NAME=&quot;MyApplyPackage&quot;
ARCH=&quot;sparc&quot;
VERSION=&quot;release 1.0 /svn revision r222&quot;
CATEGORY=&quot;application&quot;
DESC=&quot;This is my test packages.&quot;
VENDOR=&quot;MYAPPLY&quot;
BASEDIR=&quot;/&quot;
||&lt;

***pkginfoファイル書式
|*PKG|必須|32文字以内|パッケージの省略名 英数字で構成、頭に数字は× 予約語(install, new等)は使用できない。最初の4文字は社名などがお勧め|
|*NAME|必須|256文字以内 |パッケージの完全名 英数字で構成 必要なタイミング、インストールするパーティション等を明瞭に記載する((たとえばこんな感じらしい。「Chip designers need CAD application software to design abc chips.  Runs only on xyz hardware and is installed in the usr partition.」))|
|*ATCH|必須|16文字以内|アーキテクチャ 複数対応している場合はカンマ区切り|
|*VERSION|必須|256文字以内|バージョン 先頭に(は×|
|*CATEGORY|必須|16文字以内|カテゴリ 英数字で構成 最低でもsystemかapplicationには属する 複数に属している場合はカンマ区切り|
|*DESC|必須ではない|?|パッケージの説明。description|
|*VENDOR|必須ではない|?|社名など|
|*BASEDIR|必須ではない|?|ファイルのデフォルトの位置|
|*PSTAMP|必須ではない|?|プロダクションのスタンプ。pkgmapで使用されるらしい。デフォルト値は「マシン名YYYYMMDDHHMISS」|

**Prototypeファイル作成
前回はviでパッケージにしたいパスをゴリゴリ書いてPrototypeファイルに変換したが、Prototype DIRで指定したDIRの下のファイルをPrototypeファイルのフォーマットにしてくれた。

&gt;||
$ pkgproto ./MYAPpkg/
d none MYAPpkg 0755 kk_Ataka users
d none MYAPpkg/bin 0755 kk_Ataka users
f none MYAPpkg/bin/proccess 0644 kk_Ataka users
f none MYAPpkg/bin/testbin 0644 kk_Ataka users
d none MYAPpkg/lib 0755 kk_Ataka users
f none MYAPpkg/lib/lib.lib 0644 kk_Ataka users
d none MYAPpkg/etc 0755 kk_Ataka users
f none MYAPpkg/etc/etcfile 0644 kk_Ataka users
||&lt;

これをリダイレクトさせてPrototypeファイルを作成する。
&gt;||
$ pkgproto ./MYAPpkg/ &gt;&gt; Prototype
||&lt;

作成したPrototypeファイルを微調整。pkginfoファイルを読み込むようにするためファイルの先頭に以下を記述する。

&gt;||
i pkginfo
||&lt;

***Prototypeファイル書式
上の生成されたファイルを見る限り、かっこのものはなくてもよさげ
&gt;||
(part) ftype class path (major) (minor) mode owner group
||&lt;

|*part|パッケージ オブジェクトを細かくグループ化できる、省略可能な数値フィールドです。デフォルト値は part 1 です。…らしい。|
|*ftype|オブジェクトの種類を指定するフィールド(後述)|
|*class|オブジェクトが所属するインストールクラス|
|*path|パッケージコンテンツのインストール場所を示すパス(後述)|
|*major|ブロック特殊デバイスまたは文字特殊デバイスのためのメジャーデバイス番号です。…らしい。|
|*minor|ブロック特殊デバイスまたは文字特殊デバイスのためのマイナーデバイス番号です。…らしい。|
|*mode|オブジェクトの実行権限を指定するフィールド|
|*owner|オブジェクトの所有者|
|*group|オブジェクトが所属するグループ|

***ftype
fとdが主に使用する事になるかな。
|*f|実行ファイル等|
|*d|ディレクトリ|
|*l|リンクファイル|
|*s|シンボリックリンク|
|*i|情報ファイル・インストールスクリプト|
|*e|インストール・削除時に編集するファイル|
|*v|ログファイル等の揮発性ファイル|
|*x|このパッケージでのみアクセスできる排他的なディレクトリ|
|*p|名前付きパイプ|
|*c|文字特殊デバイス|
|*b|ブロック特殊デバイス|

***path
絶対パス指定と相対パス指定があり、相対パス指定はさらに集合的再配置と個別再配置にわかれる。今回はBASEDIRを指定しているから集合的再配置ってやつだろうか。

|*絶対パス|Prototypeファイル内に絶対パスで指定 再配置する事はできない pkginfoファイルのBASEDIRは無視される？|
|*集合的再配置|Prototypeファイル内に相対パスで指定 相対パス+pkginfoのBASEDIRを元にインストール？|
|*個別再配置|Prototypeファイル内に相対パスで指定 そのパスの中にインストール変数を指定し、requestスクリプトというものを作成 インストール時に対話的にパスを決定する？|

**パッケージの構築
pkginfoファイルとPrototypeファイルを作成したため、構成はこんな感じになった。
&gt;||
$ pwd
/home/kk_Ataka/pkgroot/

MYAPpkg┳bin┳proccess
　　　 ┃　 ┗start
　　　 ┣lib━common.lib
　　　 ┗etc━etcFile
Prototype
pkginfo
package━
||&lt;
同じパスでパッケージ作ろうとすると警告が出たので、パッケージ保存用にpackageディレクトリ作成。そしてpackageにパッケージ作成。
&gt;||
$ pwd
/home/kk_Ataka/pkgroot/
$ pkgmk -o -r . -d ./package
## prototype ファイルから pkgmap を作成中です。
## pkginfo ファイルを処理中です。
    警告: パラメータ &lt;PSTAMP&gt; の値は &quot;XXXXXXXX20110914163337&quot; に設定されます。
    警告: パラメータ &lt;CLASSES&gt; の値は &quot;none&quot; に設定されます。
## pkgmap の 8 個の項目をボリューム単位で分割しようとしています。
第  1 部-- 37 ブロック, 23 エントリ
## 1 部をパッケージ処理中です。
/home/kk_Ataka/pkgroot/package/MYAPpkg/pkgmap
/home/kk_Ataka/pkgroot/package/MYAPpkg/pkginfo
/home/kk_Ataka/pkgroot/package/MYAPpkg/reloc/MYAPpkg/bin/process
/home/kk_Ataka/pkgroot/package/MYAPpkg/reloc/MYAPpkg/bin/start
/home/kk_Ataka/pkgroot/package/MYAPpkg/reloc/MYAPpkg/etc/etcFile
/home/kk_Ataka/pkgroot/package/MYAPpkg/reloc/MYAPpkg/lib/common.lib
## 制御スクリプトの妥当性検査中です。
## パッケージ処理は完了しました。
||&lt;
パッケージを作るとこうなる。
&gt;||
$ pwd
/home/kk_Ataka/pkgroot/

MYAPpkg┳bin┳proccess
　　　 ┃　 ┗start
　　　 ┣lib━common.lib
　　　 ┗etc━etcFile
Prototype
pkginfo
package━MYAPpkg┳pkginfo
　　　　　　　　┣pkgmap
　　　　　　　　┗reloc━MYAPpkg┳bin┳proccess
　　　　　　　　　　　　　　　　┃　 ┗start
　　　　　　　　　　　　　　　　┣lib━common.lib
　　　　　　　　　　　　　　　　┗etc━etcFile
||&lt;
最後にできたパッケージをひとつに固める。
&gt;||
$ pwd
/home/kk_Ataka/pkgroot/

$ pkgtrans ./package MYAPpkg.pkg

The following packages are available:
  1  MYAPpkg     MyApplyPackage
                 (sparc) release 1.0 /svn revision r222

Select package(s) you wish to process (or 'all' to process
all packages). (default: all) [?,??,q]:
Transferring &lt;MYAPpkg&gt; package instance
||&lt;
まだよくわかっていないが、第一引数には作成したパッケージのあるディレクトリ(package)を指定してやらないといけない。第二引数は相対パスにすると第一引数で指定したパス(package)からの相対になる。((絶対パスは関係ない))

**パッケージインストール、アンインストール
&gt;||
$ pkgadd -d package/MYAPpkg.pkg
||&lt;
-d をつけないと/var/spool/pkgの下を見に行く。
&gt;||
$ pkgrm MYAPpkg
||&lt;
pkginfoファイルのPKGで定義した名称で選択。探す場合はpkginfoコマンドから。

**以下、コマンド。
***pkgproto(コマンド)
Prototypeファイルを作成するコマンド。(まだよくわかってない)
***pkgmk(コマンド)
-pkgmk -o
パッケージに上書き。
-pkgmk -d DEVICE
指定したDEVICE(パスでもいい)にパッケージが作成される。
-pkgmk -r ROOTPATH
パッケージのルートパス指定？

***pkginfo(コマンド)
-pkginfo -i
現在インストールされているパッケージ情報を表示する

&gt;||
application SMCsvn1612                       subversion
system      TESTPKG                          This is a Test Package.
||&lt;

-pkginfo -l PKG
指定したパッケージの内容を表示する。必須項目しか記載しなかったTESTPKGはこんな感じ。
&gt;||
$ pkginfo -l TESTPKG
   PKGINST:  TESTPKG
      NAME:  This is a Test Package.
  CATEGORY:  system
      ARCH:  sparc
   VERSION:  1.0
   BASEDIR:  /
    PSTAMP:  XXXXXXXX20110912170357
  INSTDATE:  9月 12 2011 17:21
    STATUS:  完全にインストールされました。
     FILES:        4 のインストールされたパス名
                   1 の共有パス名
                   3 のディレクトリ
||&lt;
ちなみにzshはこう。
&gt;||
$ pkginfo -l SUNWzsh
   PKGINST:  SUNWzsh
      NAME:  Z shell (zsh)
  CATEGORY:  system
      ARCH:  sparc
   VERSION:  11.10.0,REV=2005.01.08.05.16
   BASEDIR:  /
    VENDOR:  Sun Microsystems, Inc.
      DESC:  Z shell (zsh)
    PSTAMP:  sfw1020050108052452
  INSTDATE:  Jun 13 2011 09:41
   HOTLINE:  Please contact your local service provider
    STATUS:  完全にインストールされました。
     FILES:      594 のインストールされたパス名
                   6 の共有パス名
                   1 のリンクされたファイル
                  32 のディレクトリ
                  30 の実行可能ファイル
                5585 ブロック (概算値) が使われました
||&lt;
Subversionはこんな感じ。
&gt;||
$ pkginfo -l SMCsvn1612
   PKGINST:  SMCsvn1612
      NAME:  subversion
  CATEGORY:  application
      ARCH:  sparc
   VERSION:  1.6.12
   BASEDIR:  /usr/local
    VENDOR:  The Subversion Group
    PSTAMP:  Steve Christensen
  INSTDATE:  7月 22 2011 16:21
     EMAIL:  steve@smc.vnet.net
    STATUS:  完全にインストールされました。
     FILES:      787 のインストールされたパス名
                  32 の共有パス名
                 119 のディレクトリ
                 196 の実行可能ファイル
               32057 ブロック (概算値) が使われま
||&lt;

***pkgadd(コマンド)
-pkgadd PKG
パッケージのインストール
-pkgadd -n PKG
パッケージのインストール(選択肢を全てデフォルトとする)

***pkgrm(コマンド)
-pkgrm PKG
パッケージのアンインストール
-pkgrm -n PKG
パッケージのアンインストール(選択肢を全てデフォルトとする)

</body>
</day>
<day date="2011-09-30" title="">
<body>
*1317312438*[Java][Windows][Ruby][備忘録].msgファイルをパースして中から添付ファイルを抜き出す
正確にはRubyというには微妙なんですが…。

**前回までのあらすじ
-選んだメール(本文と添付ファイル)をまとめてDLしてくるだけの簡単なお仕事はできるようになった
--[http://d.hatena.ne.jp/kk_Ataka/20110517/1305560776:title]
--[http://d.hatena.ne.jp/kk_Ataka/20110709/1310140318:title]
--[http://d.hatena.ne.jp/kk_Ataka/20110823/1314103220:title]

しかし、社内セキュリティGWの設定？　のためかzipとかexeとか怪しい拡張子が付いている添付ファイルは一旦msgファイルに固められるという仕様のためそのままでは添付ファイルが見れない。

こういうメールが
&gt;||
メール
┗添付ファイル.zip
||&lt;

届いた時にはこうなっている 

&gt;||
メール
┗ラップ.msg(＼あやしいファイルだから注意してDLしてね／)
　┗本来の添付ファイル.zip
||&lt;

なんとかRubyからmsgファイル内を解析して添付ファイルを引っこ抜いて保存ができまいか…というのが今回の問題。

**結論
以下のライブラリを駆使して実現しました。
-msgparser(Auxiliiという所のJava用msgファイルパースライブラリ)
-jrb(Java Ruby Bridge: RubyからJavaVMを操作できるライブラリ)

一応Rubyでmsgファイルを解析するライブラリも探してみたのですが、あまりないのかな？　[http://en.sourceforge.jp/projects/sfnet_ssfiledll/downloads/SSFileDLL%20%28MAPI%29/1.0/SSFileDLL-MAPI-1.0-Source.zip/:title] こういうdllは見つけたのですが、MAPIがよくわからん上に説明を見る限りHasAttach(添付ファイルを持ってるか持ってないか？)くらいしかわからない？　ようなのであきらめました。

あと、msgparserはJavaライブラリなので当初はJRubyで書けば何とかなるかなと思ってました。簡単なサンプルは [http://www.rgagnon.com/javadetails/java-0613.html:title] このページのような感じ。が、今まで書いたコードをJRubyで実行すると失敗してしまったので方向転換；；　RubyからJavaVMを操作できるrjbというライブラリを使う事に。

**ダウンロード・インストール
-msgparser
--[http://auxilii.com/msgparser/Page.php?id=16000:title] よりmsgparserをDL
---[http://poi.apache.org/poifs/:title]や[http://www.freeutils.net/source/jtnef/:title]とかが必要になるのですが、上記のmsgparse.zipの中に全部入ってます((complete package including source code, binaries and third party librariesと書いてあった))
--distよりmasparser-X.XX.jarを、libよりpoi-X.X-YYYYMMDD.jarとtnef-X.X.X.jarを取得し、同じプロジェクト内にコピー。とりあえずlibフォルダを作ってそこに入れました
-rjb
--gemで。ただし、当然というかJavaが入っていないと失敗する模様。環境変数JAVA_HOMEも設定している必要があるみたい
&gt;||
gem install rjb
||&lt;

**ソース
ソース全体は [https://github.com/gosyujin/outlook_for_ruby:title] 。msgParse.rbが本体、ライブラリがlibに入っています。

使い方としてはMsgParseをnewしてinputMsgで.msgファイルのパス指定、saveFileで添付ファイルぶっこぬいて出力先に保存としたい。こんな感じで。
&gt;|ruby|
    msg = MsgParse.new
    msg.inputMsg(MSGFILE)
    msg.saveFile(SAVEDIR)
||&lt;
という事でMsgParser((ライブラリと同じ名前にしてしまった…。))クラスを作成。ソースは [https://github.com/gosyujin/outlook_for_ruby/blob/master/msgParse.rb:title] 。まずは初期化から。
&gt;|ruby|
    include Rjb
    
    # JavaクラスのImport、Jarの読み込み
    # 初期化処理を行う
    def initialize
        #Rjb::load('./')
        initJavaClass()
        addJar()
        @msg = nil
    end
    
    # JavaのクラスをImportする
    def initJavaClass()
        @system = import(&quot;java.lang.System&quot;)
#        @string = import(&quot;java.lang.String&quot;)
#        @list = import(&quot;java.util.List&quot;)
        @fileOutputStream = import(&quot;java.io.FileOutputStream&quot;)
    end
    
    # Jarを読みこむ
    def addJar()
        Rjb::add_jar(File.expand_path('lib/tnef-1.3.1.jar'))
        Rjb::add_jar(File.expand_path('lib/poi-3.2-FINAL-20081019.jar'))
        Rjb::add_jar(File.expand_path('lib/msgparser-1.10.jar'))
        @msgParser = import(&quot;com.auxilii.msgparser.MsgParser&quot;)
        @fileAttachment = import(&quot;com.auxilii.msgparser.attachment.FileAttachment&quot;)
    end
||&lt;
java.lang.Systemとかjava.lang.Stringとか使う予定のあるクラスは全て明示的にimportしてやる必要がある。今回はjava.lang.Systemとjava.io.FileOutputStreamを使用する。
次にライブラリを読み込む。msgparserをDLしたときのtnef, poi, msgparserを追加する。追加後にcom.auxilii.msgparser.MsgParserとcom.auxilii.msgparser.attachment.FileAttachmentをimportする。※add_jarの順番でエラーになる。-classpathの記述？　に順番って関係あるんだっけ？
これで今回使用したいクラスはRuby上から呼び出せるようになりました。次はファイル読み込み。
&gt;|ruby|
    # .msgファイルを読みこむ
    def inputMsg(path)
        @msg = @msgParser.new.parseMsg(path)
    end
||&lt;
parseMsg(PATH)メソッドを使用し.msgファイルを読み込めるように。最後は.msgファイル内から添付ファイルをぶっこぬく！
&gt;|ruby|
    # .msgファイルの添付ファイル数をカウントする
    def getAttachmentSize()
        @msg.getAttachments.size
    end
    
    # 添付ファイルをpathに保存する
    # 返り値は保存した添付ファイル名(の一つ)
    def saveFile(path)
        fileName = &quot;&quot;
        if getAttachmentSize() != 0 then
            for i in 0..getAttachmentSize - 1
                file = @msg.getAttachments.get(i)
                begin
                    fileName = file.getLongFilename
                rescue =&gt; ex
                    puts &quot;File name is including WAVE DASH?:#{ex}&quot;
                    fileName = file.getFilename
                end
                out = @fileOutputStream.new(path + fileName)
                out.write(file.getData)
                puts &quot;■.msgファイル抽出:#{fileName}&quot;
                out.close
            end
        else
            puts &quot;no temp file.&quot;
        end
        return fileName
    end
end
||&lt;
はじめにgetAttachments.get(i)で添付ファイルを取得します。次に保存する時のファイル名として添付ファイル名を取得します。ファイル名を取得できるメソッドは2種類あります。getLongFilenameはファイル名をそのまま取得でき、getFilenameはファイル名を短縮して取得できます。((TODOとして、添付ファイル名に波ダッシュが入っているとエラーになるので要調査…。))

ここまでやったら最後はFileOutputStream#writeにgetDataで取得した添付ファイルのバイト配列を渡してやればOK！

</body>
</day>
<day date="2011-10-03" title="">
<body>
*1317642705*[Ruby][備忘録]Rubyのgemバージョン管理ができるBundlerを実行できなかった
**あらすじ
-gemでライブラリを入れまくり、updateしまくりでバージョンの不整合が起こり復旧不可能になった
-同じ過ちは繰り返したくない…ので今度はうまく管理したい
-Bundlerを使えばgemのバージョン管理ができるみたい
--設定さえあればどの環境も同じにする事が出来る？
Bundlerを入れてみます。

**環境
-Windows XP
-Ruby 1.8.7
--RubyのパスはC:\ruby
-必要なDLLなど
--zlib.dll
--readline.dll
--iconv.dll
--iconv.lib
--iconv_a.lib
--ssleay32.dll
--libeay32.dll

**手順
***Rubygemsインストール
-[http://rubyforge.org/frs/?group_id=126:title]よりRubygemsをDL。バージョンは1.7.2
--gemは入っていないとするので、zipファイルからインストールする。
&gt;||
$ ruby setup.rb
RubyGems 1.7.2 installed

・ｿ=== 1.7.2 / 2011-04-05

 * 1 Bug Fix:
   * Warn on loading bad spec array values (ntlm-http gem has nil in its cert
     chain)


------------------------------------------------------------------------------

RubyGems installed the following executables:
        C:/ruby/bin/gem
||&lt;
-バージョン、環境を確認
&gt;||
$ gem -v
1.7.2

$ gem env
RubyGems Environment:
  - RUBYGEMS VERSION: 1.7.2
  - RUBY VERSION: 1.8.7 (2010-12-23 patchlevel 330) [i386-mswin32]
  - INSTALLATION DIRECTORY: C:/ruby/lib/ruby/gems/1.8
  - RUBY EXECUTABLE: C:/ruby/bin/ruby.exe
  - EXECUTABLE DIRECTORY: C:/ruby/bin
  - RUBYGEMS PLATFORMS:
    - ruby
    - x86-mswin32-60
  - GEM PATHS:
     - C:/ruby/lib/ruby/gems/1.8
     - %USERPROFILE%/.gem/ruby/1.8
  - GEM CONFIGURATION:
     - :update_sources =&gt; true
     - :verbose =&gt; true
     - :benchmark =&gt; false
     - :backtrace =&gt; false
     - :bulk_threshold =&gt; 1000
  - REMOTE SOURCES:
     - http://rubygems.org/
||&lt;
-C:\ruby\binにgemコマンドが格納される
-C:\ruby\lib\ruby\site_ruby\1.8がgemのパスとなっており、rbconfigやrubygemsが作成されている
--rubyフォルダ下と%USERPROFILE%下に.gemフォルダも定義されている。各ユーザ用かな？
※proxyエラー等が起こった場合は~/に.gemrcファイルを作成し、http-proxy: PROXY_URLと記述すればよい？

***Bundlerインストール
-Bundlerは最新版を導入する(0.X系と1.X系で大きく変わったところがあるらしいので気をつける)
&gt;||
$ gem install bundler
Fetching: bundler-1.0.20.gem (100%)
Successfully installed bundler-1.0.20
1 gem installed
Installing ri documentation for bundler-1.0.20...
Installing RDoc documentation for bundler-1.0.20...
||&lt;
-bundleコマンドが実行できるようになるが、今うってもエラーが出る。
&gt;||
$ bundle install
Could not locate Gemfile
||&lt;
Gemfileを作成する必要があるようだ。
***Gemfile作成
-書式等は [http://gembundler.com/gemfile.html:title] 参照。
-少なくとも一つはRubygemsのサーバURLを記述する必要がある
&gt;||
source :rubygems
source &quot;http://rubygems.org&quot;
||&lt;
-次にインストールするgemとバージョンを指定する
&gt;||
gem 'rails', '2.3.5'
||&lt;
-バージョンの指定方法は以下仮でまとめ
|*記載なし|最新版|
|*'1.5'||1.5|
|*'&gt;=1.5'|1.5以上の最新版？|
|*'~&gt;1.5'|1.5以上2.0未満？|
-プロジェクトに配備
--プロジェクトのルートフォルダにGemfileを配備(redmineで使おうと思ったらredmine/Gemfileとする)
***gemインストール
-下記コマンドでPATHへgemがインストールされる
&gt;||
bundle install PATH
||&lt;
-お勧めはプロジェクトルート/vendor/bundleらしい
&gt;||
$ bundle install vendor/bundle
Fetching source index for http://rubygems.org/
Fetching source index for http://rubygems.org/
Installing rake (0.9.2)
Installing activesupport (2.3.5)
Installing rack (1.0.1)
Installing actionpack (2.3.5)
Installing actionmailer (2.3.5)
Installing activerecord (2.3.5)
Installing activeresource (2.3.5)
Installing rails (2.3.5)
Using bundler (1.0.20)
Your bundle is complete! It was installed into ./vendor/bundle
The path argument to `bundle install` is deprecated. It will be removed in version 1.1. Please use `bundle install --path vendor/bundle` instead.
||&lt;
するとこんな感じでファイルが作成される。
&gt;||
redmine # redmineルートフォルダ
┃
┣(略)redmine系のファイルとフォルダ
┃
┣Gemfile # 今作ったGemfile
┣Gemfile.lock # Gemfileからバージョンの整合性などを確認している？
┣.bundle
┃┗config # bundleのコンフィグファイル
┗vendor
　┃
　┣(略)元々あるpluginなど
　┃
　┗bundle # インストールしたgem格納フォルダ
　　┗ruby
　　　┗...
||&lt;
-ところで、インストール後のコメントを見るとこのbundle install PATHコマンドは1.1でなくなる予定のようで、今後はきちんと--pathオプションを指定しなければならないらしい
&gt;||
bundle install --path vendor/bundle
Fetching source index for http://rubygems.org/
Fetching source index for http://rubygems.org/
Installing rake (0.9.2)
Installing activesupport (2.3.5)
Installing rack (1.0.1)
Installing actionpack (2.3.5)
Installing actionmailer (2.3.5)
Installing activerecord (2.3.5)
Installing activeresource (2.3.5)
Installing rails (2.3.5)
Using bundler (1.0.20)
Your bundle is complete! It was installed into ./vendor/bundle
||&lt;
-また、システムに同じgemが入っていたらシステム優先とする--disable-shared-gemsオプションというものがあるようだが、最新バージョンではやらなくてよいみたい？　「--pathオプション使え」と出てる
&gt;||
 bundle install vendor/bundle --disable-shared-gems
The disable-shared-gem option is no longer available.

Instead, use `bundle install` to install to your system,
or `bundle install --path path/to/gems` to install to an isolated
location. Bundler will resolve relative paths relative to
your `Gemfile`.
||&lt;

**確認(ここから先は失敗したので自分用備忘録…)
-gemにはbundler以外なし
&gt;||
gem list

*** LOCAL GEMS ***

bundler (1.0.20)
||&lt;
-bundlerで導入したgemを確認するにはプロジェクトのルートフォルダ下で以下コマンド
&gt;||
bundle show
Gems included by the bundle:
  * actionmailer (2.3.5)
  * actionpack (2.3.5)
  * activerecord (2.3.5)
  * activeresource (2.3.5)
  * activesupport (2.3.5)
  * bundler (1.0.20)
  * rack (1.0.1)
  * rails (2.3.5)
  * rake (0.9.2)
||&lt;
***プロジェクトでbundle内のgemを読み込むようにする
今回はredmineを参考にしてみる
-config/boot.rbを修正
-config/preinitializer.rbを作成

-i18nが足りないと言われたのでGemfileに足し再度インストール
&gt;||
ruby script\server -e production
Missing the i18n 0.4.2 gem. Please `gem install -v=0.4.2 i18n`
||&lt;
&gt;||
gem 'rails', '2.3.5'
gem 'i18n', '0.4.2' # Add
||&lt;

&gt;||
$ ruby script\server -e production
C:/ruby/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:32:in `gem_original_require': no such file to load -- tree (MissingSourceFile)
        from C:/ruby/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:32:in `require'
||&lt;
うーん。treeがない…らしい？　前回インストールしてたんだったっけ？

gem install tree

&gt;||
$ ruby script\server -e production
=&gt; Booting WEBrick
=&gt; Rails 2.3.5 application starting on http://0.0.0.0:3000
C:/redmine/config/../vendor/rails/railties/lib/rails/gem_dependency.rb:119:Warning: Gem::Dependency#version_requirements is deprecated and will be removed on or after August 2010.  Use #requirement
C:/ruby/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:31:in `gem_original_require': no such file to load -- spreadsheet (MissingSourceFile)
||&lt;

spreadsheetも足りない？

&gt;||
gem install spreadsheet
||,

&gt;||
$ ruby script\server -e production
=&gt; Booting WEBrick
=&gt; Rails 2.3.5 application starting on http://0.0.0.0:3000
C:/redmine/config/../vendor/rails/railties/lib/rails/gem_dependency.rb:119:Warning: Gem::Dependency#version_requirements is deprecated and will be removed on or after August 2010.  Use #requirement
Missing these required gems:
  rubytree
  coderay  ~&gt; 0.9.7

You're running:
  ruby 1.8.7.330 at C:/ruby/bin/ruby.exe
  rubygems 1.3.7 at %userprofile%/.gem/ruby/1.8, C:/ruby/lib/ruby/gems/1.8

Run `rake gems:install` to install the missing gems.
||&lt;

まだ足りん？rubytreeとcoderay？　Run rake gems:installするといいと書いてある…。

&gt;||
$ rake gems:install
rake/rdoctask is deprecated.  Use rdoc/task instead (in RDoc 2.4.2+)
WARNING: 'task :t, arg, :needs =&gt; [deps]' is deprecated.  Please use 'task :t, [args] =&gt; [deps]' instead.
    at C:/redmine/lib/tasks/email.rake:170
gem.bat install rubytree

unrecognized option `--files'

For help on options, try 'rdoc --help'

========================================================================

 Thank you for installing rubytree.

              WARNING: SIGNIFICANT API CHANGE in 0.8.0 !
              ------------------------------------------

 Please note that as of 0.8.0 the CamelCase method names are DEPRECATED.

 The new method names follow the ruby_convention (separated by '_').

 The old CamelCase methods still work (a warning will be displayed),
 but may go away in the future.

 Details of the API changes are documented in the API-CHANGES file.

========================================================================
Successfully installed rubytree-0.8.1
1 gem installed
Installing ri documentation for rubytree-0.8.1...
gem.bat install coderay --version &quot;~&gt; 0.9.7&quot;
Successfully installed coderay-0.9.8
1 gem installed
Installing ri documentation for coderay-0.9.8...
Installing RDoc documentation for coderay-0.9.8...
||&lt;

…ここで一回断念。どうもRedmineにもともと入っていたファイルを消してしまっている疑惑が発覚したのだが、Redmineをいれなおしてもbundlerからだと起動できなかった……。

うーん。普通のプロジェクトだと使えたのでローカルに存在しているRedmineのどこかでしくってると思うんだけど……。
</body>
</day>
<day date="2011-10-04" title="">
<body>
*1317660186*[Ruby][備忘録]複数のRuby環境の管理・切替ができるpikを実行できた
**あらすじ
-[http://d.hatena.ne.jp/kk_Ataka/20111003/1317642705:title]にてBundlerでのgem管理に失敗した
-別の方法はないかと調べているとRubyをバージョンごとに管理できるrvmとpikを見つけた
--とりあえず別出ししておいて安定させたい環境と色々試行錯誤したい環境に分けられる？
-Windows環境なのでpikを使ってみようとインストールしてみた

**インストール手順(gem)
※gemでは実際にRubyをinstallする段階の所で失敗したので、実際は次のmsiを使ってインストールした。
-gemでOK
&gt;||
gem install pik
||&lt;
-pikをインストールするにはpik_installコマンドを実行する必要があるが、フォルダを作成し、PATHに追加してから実行してくれと言われる
&gt;||
$ pik_install
Usage:  pik_install path\to\install

You should install to a directory that is in your system path,
or add the directory to your system path.  Do not install to
your ruby's bin directory because pik will remove it from the
path when switching versions.

Example:

  C:\&gt;path

  PATH=C:\tools;C:\ruby\Ruby-186-p383\bin;C:\WINDOWS\system32;...

  C:\&gt;pik_install C:\tools
||&lt;
-C:\pikフォルダ作成しPATHに追加し再度
&gt;||
$ pik_install C:\pik
Thank you for using pik.

mkdir -p C:\pik
mkdir -p %userprofile%/.pik
Installing to C:\pik

cp C:/ruby/lib/ruby/gems/1.8/gems/pik-0.2.8/tools/pik_runner.exe C:\pik
cp C:/ruby/lib/ruby/gems/1.8/gems/pik-0.2.8/tools/pik.bat C:\pik
cp C:/ruby/lib/ruby/gems/1.8/gems/pik-0.2.8/tools/pik.ps1 C:\pik

creating %USERPROFILE%/.pik/.pikrc

pik is installed

The directory you installed to is not in the sytem path.
C:\pik

You will need to add it.


if you want to use pik with git bash, add the following line to your ~/.bashrc:

  [[ -s $USERPROFILE/.pik/.pikrc ]] &amp;&amp; source $USERPROFILE/.pik/.pikr
||&lt;
-ホームとC直下にファイルが作成された

**インストール手順(msi)
※gemから入れるとRubyをinstallする段階でエラーが表示された。
&gt;||
$ pik install ruby -v 1.9.2-P136
pik 0.2.8

There was an error.
 Error: private method `gsub' called for nil:NilClass

  in: pik/commands/install_command.rb:24:in `execute'
  in: pik_runner:33
||&lt;
-他のバージョンでもだめだった。ぐぬぬ。調べてみるとgemからではなくmsiからインストールした方がよいとの事なので一回gem uninstallしてmsiからインストールする事に。。。
&gt;http://d.hatena.ne.jp/miau/20110106/1294325095&gt;
    * [https://github.com/vertiginous/pik/downloads:title]

から .msi をダウンロードして実行してください。今回は pik 2.8.0 を使いました。
&lt;&lt;
-msiからインストールする場合Rubyが空っぽの場合からでもいけるようなので既存のRubyを削除。。
-そしてmsi実行
pikコマンドを打つ際にRubyが一つも入っていないとエラーになるため、%USERPROFILE%\.pik\config.ymlにダミーのバージョンを記載する必要がある。
&gt;||
--- 
&quot;000: ruby 0.0.0 (dummy ruby for pik)&quot;: 
  :path: !ruby/object:Pathname 
    path: C:/pik/dummy
--- {}
||&lt;
で、使用法へ。

**使用法
-現在インストールされているRuby表示
&gt;||
$ pik list
 * 187: ruby 1.8.7 (2010-12-23 patchlevel 330) [i386-mswin32]
||&lt;
-インストール可能なRuby一覧表示。Ruby1.8から1.9からJRubyまで
&gt;||
$ pik list -r
---
DevKit:
  3.4.5r3: http://rubyforge.org/frs/download.php/66888/devkit-3.4.5r3-20091110.7z
IronRuby:
  0.3.0: http://rubyforge.org/frs/download.php/53552/ironruby-0.3.0.zip
  0.5.0: http://rubyforge.org/frs/download.php/57126/ironruby-0.5.0.zip
  0.6.0: http://rubyforge.org/frs/download.php/59717/ironruby-0.6.0.zip
  0.9.0: http://rubyforge.org/frs/download.php/61382/ironruby-0.9.0.zip
  0.9.1: http://rubyforge.org/frs/download.php/64504/ironruby-0.9.1.zip
  0.9.2: http://rubyforge.org/frs/download.php/66606/ironruby-0.9.2.zip
  &quot;1.0&quot;: http://rubyforge.org/frs/download.php/70179/ironruby-1.0.zip
  1.0-rc1: http://rubyforge.org/frs/download.php/67955/ironruby-1.0-rc1.zip
  1.0-rc2: http://rubyforge.org/frs/download.php/69180/ironruby-1.0-rc2.zip
  1.0.0rc: http://rubyforge.org/frs/download.php/69853/ironruby-1.0.0rc.zip
  1.0rc3: http://rubyforge.org/frs/download.php/69665/ironruby-1.0rc3.zip
  1.0v4: http://rubyforge.org/frs/download.php/70181/ironruby-1.0v4.zip
JRuby:
  1.5.6: http://jruby.org.s3.amazonaws.com/downloads/1.5.6/jruby-bin-1.5.6.zip
  1.6.4: http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby-bin-1.6.4.zip
Ruby:
  1.8.7-p302: http://rubyforge.org/frs/download.php/72087/ruby-1.8.7-p302-i386-mingw32.7z
  1.8.7-p330: http://rubyforge.org/frs/download.php/73720/ruby-1.8.7-p330-i386-mingw32.7z
  1.8.7-p334: http://rubyforge.org/frs/download.php/74296/ruby-1.8.7-p334-i386-mingw32.7z
  1.8.7-p352: http://rubyforge.org/frs/download.php/75108/ruby-1.8.7-p352-i386-mingw32.7z
  1.9.1-p429: http://rubyforge.org/frs/download.php/71496/ruby-1.9.1-p429-i386-mingw32.7z
  1.9.1-p430: http://rubyforge.org/frs/download.php/72076/ruby-1.9.1-p430-i386-mingw32.7z
  1.9.2-p0: http://rubyforge.org/frs/download.php/72160/ruby-1.9.2-p0-i386-mingw32.7z
  1.9.2-p136: http://rubyforge.org/frs/download.php/73723/ruby-1.9.2-p136-i386-mingw32.7z
  1.9.2-p180: http://rubyforge.org/frs/download.php/74299/ruby-1.9.2-p180-i386-mingw32.7z
  1.9.2-p290: http://rubyforge.org/frs/download.php/75128/ruby-1.9.2-p290-i386-mingw32.7z
  1.9.2-rc1: http://rubyforge.org/frs/download.php/71498/ruby-1.9.2-rc1-i386-mingw32.7z
  1.9.2dev-preview3-1: http://rubyforge.org/frs/download.php/71175/ruby-1.9.2dev-preview3-i386-mingw32-1.7z
||&lt;
-pikフォルダへRubyインストール
&gt;||
$ pik install ruby -v 1.9.2-p0
pik 0.2.8
** Downloading:  http://rubyforge.org/frs/download.php/72160/ruby-1.9.2-p0-i386-mingw32.7z
   to:  %userprofile%\.pik\downloads\ruby-1.9.2-p0-i386-mingw32.7z

ruby-1.9.2-p0-i386-mingw32.7z: 100% |oooooooooo|   5.7MB/  5.7MB Time: 00:00:20

You need the 7zip utility to extract this file.
Would you like me to download it? (yes/no)  |yes|
y [ENTER]
7za465.zip: 100% |ooooooooooooooooooooooooooooo| 352.5KB/352.5KB Time: 00:00:00

** Extracting:  %USERPROFILE%\.pik\downloads\ruby-1.9.2-p0-i386-mingw32.7z
   to:  %USERPROFILE%\.pik\rubies\Ruby-192-p0
done

** Adding:  192: ruby 1.9.2p0 (2010-08-18) [i386-mingw32]
 Located at:  %USERPROFILE%\.pik\rubies\Ruby-192-p0\bin
||&lt;
お、行けた。((config.ymlを開きっぱにしている場合、Permission deniedがでる))
-再度確認。1.9が入ってる。
&gt;||
 $ pik list
 * 187: ruby 1.8.7 (2010-12-23 patchlevel 330) [i386-mswin32]
   192: ruby 1.9.2p0 (2010-08-18) [i386-mingw32]
||&lt;
&lt;del datetime=&quot;2011-11-24T21:41:19+09:00&quot;&gt;最後にswitch or sw or use コマンドを使用する事でrubyのバージョンを切り替えられる……はずだったのだが、どうにも試した環境だと変わらなかった。何故変わらんのだー。ので、今回の導入は見送りして少し調べないといかん。&lt;/del&gt;

***&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;20111124追記&lt;/span&gt;

……と、切り替わらなかったのが前回までの話。原因は主に二つあり、なぜ切り替わらなかったのかわかるためにはpikの動きを追う必要があった。

+環境変数がおかしかった
+コマンドプロンプトではなくnyaosを使っていた

この記事では1を解決させる。nyaosは [http://d.hatena.ne.jp/kk_Ataka/20111124/1322138944:title] で。

-[http://d.hatena.ne.jp/miyamuko/20100905/nyaos_with_pik:title]

2-1. pik_runner.exe の処理を読むと最後に切り替えたRubyのパスを環境変数に追加するために%USERPROFILE%\.pik\pik.batを実行していると書いている。

-ただし、このpik.batはインストールしてpik listとかって実行する時のpik.batとは違う
--そのpikはC:\pikとかに入っているはず

知らなかった……こんなbatファイルが生成されているとは。このSET PATHを見ると……ギャーーー！！　なんかpath変数の頭の方に%PATH%が入っていて、pikで追加したRuby(%USERPROFILE%\.pik\rubies\Ruby-192-p0\binなど)より既存Ruby(C:\ruby\binなど)のパスが前におるじゃないかぁぁぁ！　というわけで、path変数から%PATH%を取り除いたのが一つ。これでコマンドプロンプトからは動いた！

**その他
今回は使わなかったコマンドたち
既に入っているRubyをpikへ追加するaddと削除するuninstall
&gt;||
$ pik add Rubyのパス(ruby.exeのある場所)
$ pik uninstall ruby -v 187
||&lt;
※コマンドはバージョンによって若干記述が違う様子。特にsw or switch or useあたり？

</body>
</day>
<day date="2011-10-08" title="">
<body>
*1318068887*[Unix][備忘録][Dropbox][さくらVPS]さくらVPSにインストールしたDropboxのEnable LAN syncオプションをOFFにする

**あらすじ
DropboxにはEnable LAN syncというオプションがあり、これをONにすると同じLAN内のマシンはインターネットを経由しないで同期ができる。
f:id:kk_Ataka:20111008190858j:image
ただし、17500ポートに向けてUDPパケットがやまほど投げているようで、同じLAN内に自分以外のマシンがある状態でこのオプションをONにしていると近隣の方へやまほどパケットを投げまくりで非常に迷惑がかかります……。基本的にDropboxのオプションからEnable LAN sync(LAN同期を有効にする)をOFFにすればよい。

……のだが、CUIからDropboxをインストールしている場合は少し手順を踏んでこのオプションを切る必要があります。

**参考サイト
-[http://d.hatena.ne.jp/otn/20110502/p1:title]
-[http://blog.7kai.org/2011/04/dropbox-lan-sync-disable/:title]

というか、前回の記事[http://d.hatena.ne.jp/kk_Ataka/20110423/1303489798:title] でインストールするときに参考にしたサイトにこの問題が書いてあった……。

&gt;http://wiki.dropbox.com/TipsAndTricks/TextBasedLinuxInstall#SuppressLANSyncbroadcasts&gt;
To stop dropbox from sending LAN Sync broadcasts every 30 seconds over port 17500 (http://forums.dropbox.com/topic.php?id=16253) see DropboxAddons/DisableLanSync
&lt;&lt;

**必要環境
|*Python|2.6|

**スクリプトDL
-http://wiki.dropbox.com/DropboxAddons/PyDropboxValues から [http://dl.dropbox.com/u/340607/pyDropboxValues.py:title=pyDropboxValues.py] をDLする
--設定値を表示できる
-http://wiki.dropbox.com/DropboxAddons/DisableLanSync から [http://dl.dropbox.com/u/340607/dropbox_set_lansync.py:title=dropbox_set_lansync.py] をDLする
--LAN syncオプションを切り替える

**手順
-pyDropboxValue.pyで設定をバックアップする
&gt;|python|
$ PYTHON2.6 pyDropboxValues.py _backup
Backed up 'config.db' to '/home/kk_Ataka/.dropbox/backup_1_config.db'
||&lt;
--LAN syncオプションを確認する
&gt;|python|
$ PYTHON2.6 pyDropboxValues.py | grep p2p_enable
p2p_enable = 1 # LAN syncオプションはp2p_enableというらしい。1でON。
||&lt;
-dropbox_set_lansync.pyでEnable LAN syncオプションをOFFにする
&gt;|python|
$ PYTHON2.6 dropbox_set_lansync.py off # 特にレスポンスは返ってこないが…。
||&lt;
--LAN syncオプションを確認する
&gt;|python|
$ PYTHON2.6 pyDropboxValues.py | grep p2p_enable
p2p_enable = 0 # 0になっていればよい。最後にプロセスを再起動するのを忘れないように……。
||&lt;
f:id:kk_Ataka:20111008190855j:image
-Dropboxプロセスを再起動する(dropbox.pyは以前DLしているはず)
&gt;||
$ PYTHON2.6 dropbox.py stop
Dropbox daemon stopped.
$ PYTHON2.6 dropbox.py start
Starting Dropbox...Dropbox isn't running!
Done!
||&lt;

**実行時にエラー？
実行しようとするとsqlite3のImportErrorになる？　なんで？　標準で入ってるんじゃないの？
&gt;|Python|
$ PYTHON2.6 pyDropboxValues.py
Traceback (most recent call last):
  File &quot;pyDropboxValue.py&quot;, line 21, in &lt;module&gt;
    import sqlite3
  File &quot;/usr/local/Python-2.6.2/lib/python2.6/sqlite3/__init__.py&quot;, line 24, in &lt;module&gt;
    from dbapi2 import *
  File &quot;/usr/local/Python-2.6.2/lib/python2.6/sqlite3/dbapi2.py&quot;, line 27, in &lt;module&gt;
    from _sqlite3 import *
ImportError: No module named _sqlite3
||&lt;
f:id:kk_Ataka:20111008190856j:image
→ [http://d.hatena.ne.jp/omiyan/20110108/p1:title] によるとPython2.6からはsqlite3は標準インストールから外れているらしい。この辺りはわからんね。yumでsqliteを入れなおす。
&gt;|python|
$ sudo yum install sqlite-*
||&lt;
f:id:kk_Ataka:20111008190857j:image
そして、PythonをソースからインストールしなおせばOK！

</body>
</day>
<day date="2011-10-11" title="">
<body>
*1318334855*[Windows][備忘録]Windowsのローカル環境にWordPressをインストールした

**あらすじ
-Wordpress上ではてな記法を使うことができるというプラグイン [http://rewish.org/wp/hatena_notation_plugin:title] を見つけて使ってみたい！　と思ったのでWordpress備忘録も兼ねてインストール

**参考サイト
-WordPress
--[http://ja.wordpress.org/:title]
--[http://ja.wordpress.org/install/:title]
--[http://www.webcreatorbox.com/tech/wordpress-install-local/:title]
-MySQL
--[http://y-kit.jp/saba/xp/mysqlinst.htm:title]
--[http://www.mysql.com/downloads/installer/:title]

**推奨環境
-WordPress 3.2 の場合
--PHP 5.2.4 以上
--MySQL 5.0 以上

**実行環境
-Windows XP
-WordPress 3.2
-Apache 2.2.1
-PHP 5.3.8
-MySQL 5.5.15

**MySQL
***インストール、設定
-[http://www.mysql.com/downloads/installer/:title]よりMySQLをDL。登録がめんどかったら[http://download.softagency.net/mysql/Downloads/MySQL-5.5/:title]この辺から
-msi実行。基本的に次へ次へ
-C:\windows直下にmy.iniファイルを作成以下のように記述
--basedirはMySQLのルート(msiでデフォルトインストールするとC:/Program Files/MySQL/MySQL Server 5.5に入る)
--datadirはその中のdataフォルダ
&gt;|python|
[mysqld]
basedir=&quot;C:/Program Files/MySQL/MySQL Server 5.5&quot;
datadir=&quot;C:/Program Files/MySQL/MySQL Server 5.5/data&quot;
default-character-set=cp932

[mysql]
default-character-set=cp932
||&lt;
***Windowsサービス登録
&gt;|python|
$ cd &quot;c:/Program Files/MySQL/MySQL Server 5.5/bin/&quot;
$ mysqld --install
Service successfully installed.
||&lt;
***Windowsサービス起動
&gt;|python|
$ net start mysql
MySQL サービスを開始します....
MySQL サービスを開始できませんでした。

システム エラーが発生しました。

システム エラー 1067 が発生しました。

プロセスを途中で強制終了しました。
||&lt;
-エラーが起きた。1067でググってみると設定ファイルがうまく読み込めていないよう
-さらにdatadir下にある.errファイルを見るとこんなエラーが。default-character-setミスってるっぽい？
&gt;|python|
111004 17:18:24 [ERROR] c:\Program Files\MySQL\MySQL Server 5.5\bin\mysqld.exe: unknown variable 'default-character-set=cp932'
||&lt;
-default-character-setが使えるのははMySQL5.0までで5.5以降はcharacter-set-serverとなるらしい
-ただし、[mysql]はdefault-character-setらしい…？
-my.ini書き換え
&gt;|python|
[mysqld]
basedir=&quot;C:/Program Files/MySQL/MySQL Server 5.5&quot;
datadir=&quot;C:/Program Files/MySQL/MySQL Server 5.5/data&quot;
# default-character-set=cp932
character-set-server=cp932

[mysql]
default-character-set=cp932
# character-set-server=cp932
||&lt;
-一旦サービス削除
&gt;|python|
$ mysqld --remove
Service successfully removed.
||&lt;
-設定ファイルを指定しつつサービス登録
&gt;|python|
$ mysqld --install
Service successfully installed.
||&lt;
-再度起動
&gt;|python|
$ net start mysql
MySQL サービスを開始します..
MySQL サービスは正常に開始されました
||&lt;
よし。

***ユーザ作成
-はじめにrootユーザのパスワードを設定する
&gt;|python|
$ mysqladmin.exe -u root password root
||&lt;
-接続
&gt;|python|
$ mysql -u root -p
Enter password: **** # パスワード求められる
||&lt;
-Wordpress用のDBを作成
&gt;|python|
mysql&gt; create database wordpress
    -&gt; ;
Query OK, 1 row affected (0.05 sec)
||&lt;
-とりあえず終了
&gt;|python|
mysql&gt; quit
Bye
||&lt;

**PHP
***インストール
-[http://windows.php.net/download/:title] からWindows用のPHPをDL
--Non Thread safe版にはApacheと連携するためのライブラリ等が入っていないのでThread safe版のInstallerを
-次へ次へ
--インストール先はC:\Program Files\PHP\にした
-Web Server Setup は Apache 2.2.x Moduleを選択
-Apache Configuration Directory は次に入れるApacheのパスを記述(どこまで？Apacheルート？　bin？)

**Apache
***インストール
-[http://httpd.apache.org/download.cgi#apache22:title] からDL

**ApacheとPHPとWordpressの連携
-APACHE2.2\conf\httpd.confファイルを編集
--LoadModuleの近くに追加
&gt;|python|
PHPIniDir &quot;C:\Program Files\PHP\&quot; # PHPがインストールされているフォルダ
LoadModule php5_module &quot;C:/Program Files/PHP/php5apache2_2.dll&quot;
||&lt;
--DocumentRootをWordpressのルートに変更
&gt;|python|
DocumentRoot &quot;C:\Program Files\wordpress&quot; # Wordpressを解凍したフォルダ

&lt;Directory &quot;C:\Program Files\wordpress&quot;&gt; # 同じく
||&lt;
--index.phpをウェルカムファイルに追加
&gt;||
    DirectoryIndex index.html, index.php # index.php追加。htmlより左に持って行くと最優先でindex.phpが表示
||&lt;
--AddTypeなどを追加
&gt;||
     AddHandler cgi-script .cgi

     AddType application/x-httpd-php .php
     PHPIniDir &quot;C:/Program Files/PHP&quot;
||&lt;
-Apache再起動後、localhost:80へアクセスすると(エラーが出るが)PHPが実行されているはず

**WordPress
-[http://ja.wordpress.org/:title] からWordPressをDLし解凍
-wp-config-sample.phpをコピーしwp-config.phpを作成し、以下の設定を変更
&gt;|python|
// ** MySQL 設定 - こちらの情報はホスティング先から入手してください。 ** //
/** WordPress のためのデータベース名 */
define('DB_NAME', 'database_name_here'); # 上で作成したwordpressに

/** MySQL データベースのユーザー名 */
define('DB_USER', 'username_here'); # ユーザ(今回はrootで)

/** MySQL データベースのパスワード */
define('DB_PASSWORD', 'password_here'); # パスワード
||&lt;
-localhost:80/wp-admin/install.phpへアクセスし、「ようこそ」画面が出てきたら正常動作している
-サイトのタイトル、ユーザ名、パスワードを入力し「Wordpressをインストール」ボタン押下
-localhost:80にアクセスし、Hello World!が表示されていれば完了！

**wordpress-hatena
***参考サイト
-[http://rewish.org/wp/hatena_notation_plugin:title]

**手順
-[http://downloads.wordpress.org/plugin/wp-hatena-notation.zip:title=WPHatenaNotation] をDL
-Wordpressにログイン
-プラグイン -&gt; 新規追加 -&gt; アップロード -&gt; zipを参照しいますぐインストール -&gt; プラグインを有効化

</body>
</day>
<day date="2011-11-16" title="">
<body>
*1321447232*[Windows][備忘録]Excel2007のF1キーを無効化する

**あらすじ
ExcelのF1キーを殺したい…。Wordとかは百歩譲っていいとして、ExcelにはF2キーにセル編集が割当たっているので、それを使うときに暴発してしまうため。

**案
-F1キーそのものを引っこ抜く
-何かしらの方法で無効化する
ググってみると、F1キーをぶちぬくという方法も割とメジャーらしいのですが、いずれ返却しなければいけないPCのため物理的な方法は却下。なので無効化する方向でいきます。レジストリをいじってなんとかする。Accessの履歴といい、なんでMicrosoft製品は何かしようとしたらレジストリいじらないといけないんだ…。

**手順
Windowsキー+r -&gt; regedit でレジストリエディタ起動、まずは下記パスを掘っていく。
&gt;||
HKEY_CURRENT_USER
┗Software
　┗Policies
　　┗Microsoft
　　　┗Office
||&lt;
Officeフォルダ直下になにかしら数字フォルダがあるかもしれないが、これはOfficeのバージョン。
-12.0 = Office2007
という事らしい。今回は2007なので12.0を掘る。ここから下の階層はなければ作成する。(作成したい階層で右クリック -&gt; 新規 -&gt; キー)
&gt;||
HKEY_CURRENT_USER
┗Software
　┗Policies
　　┗Microsoft
　　　┗Office
　　　　┗12.0
　　　　　┗Excel
　　　　　　┗DisabledShortcutKeysCheckBoxes
||&lt;
DisabledShortcutKeysCheckBoxesを作り、DisabledShortcutKeysCheckBoxesで右クリック -&gt; 新規 -&gt; 文字列値を選択しF1Key(わかればなんでもよい)と入力。作成したF1Keyをダブルクリックし
&gt;||
112,0
||&lt;
と入力しOK押下。
Excelを再起動するとF1キーを押しても何も起こらなくなった！！　よし！

</body>
</day>
<day date="2011-11-17" title="">
<body>
*1321537502*[Windows][備忘録]Word2007でCtrl+hjklで移動できるようにする

**あらすじ
-あーWord使ってる時hjklで移動してーあとバックスペースも

**手順
テンプレートファイルを編集するとできるよう。で、それはApplication Data下にある。
-Word2007を起動し、左上のWindowsマークから開くを選択
--ファイルの種類で「Word マクロ有効テンプレート(.dotm)」を選択
---%APPDATA%\Microsoft\Templates\Normal.dotmを開く
-開発タブ -&gt; VisualBasic -&gt; Normal -&gt; Microsoft Word Objects -&gt; ThisDocumentに以下をペーストする
&gt;|vb|
Sub BkSpPrc()
  Selection.TypeBackspace
End Sub
Sub MoveLeft()
    Selection.MoveLeft
End Sub
Sub MoveRight()
    Selection.MoveRight
End Sub
Sub MoveUp()
    Selection.MoveUp
End Sub
Sub MoveDown()
    Selection.MoveDown
End Sub
||&lt;
-左上のWindowsマーク -&gt; Wordのオプション -&gt; ユーザー設定 -&gt; ショートカットキー:ユーザー設定 -&gt; 分類:マクロ
--マクロに上記で記載した関数が表示されていることを確認
--マクロを選択してMoveLeftはCtrl+h、MoveDownはCtrl+j...とキーを割り当てていく

</body>
</day>
<day date="2011-11-24" title="">
<body>
*1322138944*[Ruby][備忘録]複数のRuby環境の管理・切替ができるpikを実行できた nyaos編
**前回までのあらすじ
-[http://d.hatena.ne.jp/kk_Ataka/20111004/1317660186:title]

まず、環境変数がおかしいとpikが正常に動きませんよというのが一つ。もう一つの原因がコマンドプロンプトではなくnyaosを使っていたという事。

**参考サイト
-[http://d.hatena.ne.jp/miyamuko/20100905/nyaos_with_pik:title]

**修正方法
そのままだと、nyaosでPATH追加シェルを起動しても親シェルであるnyaosには反映されませんよってんで、動かすには_nyaファイルに以下のコードを追加する。
&gt;||
pik{
  pik_runner.exe pik.bat %*
  if exist &quot;%USERPROFILE%\.pik\pik.bat&quot; then
    source &quot;%USERPROFILE%\.pik\pik.bat&quot; 2&gt; nul
  endif
}
||&lt;
msysgitを使ってる時も同じ感じで追加すればいいのかな。

</body>
</day>
<day date="2011-11-26" title="">
<body>
*1322240459*[Ruby][備忘録][Sinatra][Heroku]HerokuにWebアプリ(Sinatra)をデプロイする手順をまとめた

**あらすじ
いよいよHerokuをはじめる。

**参考サイト
-[http://d.hatena.ne.jp/ruedap/20110209/ruby_heroku_twitter_bot:title]
-[http://studyheroku.wiki.fc2.com/wiki/Heroku%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89:title]
-[http://kuranuki.sonicgarden.jp/2009/05/rubypaasherokurails.html:title]

**事前準備
-Ruby 1.9.3
-Git 1.7.3
-rvm 1.9.2
-gem 1.8.10
--gem管理にbundlerを使いたい

**プロジェクト作成
***Bundler準備
プロジェクトフォルダ(heroku_sample)を作成し、その中にGemfileファイルを作成する。gem 'heroku'は後ほどHerokuに対してプロジェクトを作ったりするのに使用する。
&gt;|ruby|
$ mkdir heroku_sample
$ cd heroku_sample
$ vi Gemfile
source :rubygems
source 'http://rubygems.org'

gem 'sinatra'
gem 'heroku'
||&lt;
bundleでインストール。場所は任意で。今回はカレントのvendor/bundleにインストール。
&gt;|ruby|
$ bundle install ./vendor/bundle
||&lt;
***Sinatra準備
SinatraでHello World!!できるようにサンプルファイルapp.rbを作成。
&gt;|ruby|
$ vi app.rb
require 'rubygems'
require 'sinatra'

get '/' do
  &quot;Hello World!&quot;
end
||&lt;
Rackアプリケーションとして起動するためconfig.ruファイルを作成する。
&gt;|ruby|
require './app.rb'
run Sinatra::Application
||&lt;
&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;※ちょっと先の話になるけど、始めは1行目をrequire 'app.rb'としていた。それでもローカルでは問題なくロードして動作してたし。が、Herokuにデプロイすると下記のようなログを吐きエラーとなった。&lt;/span&gt;
&gt;||
2011-11-23T08:10:02+00:00 heroku[web.1]: State changed from created to starting
2011-11-23T08:10:03+00:00 heroku[web.1]: Starting process with command `thin -p 54821 -e production -R /home/heroku_rack/heroku.ru start`
2011-11-23T08:10:04+00:00 app[web.1]: &lt;internal:lib/rubygems/custom_require&gt;:29:in `require': no such file to load -- .app.rb (LoadError)
2011-11-23T08:10:04+00:00 app[web.1]:      from &lt;internal:lib/rubygems/custom_require&gt;:29:in `require'
2011-11-23T08:10:04+00:00 app[web.1]:      from config.ru:1:in `block (3 levels) in &lt;main&gt;'
...
||&lt;
&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;ん？　`require': no such file to load -- .app.rb (LoadError)ってなんでapp.rbでロードエラーしてんの？　何か設定し忘れ？　――HerokuのRubyはデフォルトで1.9.2になっているということがわかった。そして、Ruby1.9.2からロードパスにカレントディレクトリが含まれなくなったらしく。カレントディレクトリのファイルは./で明示的に教えてあげないといけないようなのでした。うーんRuby1.9.2からの仕様だったのか。1.8ばっかり使ってたからしらなんだ。&lt;/span&gt;

-[http://d.hatena.ne.jp/ruedap/20110531/ruby_require_load_path:title]
-[http://www.ruby-lang.org/ja/news/2010/08/18/ruby-1-9-2-is-released/#label-8:title]

***Gitの管理下に
で、戻ってきて…次にgitの管理対象におく。(今はまだやる必要ないけど、先にすませとく)bundle系のファイルはignoreしておく。
&gt;||
$ git init
$ vi .gitignore
.bundle
vendor
||&lt;
ここまでのプロジェクト構成はこう。
&gt;||
heroku_sample
┣.bundle/
┣.git/
┣.gitignore
┣Gemfile
┣Gemfile.lock
┣config.ru
┣app.rb
┗vendor/
||&lt;

**ローカルで動作確認
***Sinatra起動
ちょっとローカルで動作確認。((この時はRuby1.8.7でやっていた。後ほど1.9代へ変更))
&gt;||
$ bundle exec ruby app.rb
[2011-11-23 13:51:52] INFO  WEBrick 1.3.1
[2011-11-23 13:51:52] INFO  ruby 1.8.7 (2011-06-30) [i686-darwin10.8.0]
== Sinatra/1.3.1 has taken the stage on 4567 for development with backup from WEBrick
[2011-11-23 13:51:52] INFO  WEBrick::HTTPServer#start: pid=50924 port=4567
||&lt;
http://localhost:4567にアクセスしてHello World!!できていればローカルでは成功。

**Herokuへデプロイ
***Sign up
http://www.heroku.comにアクセスし、sign upを選択。
[f:id:kk_Ataka:20111126014002j:image]
メールアドレスを登録し送られてきたメールからHerokuへ再度アクセスしパスワードを登録。
[f:id:kk_Ataka:20111126014003j:image]

***プロジェクト作成
先ほどgemで入れたherokuでHerokuにプロジェクトを作成する。その際、メールアドレスとパスワードの入力が求められる。あとsshキーが必要になるっぽい。
&gt;||
$ bundle exec heroku create heroku_sample
Enter your Heroku credentials.
Email: メールアドレス入れる
Password: パスワード入れる
Found existing public key: /Users/kk_Ataka/.ssh/id_rsa.pub
Uploading ssh public key /Users/kk_Ataka/.ssh/id_rsa.pub
 !   Name must start with a letter and can only contain lowercase letters, numbers, and dashes
||&lt;
ん？　名前は小文字と数字とダッシュだけ？　んじゃ適当に…。
&gt;||
$ bundle exec heroku create tycoon-gosyujin
Creating tycoon-gosyujin... done, stack is bamboo-mri-1.9.2
http://tycoon-gosyujin.heroku.com/ | git@heroku.com:tycoon-gosyujin.git
Git remote heroku added
||&lt;
お、できたできた。HerokuにアクセスしてMy Appsを見に行くとプロジェクトができてた。ちなみに、現在HerokuのサーバのRubyデフォルトバージョンは1.9.2の模様。これはherokuコマンドで1.8などに変えられるみたい。
[f:id:kk_Ataka:20111126014001j:image]
***GitでHerokuへpush
そしたらGitのローカルリポジトリにcommitしたのち、Herokuへpushする。(gitコマンドエイリアス使ってます)
&gt;||
$ git add ./
$ git com 'First commit.'
$ git push heroku master
Counting objects: 774, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (679/679), done.
Writing objects: 100% (774/774), 1.94 MiB, done.
Total 774 (delta 49), reused 0 (delta 0)

-----&gt; Heroku receiving push
-----&gt; Ruby/Sinatra app detected
-----&gt; Gemfile detected, running Bundler version 1.0.7
       Unresolved dependencies detected; Installing...
       Using --without development:test
       Fetching source index for http://rubygems.org/
       Fetching source index for http://rubygems.org/
       Installing addressable (2.2.6)
       Installing launchy (2.0.5)
       Installing mime-types (1.17.2)
       Installing rest-client (1.6.7)
       Installing rubyzip (0.9.4)
       Installing term-ansicolor (1.0.7)
       Installing heroku (2.14.0)
       Installing pit (0.0.6)
       Installing rack (1.3.5)
       Installing rack-protection (1.1.4)
       Installing tilt (1.3.3)
       Installing sinatra (1.3.1)
       Using bundler (1.0.7)
       Your bundle is complete! It was installed into ./.bundle/gems/
-----&gt; Compiled slug size is 1.9MB
-----&gt; Launching... done, v4
       http://tycoon-gosyujin.heroku.com deployed to Heroku

To git@heroku.com:tycoon-gosyujin.git
 * [new branch]      master -&gt; master

||&lt;
無事にデプロイが成功したようなので、Webページへアクセス。

</body>
</day>
<day date="2011-11-27" title="">
<body>
*1322329546*[Ruby][備忘録][Heroku][Lokka]LokkaをインストールしてHerokuにデプロイした

**あらすじ
Herokuを使い出したのでLokkaを触ってみる。

**参考サイト
-[http://lokka.org/getting-started:title]
公式ページの手順だけでなんとかなりそう。

**手順
***Lokka入手、インストール
LokkaをGitHubからCloneして、Bundle install。--withoutオプションでmysql, postgresql, sqliteから使わないDBを指定できる。
&gt;||
$ git clone git://github.com/komagata/lokka.git$ cd lokka
$ bundle install ./vendor/bundle --without development mysql sqlite
||&lt;
ん、何かエラッた。
&gt;||
Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.
(略)
Gem files will remain installed in /home/kk_Ataka/github/lokka/vendor/bundle/ruby/1.9.1/bundler/gems/do-d7cb262d89a1/do_postgres for inspection.
Results logged to /home/kk_Ataka/github/lokka/vendor/bundle/ruby/1.9.1/bundler/gems/do-d7cb262d89a1/do_postgres/ext/do_postgres/gem_make.out
An error occured while installing do_postgres (0.10.6), and Bundler cannot continue.
Make sure that `gem install do_postgres -v '0.10.6'` succeeds before bundling.
||&lt;
do_postgresがbundlerだとインストールできてない…？
&gt;||
$ gem install do_postgres
Fetching: addressable-2.2.6.gem (100%)
Fetching: data_objects-0.10.7.gem (100%)
Fetching: do_postgres-0.10.7.gem (100%)
Building native extensions.  This could take a while...
ERROR:  Error installing do_postgres:
     ERROR: Failed to build gem native extension.

        /home/kk_Ataka/.rvm/rubies/ruby-1.9.3-p0/bin/ruby extconf.rb
checking for main() in -lpq... no
checking for main() in -llibpq... no
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of
necessary libraries and/or headers.  Check the mkmf.log file for more
details.  You may need configuration options.
||&lt;
postgresが入っていなかったので入れる。
&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;※やっぱりSQLite3でやることにしたため以下はメモ。&lt;/span&gt;
&gt;||
$ sudo yum install postgresql-devel
(略)
$ cd ~/.rvm/gems/ruby-1.9.3-p0/gems/do_postgres-0.10.7/ext/do_postgres
$ ruby extconf.rb
checking for main() in -lpq... yes
checking for libpq-fe.h... yes
checking for libpq/libpq-fs.h... yes
checking for postgres.h... yes
checking for mb/pg_wchar.h... yes
checking for catalog/pg_type.h... yes
checking for localtime_r()... yes
checking for gmtime_r()... yes
checking for PQsetClientEncoding()... yes
checking for pg_encoding_to_char()... yes
checking for PQfreemem()... yes
creating Makefile
$ make
linking shared-object do_postgres/do_postgres.so
$ make install
/usr/bin/install -c -m 0755 do_postgres.so /home/kk_Ataka/.rvm/rubies/ruby-1.9.3-p0/lib/ruby/site_ruby/1.9.1/x86_64-linux/do_postgres
installing default do_postgres libraries
||&lt;
&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;メモここまで。&lt;/span&gt;

Lokkaのディレクトリに戻って再度bundle install...。
&gt;||
Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.

        /home/kk_Ataka/.rvm/rubies/ruby-1.9.3-p0/bin/ruby extconf.rb
extconf.rb:10: Use RbConfig instead of obsolete and deprecated Config.
checking for libxml/parser.h... no
-----
libxml2 is missing.  please visit http://nokogiri.org/tutorials/installing_nokogiri.html for help with installing dependencies.
-----
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of
necessary libraries and/or headers.  Check the mkmf.log file for more
details.  You may need configuration options.

(略)

Gem files will remain installed in /home/kk_Ataka/github/lokka/vendor/bundle/ruby/1.9.1/gems/nokogiri-1.5.0 for inspection.
Results logged to /home/kk_Ataka/github/lokka/vendor/bundle/ruby/1.9.1/gems/nokogiri-1.5.0/ext/nokogiri/gem_make.out
An error occured while installing nokogiri (1.5.0), and Bundler cannot continue.
Make sure that `gem install nokogiri -v '1.5.0'` succeeds before bundling.

||&lt;
nokogiriはlibxml2が必要なのか。
&gt;||
$ sudo yum install libxml2-devel
||&lt;
libxsltもか。
&gt;||
$ sudo yum install libxslt-devel
||&lt;
んで満を持してBundle。
&gt;||
$ bundle install ./vendor/bundle --without development mysql postgres
||&lt;
***もろもろの設定、ローカルで起動
database.default.ymlファイルをコピーしてdatabase.ymlを作成。そしてDBセットアップから起動。
&gt;|yml|
$ cp database.default.yml database.yml
$ bundle exec rake db:setup
$ bundle exec rackup
||&lt;
http://localhost:9292にアクセスし、TestSiteが表示されたらOK！
[f:id:kk_Ataka:20111127024213j:image]

**その他
-初期IDとパスワードがtest/testなのでAdmin loginよりログインして変更する
-プラグインは[http://lokka.org/plugins:title]から欲しいものをDLする。public/plugin/に置けばいいらしいが…？

**Herokuにpush
Gitでpushする手順は[http://d.hatena.ne.jp/kk_Ataka/20111126/1322240459:title=前回の記事を参照]。その後、Heroku側のDBセットアップを。
&gt;||
$ bundle exec heroku rake db:setup
||&lt;
***Herokuのタイムゾーン
Herokuのタイムゾーンが日本になっていない。日本に住んでいるのでブログ更新したら更新日は日本時間で出てほしいなと思ったが、これはconfig:addで設定でけるよう。
&gt;||
$ bundle exec heroku config:add TZ=Asia/Tokyo
||&lt;

</body>
</day>
<day date="2011-11-28" title="">
<body>
*1322482230*[Ruby][備忘録]pikでインストールしたRubyでbundle exec rubyしたらエラーになった
&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;解決編 - [http://d.hatena.ne.jp/kk_Ataka/20111129/1322569582:title]&lt;/span&gt;

**あらすじ
-デフォルトのRubyからpikでインストールしたRubyに切り替えた後bundle exec rubyをしたら下記のようなエラーが出た
&gt;||
$ bundle exec ruby app.rb
ruby: invalid switch in RUBYOPT: -a (RuntimeError)
||&lt;
ン？　なんだこれ。

**調査
-pikでインストールしたRubyはバージョン等関係なしにことごとくこけた
--1.8.7 patch352
--1.9.3
-デフォルトでインストールしたRubyでは無事起動した / 下記ログ
--1.8.7 patch330
&gt;||
$ bundle exec ruby app.rb
[2011-11-28 19:31:55] INFO  WEBrick 1.3.1
[2011-11-28 19:31:55] INFO  ruby 1.8.7 (2010-12-23) [i386-mswin32]
== Sinatra/1.3.1 has taken the stage on 4567 for development with backup from WEBrick
[2011-11-28 19:31:55] INFO  WEBrick::HTTPServer#start: pid=964 port=4567
||&lt;
1.8.7同士でもこけたのと成功したのに分かれたので、gemが足りないのかなーとか思ったが、Bundlerでgem installし、ソースではgemを使っていないプロジェクトを作ってもダメだった。同じエラーだー。
&gt;||
$ mkdir sample
$ cd sample
||&lt;
Gemfile作成。
&gt;||
source :rubygems
source &quot;http://rubygems.org&quot;

gem 'pit' # 適当に
||&lt;
test.rb作成。
&gt;||
puts &quot;Hello World!&quot;
||&lt;
実行…。
&gt;||
$ bundle install ./vendor/bundle
$ bundle exec ruby test.rb
ruby: invalid switch in RUBYOPT: -a (RuntimeError)
||&lt;
bundleを使わなければ通る。
&gt;||
$ ruby test.rb
Hello World!
||&lt;
bundle exec rubyでこけてるのかなー？

**ふりだしに戻る
よくわからないので、初めのエラーメッセージに帰ってみる。Rubyの-aオプションってなんだろう。
&gt;http://doc.ruby-lang.org/ja/1.8.7/doc/spec=2frubycmd.html&gt;
    `-n'や`-p'とともに用いて, オートスプリットモードをONにします。オートスプリットモードでは各ループの先頭で,

        $F = $_.split

    が実行されます。`-n'か`-p'オプションが同時に指定されない限り, このオプションは意味を持ちません。
&lt;&lt;
nとpが出てきたな。
&gt;&gt;
    このフラグがセットされるとプログラム全体が sed -nやawk のように

        while gets
         ...
        end

    で囲まれているように動作します.

    -nフラグとほぼ同じですが, 各ループの最後に変数 $_ の値を出力するようになります。

    例:

        % echo matz | ruby -p -e '$_.tr! &quot;a-z&quot;, &quot;A-Z&quot;'
        MATZ
&lt;&lt;
？？？　今回のエラーとどうつながっているんだろう？

**他に違う点がないか調べる
オプションがどんな原因に結びついているかわからなかったので、デフォルトRubyとpikRubyの相違点を探してみる事に。

-パッチバージョンが違っていた
-インストールパスが違っていた

インストールパスかぁ。%USERPROFILE%/.pik/config.ymlにインストール先の定義が書いてあったのを見つけた。Ruby1.8.7 330が自分で入れたRubyで1.8.7 352と1.9.3がpikで入れたRuby。
&gt;|yml|
--- 
&quot;187: ruby 1.8.7 (2010-12-23 patchlevel 330) [i386-mswin32]&quot;: 
  :path: !ruby/object:Pathname 
    path: C:/ruby/bin
&quot;187: ruby 1.8.7 (2011-06-30 patchlevel 352) [i386-mingw32]&quot;: 
  :path: !ruby/object:Pathname 
    path: C:/Documents and Settings/USERNAME/.pik/rubies/Ruby-187-p352/bin
&quot;193: ruby 1.9.3p0 (2011-10-30) [i386-mingw32]&quot;: 
  :path: !ruby/object:Pathname 
    path: C:/Documents and Settings/USERNAME/.pik/rubies/Ruby-193-p0/bin
--- {}
||&lt;
並べて見てみると&quot;Documents and Settings&quot;が何か非常にイヤ～な感じだったのでちょっと動かしてみた。
&gt;|yml|
--- 
&quot;187: ruby 1.8.7 (2010-12-23 patchlevel 330) [i386-mswin32]&quot;: 
  :path: !ruby/object:Pathname 
    path: C:/ruby/bin
&quot;187: ruby 1.8.7 (2011-06-30 patchlevel 352) [i386-mingw32]&quot;: 
  :path: !ruby/object:Pathname 
    path: C:/rubies/Ruby-187-p352/bin
&quot;193: ruby 1.9.3p0 (2011-10-30) [i386-mingw32]&quot;: 
  :path: !ruby/object:Pathname 
    path: C:/Documents and Settings/USERNAME/.pik/rubies/Ruby-193-p0/bin
--- {}
||&lt;
Cドライブ直下に移動。さて…
&gt;||
$ bundle exec ruby test.rb
Hello World!
||&lt;
！？　うーん動いた…。

**一旦まとめ
-インストールディレクトリにProgram FilesとかDocuments and Settingsみたいなスペースが入っているパスを使わない

で、一旦解決という事で。。。根本的な原因はわからなかった。BundlerとPikのページでも見たら何かひらめくだろうか。pikのデフォルトディレクトリ変えたいなー。

</body>
</day>
<day date="2011-11-29" title="">
<body>
*1322569582*[Ruby][備忘録]pikでインストールしたRubyでbundle exec rubyしたらエラーになった 解決編

**前回までのあらすじ
[http://d.hatena.ne.jp/kk_Ataka/20111128/1322482230:title]で出たRubyオプションのエラー。
&gt;||
$ bundle exec ruby app.rb
ruby: invalid switch in RUBYOPT: -a (RuntimeError)
||&lt;
この-aオプションはどこから出てきたのかというと、&quot;Documents and Settings&quot;のaだという事がわかった。

**結論
-&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;Rubyのインストールパスにスペースを含めない&lt;/span&gt;
-&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;pikでRubyをインストールする前にpik config install_dir=XXXでパス指定する&lt;/span&gt;
先に結論を書くと、やっぱりこうだった。以下、調査ログ。

**調査
試しに以下のディレクトリに設置したRubyを使用しようとしたところ、下記のエラーが。(whichとか使えてるのはnyaosを使っているからです)
- C:\rubies\Ru by\
&gt;||
$ which ruby
C:\rubies\Ru by\bin\ruby.exe
$ bundle exec ruby myapp.rb
ruby: illegal switch in RUBYOPT: -b (RuntimeError)
||&lt;
-C:\rubies\R uby\
&gt;||
$ which ruby
C:\rubies\R uby\bin\ruby.exe
$ bundle exec ruby myapp.rb
ruby: illegal switch in RUBYOPT: -u (RuntimeError)
||&lt;
あぁやっぱりかー。

**pikの設定変更
という事は、pik install時にデフォルトでDocuments and Settingsに入れられるのは避けなければならん。pikのhistoryにそれっぽいことが書いてあった。
&gt;https://github.com/vertiginous/pik/blob/master/History.txt&gt;
=== 0.2.8 / 2010-06-22
** BACKWARD COMPATIBILITY CHANGE
  pik will now install new rubies to %USERPROFILE%\rubies\, instead of %PIK_BIN%\pik\ this was necessary to all for installation into %PROGRAMFILES% dir. If you'd like to keep the old path, run:
    &gt;pik config install_dir=C:\path\to\pik
&lt;&lt;
なるほど。pik configコマンドでパスを指定するのか。
&gt;||
$ pik config install_dir=C:\rubies\
$ pik config
** CURRENT CONFIGURATION **

187: ruby 1.8.7 (2010-12-23 patchlevel 330) [i386-mswin32] *
     path: C:\rubies\Ruby\bin

** GLOBAL CONFIGURATION **

---
install_dir: C:\rubies\
||&lt;
install_dirがセットされた。次にinstall。Rubyはとりあえず1.9.1を指定。
&gt;||
$ pik install ruby 1.9.1
** Downloading:  http://rubyforge.org/frs/download.php/72076/ruby-1.9.1-p430-i386-mingw32.7z
   to:  C:\Documents and Settings\USERNAME\.pik\downloads\ruby-1.9.1-p430-i386-mingw32.7z

ruby-1.9.1-p430-i386-min...7z: 100% |oooooooooo|   4.7MB/  4.7MB Time: 00:01:11

** Extracting:  C:\Documents and Settings\USERNAME\.pik\downloads\ruby-1.9.1-p430-i386-mingw32.7z
   to:  C:\rubies\Ruby-191-p430
done

** Adding:  191: ruby 1.9.1p430 (2010-08-16 revision 28998) [i386-mingw32]
 Located at:  C:\rubies\Ruby-191-p430\bin
||&lt;
ダウンロードはUSERPROFILEか。でもインストール先はちゃんとinstall_dirになってる。
&gt;||
$ pik list
 * 187: ruby 1.8.7 (2010-12-23 patchlevel 330) [i386-mswin32]
   187: ruby 1.8.7 (2011-06-30 patchlevel 352) [i386-mingw32]
   191: ruby 1.9.1p430 (2010-08-16 revision 28998) [i386-mingw32]
   193: ruby 1.9.3p0 (2011-10-30) [i386-mingw32]
$ pik use 1.9.1
$ pik list
   187: ruby 1.8.7 (2010-12-23 patchlevel 330) [i386-mswin32]
   187: ruby 1.8.7 (2011-06-30 patchlevel 352) [i386-mingw32]
 * 191: ruby 1.9.1p430 (2010-08-16 revision 28998) [i386-mingw32]
   193: ruby 1.9.3p0 (2011-10-30) [i386-mingw32]
$ which ruby
C:\rubies\Ruby-191-p430\bin\ruby.exe
$ ruby -v
ruby 1.9.1p430 (2010-08-16 revision 28998) [i386-mingw32]
||&lt;
1.9.1確認。%USERPROFILE%\.pik\config.ymlも更新されてた。
&gt;||
--- 
&quot;187: ruby 1.8.7 (2010-12-23 patchlevel 330) [i386-mswin32]&quot;: 
  :path: !ruby/object:Pathname 
    path: C:/rubies/Ruby/bin
&quot;187: ruby 1.8.7 (2011-06-30 patchlevel 352) [i386-mingw32]&quot;: 
  :path: !ruby/object:Pathname 
    path: C:/rubies/Ruby-187-p352/bin
&quot;191: ruby 1.9.1p430 (2010-08-16 revision 28998) [i386-mingw32]&quot;: 
  :path: !ruby/object:Pathname 
    path: C:/rubies/Ruby-191-p430/bin
&quot;193: ruby 1.9.3p0 (2011-10-30) [i386-mingw32]&quot;: 
  :path: !ruby/object:Pathname 
    path: C:/rubies/Ruby-193-p0/bin
--- 
:install_dir: !ruby/object:Pathname 
  path: c:\rubies\
||&lt;
最後に実行してみ…なんじゃこりゃあーー！
&gt;||
$ bundle exec ruby test.rb
Error loading gem paths on load path in gem_prelude
can't modify frozen string
&lt;internal:gem_prelude&gt;:69:in `force_encoding'
&lt;internal:gem_prelude&gt;:69:in `set_home'
&lt;internal:gem_prelude&gt;:38:in `dir'
&lt;internal:gem_prelude&gt;:76:in `set_paths'
&lt;internal:gem_prelude&gt;:47:in `path'
&lt;internal:gem_prelude&gt;:286:in `push_all_highest_version_gems_on_load_path'
&lt;internal:gem_prelude&gt;:355:in `&lt;compiled&gt;'
&lt;internal:gem_prelude&gt;:345:in `method_missing': undefined method `user_home' for Gem:Module (NoMethodError)
        from C:/rubies/Ruby-191-p430/lib/ruby/gems/1.9.1/gems/bundler-1.0.21/lib/bundler/rubygems_integration.rb:57:in `user_home'
        from C:/rubies/Ruby-191-p430/lib/ruby/gems/1.9.1/gems/bundler-1.0.21/lib/bundler/settings.rb:107:in `global_config_file'
        from C:/rubies/Ruby-191-p430/lib/ruby/gems/1.9.1/gems/bundler-1.0.21/lib/bundler/settings.rb:6:in `initialize'
        from C:/rubies/Ruby-191-p430/lib/ruby/gems/1.9.1/gems/bundler-1.0.21/lib/bundler.rb:185:in `new'
        from C:/rubies/Ruby-191-p430/lib/ruby/gems/1.9.1/gems/bundler-1.0.21/lib/bundler.rb:185:in `settings'
        from C:/rubies/Ruby-191-p430/lib/ruby/gems/1.9.1/gems/bundler-1.0.21/lib/bundler.rb:261:in `configure_gem_home_and_path'
        from C:/rubies/Ruby-191-p430/lib/ruby/gems/1.9.1/gems/bundler-1.0.21/lib/bundler.rb:82:in `configure'
        from C:/rubies/Ruby-191-p430/lib/ruby/gems/1.9.1/gems/bundler-1.0.21/lib/bundler.rb:136:in `definition'
        from C:/rubies/Ruby-191-p430/lib/ruby/gems/1.9.1/gems/bundler-1.0.21/lib/bundler.rb:126:in `load'
        from C:/rubies/Ruby-191-p430/lib/ruby/gems/1.9.1/gems/bundler-1.0.21/lib/bundler.rb:110:in `setup'
        from C:/rubies/Ruby-191-p430/lib/ruby/gems/1.9.1/gems/bundler-1.0.21/lib/bundler/setup.rb:7:in `&lt;top (required)&gt;'
        from C:\rubies\Ruby-191-p430\bin\ruby.exe:0:in `require'
||&lt;
-[http://saikyoline.jp/weblog/2011/09/10/013622.html:title]
-[http://d.hatena.ne.jp/sasaplus1/20110522/1306074417:title]
-[http://www.ruby-forum.com/topic/1832630:title]

Ruby1.9.1の現象らしい…。1.9.2に切り替えて…。
&gt;||
$ bundle exec ruby myapp.rb
[2011-11-29 13:45:14] INFO  WEBrick 1.3.1
[2011-11-29 13:45:14] INFO  ruby 1.9.2 (2011-07-09) [i386-mingw32]
== Sinatra/1.3.1 has taken the stage on 4567 for development with backup from WEBrick
[2011-11-29 13:45:14] INFO  WEBrick::HTTPServer#start: pid=4568 port=4567
||&lt;
ふぅ…いろんなことが起こりすぎた…。最後のエラーは置いといて、デフォルトでスペース入っているパスにインストールされると危ないな。

**結論
-&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;Rubyのインストールパスにスペースを含めない&lt;/span&gt;
-&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;pikでRubyをインストールする前にpik config install_dir=XXXでパス指定する&lt;/span&gt;
大事なことだったので二回書いた。

</body>
</day>
<day date="2011-11-30" title="">
<body>
*1322662743*[Ruby][備忘録][Heroku]rvm環境でRuby実行時にReadlineエラーが起きた時の対処法
タイトル通り。さくらVPS(CentOS)にrvmでRubyをインストールし、Heroku環境を構築しようとしたらReadlineエラーが起きた。
&gt;||
$ rvm install 1.9.2
(略)
$ rvm use 1.9.2
$ gem install heroku
(略)
$ heroku
/home/kk_Ataka/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require': no such file to load -- readline (LoadError)
     from /home/kk_Ataka/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
     from /home/kk_Ataka/.rvm/gems/ruby-1.9.2-p290/gems/heroku-2.14.0/lib/heroku/command/run.rb:1:in `&lt;top (required)&gt;'
     from /home/kk_Ataka/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
     from /home/kk_Ataka/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
     from /home/kk_Ataka/.rvm/gems/ruby-1.9.2-p290/gems/heroku-2.14.0/lib/heroku/command.rb:17:in `block in load'
     from /home/kk_Ataka/.rvm/gems/ruby-1.9.2-p290/gems/heroku-2.14.0/lib/heroku/command.rb:16:in `each'
     from /home/kk_Ataka/.rvm/gems/ruby-1.9.2-p290/gems/heroku-2.14.0/lib/heroku/command.rb:16:in `load'
     from /home/kk_Ataka/.rvm/gems/ruby-1.9.2-p290/gems/heroku-2.14.0/bin/heroku:13:in `&lt;top (required)&gt;'
     from /home/kk_Ataka/.rvm/gems/ruby-1.9.2-p290/bin/heroku:19:in `load'
     from /home/kk_Ataka/.rvm/gems/ruby-1.9.2-p290/bin/heroku:19:in `&lt;main&gt;'
||&lt;
readlineが入っていなかったのだろうか？
&gt;||
$ sudo yum install readline-devel
$ cd $rvm_path/src/RUBYVERSION/ext/readline
$ ruby extconf.rb
$ make
$ make install
||&lt;
オプション--with-readline-dir指定は特になくていけた。
-https://rvm.beginrescueend.com/packages/readline
opensslなども同じように解決できるみたい。
-[http://d.hatena.ne.jp/kamm/20110119/1295433210:title]
-[http://d.hatena.ne.jp/seiryo/20071213/1197545500:title]

</body>
</day>
<day date="2011-12-01" title="">
<body>
*1322746718*[Solaris][備忘録]DAT装置の使い方 超簡易版(Solaris)
**あらすじ
結局はtarコマンド+αなんだけど、どうもDAT装置とテープというデバイスが使い慣れないので操作方法をメモしておく。とりあえず
-状態確認
-何も考えずに書き込み
-全部取り出し
くらい。

**コマンド
使用するコマンドはmt(磁気テープの制御)とtar。まずはmt。
***テープの状態表示
- -fオプションでテープデバイスの指定
-/dev/rmt/0はテープデバイスのパス
&gt;||
$ mt -f /dev/rmt/0 status
||&lt;
***テープの巻き戻し
今回は使わなかった。
&gt;||
$ mt -f /dev/rmt/0 rewind
||&lt;
***テープの取り出し
データの取り出しではなく、DAT装置からの取り出し。
&gt;||
$ mt -f /dev/rmt/0 offline
||&lt;
ここからtar。
-fオプションはtarファイル引数の指定。
--fを省略した場合は$TAPE(設定されている場合)
--$TAPEもない場合は/etc/default/tarを見に行く((必ずf指定してたからこれは知らなかった))
-vオプションはファイル名の出力
***テープの内容を表示
-tオプションは指定されたtarファイルの内容一覧表示
&gt;||
$ tar tvf /dev/rmt/0
||&lt;
tオプションで表示される内容はこんな感じ。
&gt;||
$ tar tf test.tar
test/aaa.txt
...
||&lt;
vオプションと併用すると詳細に。
&gt;||
$ tar tvf openssl-xxx.tar
-rw-r--r--   9/9    99999  3月 19日 22:22 2011年 test/aaa.txt
...
||&lt;
***テープへ書き込み
-cオプションは作成
&gt;||
$ tar cvf /dev/rmt/0 FILE
||&lt;
***テープ内データの取り出し
-xオプションはファイルの抽出、復元。テープに入ったデータがそのまま復元される
&gt;||
$ tar xvf /dev/rmt/0
||&lt;
テープに/tmp/AAA.tarが書き込まれている場合、上記コマンドを実行すると/tmp/下に復元する。

</body>
</day>
<day date="2011-12-02" title="">
<body>
*1322839748*[Sphinx][reST][備忘録]Sphinxでドキュメントを書くためreST記法に入門した

**あらすじ
Sphinxを導入した時にまとめたreST(reStructuredText)記法をアウトプットしよう。まだリファレンス読み込んでおらず、感覚で使っているところもあるので間違った認識もあるかも…そこは学んだら追記しよう。

**参考
-[http://sphinx.shibu.jp/:title]
-[http://docutils.sourceforge.net/rst.html:title]
基本的にSphinxのサイトに書いてあることを写経してます。

**注意
見出しの文字数より少なくならないように上下囲む、とかテーブルは列・行を合わせるとか結構シビアな書き方が求められるのですが……pre記法にしても揃ってない…！

**見出し系
&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;間違って覚えていたので、見出し系については[http://d.hatena.ne.jp/kk_Ataka/20120816/1345124098:title]を参照。&lt;/span&gt;
-h1見出し
半角イコールで上下を&lt;span class=&quot;deco&quot; style=&quot;font-weight:bold;&quot;&gt;揃えて囲む&lt;/span&gt;とh1と同等。
&gt;||
      =========================
      rst(reStructuredText)解説
      =========================
||&lt;
[f:id:kk_Ataka:20111203000832j:image]
&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;見出しより長くしても問題ないが、見出しより短いと警告される。(Title underline too short.):&lt;/span&gt;
&gt;||
      ===========================
      怒られない
      ===========================
||&lt;
&gt;||
      ==
      怒られる
      ==
||&lt;
&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;以下の見出しも同様。&lt;/span&gt;
-h2見出し
下だけ半角イコールでh2と同等。
&gt;||
      &lt;h2&gt;になる
      ==========
||&lt;
[f:id:kk_Ataka:20111203000826j:image]
-h3見出し
ハイフンで上下囲むとh3と同等。
&gt;||
      ----------
      &lt;h3&gt;になる
      ----------
||&lt;
[f:id:kk_Ataka:20111203000827j:image]
-h4見出し
下だけハイフンでh4と同等。
&gt;||
      &lt;h4&gt;になる
      ----------
||&lt;
[f:id:kk_Ataka:20111203000828j:image]
**リスト系
-箇条書きリスト
箇条書きリストの項目。ハイフンで定義。
&gt;||
      - りんご
      - きのこ
              - パワーアップ用
              - 1UP用
      - みかん
||&lt;
[f:id:kk_Ataka:20111202231941j:image]
-数字つきリスト
数字つきリストの項目。数字・アルファベット等と半角の閉じ括弧で定義。
&gt;||
      1) りんご
      2) きのこ
              a) パワーアップ用
                      i) 毒きのこ
              b) 1UP用
      3) みかん
||&lt;
[f:id:kk_Ataka:20111202231922j:image]
また、閉じ括弧 は . でもよい様子。
-数字つきリストの項目2
シャープで自動発番してくれる。
&gt;||
      #. りんご
      #. きのこ
              #. パワーアップ用
                      #. 毒きのこ
              #. 1UP用
      #. みかん
||&lt;
[f:id:kk_Ataka:20111202231923j:image]
-定義項目
&lt;span class=&quot;deco&quot; style=&quot;font-weight:bold;&quot;&gt;一個改行して&lt;/span&gt;インデント。二個改行してインデントすると字下げになる。
&gt;||
      キノコ
              食べてパワーアップする
      スター
              一定時間無敵になる
||&lt;
[f:id:kk_Ataka:20111202231924j:image]
**装飾系
-イタリック体
アスタリスクで囲んでイタリック体。
&gt;||
      *アスタリスクで囲んでイタリック体*
||&lt;
-ボールド体
アスタリスク2つで囲んでボールド体。
&gt;||
      **アスタリスク2つで囲んでボールド体**
||&lt;
-そのまま表示
`` ``で囲んだ文字をそのまま表示。アスタリスクで囲んでもイタリック体にならない。
&gt;||
      ``*囲んだ文字をそのまま表示*アスタリスクで囲んでもイタリック体にならない``
||&lt;
-リンク
リンクにしたい文字の後ろ _ をつけ、 別の場所でリンクの定義をする。リンク内にスペースが必要な時は` `でくくる。普通の文字とリンク文字の間にはスペースあけがいるようだ。
&gt;||
      リンクその1 ggrks_ と やふれかす_ リンク内にスペースが必要な時はくくる `やふれ　かす`_
      .. _ggrks: http://www.google.com/
      .. _やふれかす: http://www.yahoo.co.jp/
      .. _やふれ　かす: http://www.yahoo.co.jp/
||&lt;
[f:id:kk_Ataka:20111202231925j:image]
-リンクその2
こういう書き方もある。
&gt;||
      `グーグル`__ に
      __ http://www.google.com/
||&lt;
[f:id:kk_Ataka:20111202231926j:image]
-リンクその3
URL直打ちも実はリンクになる。((これが一番簡単？))
[f:id:kk_Ataka:20111202231927j:image]
**テーブル
半角イコールと半角ハイフンで作れる。イコールで囲んだ行が見出しとなる。
[f:id:kk_Ataka:20111203000829j:image]
[f:id:kk_Ataka:20111202231928j:image]
&lt;span class=&quot;deco&quot; style=&quot;font-weight:bold;&quot;&gt;きちんと列と行を揃える&lt;/span&gt;必要がある。これがめんどくさいんだよなあ。なんか楽にテーブル組める方法はないんだろうか。
カラム幅の割合をスペースの量で調整する事もできる。一つ前のテーブルよりも1列目が広い。
[f:id:kk_Ataka:20111203000830j:image]
[f:id:kk_Ataka:20111202231929j:image]
また、半角プラスと半角パイプで枠を作ってテーブルにする事もできる。イコールの上が見出しとなる。これも作るのめんどい？
[f:id:kk_Ataka:20111203000831j:image]
[f:id:kk_Ataka:20111202231930j:image]
**文章系
-基本的な事
途中の改行は無視される。
&gt;||
          途中の改行は
          無視される
||&lt;
[f:id:kk_Ataka:20111202231931j:image]
二行以上改行してからタブで字下げ。タブを戻したら字下げから復帰。
&gt;||
          タブでインデントをかけると字下げされる

                  この行字下げしてます

          字下げなおしました
||&lt;
[f:id:kk_Ataka:20111202231932j:image]
※二行以上改行してから字下げしないと定義分になる。
&gt;||
              ※改行してから字下げしないと定義分になる
                      こんなふうに

||&lt;
[f:id:kk_Ataka:20111202231933j:image]
-整形済みテキスト
文末にコロン2つ。で次の文章をインデントするといわゆるpreタグに。
&gt;||
        いわゆる&lt;pre&gt;タグ。今までずっと使ってきてる::

                コロン二つのあと字下げで使う？
                改行も
                        字下げも
                *文字装飾*も**そのまま表示される**

        字下げを戻せば終了
||&lt;
-脚注
脚注は [#]_ で定義。別の場所で脚注の説明。
&gt;||
    脚注 [#]_ はこう
    連番 [#]_ で触れる

    .. [#] ただしイケメンに限る
    .. [#] 連番
||&lt;
[f:id:kk_Ataka:20111202231934j:image]
[f:id:kk_Ataka:20111202231935j:image]
-引用
引用は [引用内容] で定義。
&gt;||
    引用 [reference]_ はこう

    .. [reference] Google先生より
||&lt;
[f:id:kk_Ataka:20111202231936j:image]
[f:id:kk_Ataka:20111202231937j:image]
-置換
|変数|を定義して、 .. |変数| replaceで置換。
&gt;||
    ここ置換してね |rep| 。あとここも |rep| ::

    .. |rep| replace:: ★ちかん★
||&lt;
[f:id:kk_Ataka:20111202231938j:image]
**ディレクティブ
-コンテンツ表示
Sphinxページ最上部にコンテンツ一覧を表示できる。:
&gt;||
      .. contents::
||&lt;
[f:id:kk_Ataka:20111202231939j:image]
-ナビゲーション
スタート &gt; 全ての... &gt; MS &gt; Excel のような表記を表現できる。:
&gt;||
      スタート &gt; 全ての... &gt; MS &gt; Excel のような表記を :menuselection:`スタート --&gt; 全ての... --&gt; MS --&gt; Excel` こう表記できる
||&lt;
[f:id:kk_Ataka:20111202231940j:image]

</body>
<comments>
<comment>
<username>Sphinx 初心者</username>
<body>今頃すみません　&lt;br&gt;見出し系について勘違いされているようなので&lt;br&gt;&lt;br&gt;記号と見出しのレベルの対応は、そのファイル内で出てきた順で決まります。&lt;br&gt;一番最初に出た形式がh1、次に出た形式がh2、となります。&lt;br&gt;&lt;br&gt;また、上下に書くのと下に書くのとでは別レベルとして扱われます。</body>
<timestamp>1344825300</timestamp>
</comment>
<comment>
<username>kk_Ataka</username>
<body>マニュアルを読み直したらたしかにそのとおりでした。&lt;br&gt;ご指摘ありがとうございます！</body>
<timestamp>1345123434</timestamp>
</comment>
</comments>
</day>
<day date="2011-12-03" title="">
<body>
*1322922769*[Mac][Application]Macで現在の入力モードを判別しやすくするImageUpをインストールした
**あらすじ
-全角文字を入力しようとしたら半角文字を入力してしまってctrl+h連打…
-入力ソース切り替え時に表示されるウィンドウは、プライマリディスプレイにしか表示されないのでセカンダリディスプレイ見ていると確認するのがめんどい
[f:id:kk_Ataka:20111203121354j:image]
-右上の現在のモードも見るのがめんどい
[f:id:kk_Ataka:20111203121510j:image]

一目で今どっちのモードなのかわかることができないだろうかと探したところ、ImageUpというツールでできるらしい。のでメモ。

**サイト
[http://software.cockscomb.info/imageup/:title]

**できること
設定次第でいろいろできるようだけど、とりあえずColor Extraというテーマだと以下のようになる。
-バーの色変え
--全角の場合
[f:id:kk_Ataka:20111203121514j:image]
--半角の場合
[f:id:kk_Ataka:20111203121513j:image]
-画面の上下に色線つけ
--全角の場合
[f:id:kk_Ataka:20111203121514j:image]
[f:id:kk_Ataka:20111203121515j:image]
--半角の場合
[f:id:kk_Ataka:20111203121513j:image]
[f:id:kk_Ataka:20111203121516j:image]
-マウスカーソルの側に入力ソース表示
--全角の場合
[f:id:kk_Ataka:20111203121511p:image:w360]
--半角の場合
[f:id:kk_Ataka:20111203121512p:image:w360]
このマウスカーソルの側に出してもらえるのが非常に便利すぎた。これでもう全角半角確認はしなくてOKになりそうだ！
</body>
</day>
<day date="2011-12-04" title="">
<body>
*1323009249*[Ruby][備忘録][Mac][Unix]複数のRuby環境の管理・切替ができるrvmをインストールした
**あらすじ
先にWindowsにてRubyのバージョン管理ができるpikをインストールしていたので、今度はWindows以外にrvmをインストールする。

**参考サイト
-https://rvm.beginrescueend.com/rvm/install
-[http://www.machu.jp/diary/20110521.html#p01:title]
-[http://d.hatena.ne.jp/mirakui/20100502/1272849327:title]

**まとめ
とりあえず以下のコマンドを覚える。
-rvm list known
--インストールできるRubyの一覧
-rvm list
--インストールしているRubyの一覧
-rvm install x.x.x
--インストール
-rvm use x.x.x
--Rubyの切り替え

**事前準備
-既にインストールされていたRubyは全部消した。

**手順
インストールのため下記コマンドをうつ。
&gt;||
$ bash &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer )
||&lt;
ホームディレクトリに.rvmが生成される。list knownでインストールできるRuby一覧が表示される。
&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;(2012/04/07追記)&lt;/span&gt;command not foundが出る場合はPATHが通ってない。
&gt;&gt;
Installing RVM to /Users/kk_Ataka/.rvm/
    Adding rvm PATH line to /Users/kk_Ataka/.bashrc /Users/kk_Ataka/.zshrc.
    RVM sourcing line found in /Users/kk_Ataka/.bashrc.
&lt;&lt;
&gt;||
$ rvm list known
# MRI Rubies
[ruby-]1.8.6[-p420]
[ruby-]1.8.6-head
[ruby-]1.8.7[-p352]
[ruby-]1.8.7-head
[ruby-]1.9.1-p378
[ruby-]1.9.1[-p431]
[ruby-]1.9.1-head
[ruby-]1.9.2-p180
[ruby-]1.9.2[-p290]
[ruby-]1.9.2-head
[ruby-]1.9.3-preview1
[ruby-]1.9.3-rc1
[ruby-]1.9.3[-p0]
[ruby-]1.9.3-head
ruby-head

# GoRuby
goruby

# JRuby
jruby-1.2.0
jruby-1.3.1
jruby-1.4.0
jruby-1.6.1
jruby-1.6.2
jruby-1.6.3
jruby-1.6.4
jruby[-1.6.5]
jruby-head

# Rubinius
rbx-1.0.1
rbx-1.1.1
rbx-1.2.3
rbx-1.2.4
rbx[-head]
rbx-2.0.0pre

# Ruby Enterprise Edition
ree-1.8.6
ree[-1.8.7][-2011.03]
ree-1.8.6-head
ree-1.8.7-head

# Kiji
kiji

# MagLev
maglev[-head]
maglev-1.0.0

# Mac OS X Snow Leopard Only
macruby[-0.10]
macruby-nightly
macruby-head

# IronRuby -- Not implemented yet.
ironruby-0.9.3
ironruby-1.0-rc2
ironruby-head
||&lt;
とりあえず1.8系のために1.8.7、1.9系のために1.9.3をインストールする。installコマンドを使う。
&gt;||
$ rvm install ruby-1.8.7
Installing Ruby from source to: /Users/kk_Ataka/.rvm/rubies/ruby-1.8.7-p352, this may take a while depending on your cpu(s)...

ruby-1.8.7-p352 - #fetching
ruby-1.8.7-p352 - #downloading ruby-1.8.7-p352, this may take a while depending on your connection...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 4108k  100 4108k    0     0  1718k      0  0:00:02  0:00:02 --:--:-- 2576k
ruby-1.8.7-p352 - #extracting ruby-1.8.7-p352 to /Users/kk_Ataka/.rvm/src/ruby-1.8.7-p352
ruby-1.8.7-p352 - #extracted to /Users/kk_Ataka/.rvm/src/ruby-1.8.7-p352
Applying patch 'stdout-rouge-fix' (located at /Users/kk_Ataka/.rvm/patches/ruby/1.8.7/stdout-rouge-fix.patch)
ruby-1.8.7-p352 - #configuring
ruby-1.8.7-p352 - #compiling
ruby-1.8.7-p352 - #installing
Retrieving rubygems-1.8.10
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  243k  100  243k    0     0   533k      0 --:--:-- --:--:-- --:--:-- 1113k
Extracting rubygems-1.8.10 ...
Removing old Rubygems files...
Installing rubygems-1.8.10 for ruby-1.8.7-p352 ...
Installation of rubygems completed successfully.
ruby-1.8.7-p352 - adjusting #shebangs for (gem irb erb ri rdoc testrb rake).
ruby-1.8.7-p352 - #importing default gemsets (/Users/kk_Ataka/.rvm/gemsets/)
Install of ruby-1.8.7-p352 - #complete
||&lt;
&gt;||
$ rvm install ruby-1.9.3
Installing Ruby from source to: /Users/kk_Ataka/.rvm/rubies/ruby-1.9.3-p0, this may take a while depending on your cpu(s)...

ruby-1.9.3-p0 - #fetching
ruby-1.9.3-p0 - #downloading ruby-1.9.3-p0, this may take a while depending on your connection...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 9330k  100 9330k    0     0  1775k      0  0:00:05  0:00:05 --:--:-- 2094k
ruby-1.9.3-p0 - #extracting ruby-1.9.3-p0 to /Users/kk_Ataka/.rvm/src/ruby-1.9.3-p0
ruby-1.9.3-p0 - #extracted to /Users/kk_Ataka/.rvm/src/ruby-1.9.3-p0
Fetching yaml-0.1.4.tar.gz to /Users/kk_Ataka/.rvm/archives
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  460k  100  460k    0     0   155k      0  0:00:02  0:00:02 --:--:--  261k
Extracting yaml-0.1.4.tar.gz to /Users/kk_Ataka/.rvm/src
Configuring yaml in /Users/kk_Ataka/.rvm/src/yaml-0.1.4.
Compiling yaml in /Users/kk_Ataka/.rvm/src/yaml-0.1.4.
Installing yaml to /Users/kk_Ataka/.rvm/usr
ruby-1.9.3-p0 - #configuring
ruby-1.9.3-p0 - #compiling
ruby-1.9.3-p0 - #installing
Removing old Rubygems files...
Installing rubygems-1.8.10 for ruby-1.9.3-p0 ...
Installation of rubygems completed successfully.
ruby-1.9.3-p0 - adjusting #shebangs for (gem irb erb ri rdoc testrb rake).
ruby-1.9.3-p0 - #importing default gemsets (/Users/kk_Ataka/.rvm/gemsets/)
Install of ruby-1.9.3-p0 - #complete
||&lt;
gemは最新版？　が入ってしまった。

※ところで、rvmでインストールしたRubyたちは~/.rvm/rubies下に入れられていく。Ruby切り替え時にパスなんかをセットしてくれるスクリプトが.rvm/scriptの下にあるのでシェル起動時に実行してくれるようにする必要がある。
-[http://d.hatena.ne.jp/mirakui/20100502/1272849327:title]
&gt;||
if [[ -s .rvm/scripts/rvm ]] ; then source .rvm/scripts/rvm ; fi
||&lt;

インストールしたRubyはlistコマンドで確認できる。
&gt;||
$ rvm list

rvm rubies

   ruby-1.8.7-p352 [ i686 ]
   ruby-1.9.3-p0 [ x86_64 ]

||&lt;
Rubyを切り替えるときはuseコマンドを使う。1.8に切り替え。
&gt;||
$ rvm use 1.8.7
Using /Users/kk_Ataka/.rvm/gems/ruby-1.8.7-p352
||&lt;
&gt;||
$ rvm list

rvm rubies

=&gt; ruby-1.8.7-p352 [ i686 ]
   ruby-1.9.3-p0 [ x86_64 ]
||&lt;
&gt;||
$ ruby -v
ruby 1.8.7 (2011-06-30 patchlevel 352) [i686-darwin10.8.0]
||&lt;
.rvm/rubies/ruby-1.8.7xxx/bin下のものを使っている。
&gt;||
$ which ruby
/Users/kk_Ataka/.rvm/rubies/ruby-1.8.7-p352/bin/ruby
||&lt;
&gt;||
$ which gem
/Users/kk_Ataka/.rvm/rubies/ruby-1.8.7-p352/bin/gem
||&lt;
&gt;||
$ gem -v
1.8.10
||&lt;
bundlerとrakeはデフォルトで入っている模様。
&gt;||
$ gem list

*** LOCAL GEMS ***

bundler (1.0.21 ruby)
rake (0.9.2)
||&lt;
次は1.9に切り替え。
&gt;||
$ rvm use 1.9.3
Using /Users/kk_Ataka/.rvm/gems/ruby-1.9.3-p0
||&lt;
&gt;||
$ rvm list

rvm rubies

   ruby-1.8.7-p352 [ i686 ]
=&gt; ruby-1.9.3-p0 [ x86_64 ]

||&lt;
&gt;||
$ ruby -v
ruby 1.9.3p0 (2011-10-30 revision 33570) [x86_64-darwin10.8.0]
||&lt;
きちんと1.9に切り替わっている。パスも。
&gt;||
$ which ruby
/Users/kk_Ataka/.rvm/rubies/ruby-1.9.3-p0/bin/ruby
||&lt;
&gt;||
$ which gem
/Users/kk_Ataka/.rvm/rubies/ruby-1.9.3-p0/bin/gem
||&lt;
&gt;||
$ gem -v
1.8.10
||&lt;
&gt;||
$ gem list

*** LOCAL GEMS ***

bundler (1.0.21 ruby)
rake (0.9.2)
||&lt;
rvm listで&quot;=&gt;&quot;の矢印ができていれば切り替え成功。

切り替えたのに矢印が出ていなかったら、rvm導入前に既にインストールしているRubyが優先的に見られている？((ただ、rvm環境以外のRubyとも行き来ができる(rvm system)らしいのでよくわからん。))　pikでやらかした時みたいにパスがうまく書き換わっていないという凡ミスをしている可能性があるかもしれない。

**今後
rvmには一つのRubyバージョンに対して複数のgem環境を持たせることもできるらしい。1.8.7のtest環境用とかRails動かす用みたいな感じで。これはまた今度学ぶ。

</body>
</day>
<day date="2011-12-05" title="">
<body>
*1323092947*[Ruby][備忘録][Redmine]RedmineでプラグインインストールしたらTemplateErrorが出た

**あらすじ
Redmineにプラグインをインストールした後で動かそうとしたらエラーが。

**調査
下記の例はredmine_importerというCSVでチケット一括登録するプラグイン。
&gt;||
ActionView::TemplateError (No plugin called 'redmine_importer' - please use the full name of a loaded plugin.) on line #2 of vendor/plugins/idlysphere-redmine_importer-7a19e8d/app/views/importer/match.html.erb:
1: &lt;% content_for :header_tags do %&gt;
2:     &lt;%= stylesheet_link_tag 'importer', :plugin =&gt; 'redmine_importer' %&gt;
3: &lt;% end %&gt;
4:
5: &lt;h2&gt;&lt;%= l(:label_match_columns) %&gt;&lt;/h2&gt;

    vendor/plugins/idlysphere-redmine_importer-7a19e8d/app/views/importer/match.html.erb:2
    app/helpers/application_helper.rb:764:in `content_for'
    vendor/plugins/idlysphere-redmine_importer-7a19e8d/app/views/importer/match.html.erb:1
    /usr/local/lib/ruby/1.8/webrick/httpserver.rb:104:in `service'
    /usr/local/lib/ruby/1.8/webrick/httpserver.rb:65:in `run'
    /usr/local/lib/ruby/1.8/webrick/server.rb:173:in `start_thread'
    /usr/local/lib/ruby/1.8/webrick/server.rb:162:in `start'
    /usr/local/lib/ruby/1.8/webrick/server.rb:162:in `start_thread'
    /usr/local/lib/ruby/1.8/webrick/server.rb:95:in `start'
    /usr/local/lib/ruby/1.8/webrick/server.rb:92:in `each'
    /usr/local/lib/ruby/1.8/webrick/server.rb:92:in `start'
    /usr/local/lib/ruby/1.8/webrick/server.rb:23:in `start'
    /usr/local/lib/ruby/1.8/webrick/server.rb:82:in `start'

Rendering /usr/local/redmine-1.0.0/public/500.html (500 Internal Server Error)
||&lt;
redmine_importerが呼ばれていないようだ。いろいろ変えて判明した原因としては、このエラープラグインフォルダ名が「redmine_importer」になってなかったかららしい。

**原因
なんでこんなエラー出したかというと、GitHubからソースを落としてくると「ユーザ名-プロジェクト名-リビジョン」というフォルダ名(？)になるのだが、これをそのままvendor/plugin下に突っ込んでしまったためredmine_importerがないといわれているようだ。リネームしてから移動することで解決する？

</body>
</day>
<day date="2011-12-06" title="">
<body>
*1323186439*[Unix][備忘録]UnixでストリーミングファイルをDLしたい
**あらすじ
[http://hibiki-radio.jp/description/milky:title=ミルキィホームズのラジオ](番組はなんでも可)を毎週自動的にサーバにDLするスクリプトを組みたい！

**調べること
-ラジオはMMSプロトコルのASFファイル
--wgetでDLできる？
---MMSに対応してない模様？　wget proなら対応しているらしいが…
--mplayerというソフトウェアでUnixでもMMSファイルをDLできるらしい [http://ja.wikipedia.org/wiki/MPlayer:title]

というわけでまずはmplayerを使ってUnixでストリーミングファイルをDLできるようにしてみる。

**ダウンロード、インストール
ソースからDL。まずはzlibそしてGitが必要。
[http://zlib.net/:title]
&gt;||
$ wget http://zlib.net/zlib-1.2.5.tar.gz
$ gunzip zlib-1.2.5.tar.gz 
$ tar xf zlib-1.2.5.tar 
$ cd zlib-1.2.5/
$ ./configure
$ make
$ sudo make install
||&lt;
[http://git-scm.com/:title]
&gt;||
$ wget http://git-core.googlecode.com/files/git-1.7.7.4.tar.gz
$ gunzip git-1.7*
$ tar xf git -1.7*
$ cd git-1.7*
$ ./configure
$ make
$ sudo make install
||&lt;
[http://www.mplayerhq.hu/design7/dload.html:title]
&gt;||
$ wget http://www.mplayerhq.hu/MPlayer/releases/mplayer-export-snapshot.tar.bz2
$ bunzip2 mplayer-export-*
$ tar xf mplayer-export-*
$ cd mplayer-export-*
$ ./configure --yasm=''

# FFmpegをチェックアウトするのにGitが必要
No FFmpeg checkout, press enter to download one with git or CTRL+C to abort

Cloning into 'ffmpeg'...

$ make 
$ sudo make install

$ which mplayer
/usr/local/bin/mplayer
||&lt;
**基本的な使い方
&gt;||
$ mplayer URL -dumpstream -dumpfile OUTPUT
||&lt;
でOK。試しに落としてみる…。URLはwgetコマンドで引っ張ってくる。
&gt;||
$ wget -O - http://origin.hibiki-radio.info/movie/asx/8/2080.asx
--2011-12-05 06:47:08--  http://origin.hibiki-radio.info/movie/asx/8/2080.asx
Resolving origin.hibiki-radio.info... 202.210.134.26
Connecting to origin.hibiki-radio.info|202.210.134.26|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 216 [video/x-ms-asf]
Saving to: `STDOUT'

 0% [                                                                       ] 0           --.-K/s              &lt;ASX version=&quot;3.0&quot;&gt;
    &lt;TITLE&gt;&amp;#65533;~&amp;#65533;&amp;#65533;&amp;#65533;L&amp;#65533;B3 #33 11/29&lt;/TITLE&gt;
    &lt;AUTHOR&gt;&lt;/AUTHOR&gt;
    &lt;COPYRIGHT&gt;&lt;/COPYRIGHT&gt;
    &lt;ENTRY&gt;
        &lt;REF HREF=&quot;mms://wms.hibiki-radio.info/hibiki1004/8_0_2080.wmv&quot; /&gt;
    &lt;/ENTRY&gt;
&lt;/ASX&gt;
100%[======================================================================&gt;] 216         --.-K/s   in 0s      

2011-12-05 06:47:08 (37.6 MB/s) - written to stdout [216/216]
||&lt;

&gt;||
$ mplayer mms://wms.hibiki-radio.info/hibiki1004/8_0_2080.wmv -dumpstream -dumpfile milky.wmv
MPlayer SVN-r34393-snapshot-4.4.5 (C) 2000-2011 MPlayer Team

Playing mms://wms.hibiki-radio.info/hibiki1004/8_0_2080.wmv.
STREAM_ASF, URL: mms://wms.hibiki-radio.info/hibiki1004/8_0_2080.wmv
Resolving wms.hibiki-radio.info for AF_INET6...

Couldn't resolve name for AF_INET6: wms.hibiki-radio.info
Resolving wms.hibiki-radio.info for AF_INET...
Connecting to server wms.hibiki-radio.info[202.210.134.27]: 1755...

connect error: Connection timed out
Resolving wms.hibiki-radio.info for AF_INET6...

Couldn't resolve name for AF_INET6: wms.hibiki-radio.info
Resolving wms.hibiki-radio.info for AF_INET...
Connecting to server wms.hibiki-radio.info[202.210.134.27]: 80...
Resolving wms.hibiki-radio.info for AF_INET6...

Couldn't resolve name for AF_INET6: wms.hibiki-radio.info
Resolving wms.hibiki-radio.info for AF_INET...
Connecting to server wms.hibiki-radio.info[202.210.134.27]: 80...

Cache size set to 180 KBytes
Stream not seekable!
dump: 3502080 bytes written
||&lt;
&gt;||
$ while : ; do date; ls -l mil*; sleep 1 ; done
Mon Dec  5 06:50:21 PST 2011
-rw-r--r-- 1 gosyujin gosyujin 946176 2011-12-05 06:50 milky.wmv
Mon Dec  5 06:50:22 PST 2011
-rw-r--r-- 1 gosyujin gosyujin 962560 2011-12-05 06:50 milky.wmv
Mon Dec  5 06:50:23 PST 2011
-rw-r--r-- 1 gosyujin gosyujin 970752 2011-12-05 06:50 milky.wmv
Mon Dec  5 06:50:24 PST 2011
-rw-r--r-- 1 gosyujin gosyujin 987136 2011-12-05 06:50 milky.wmv
Mon Dec  5 06:50:25 PST 2011
-rw-r--r-- 1 gosyujin gosyujin 1003520 2011-12-05 06:50 milky.wmv
Mon Dec  5 06:50:26 PST 2011
-rw-r--r-- 1 gosyujin gosyujin 1019904 2011-12-05 06:50 milky.wmv
Mon Dec  5 06:50:27 PST 2011
-rw-r--r-- 1 gosyujin gosyujin 1019904 2011-12-05 06:50 milky.wmv
Mon Dec  5 06:50:28 PST 2011
-rw-r--r-- 1 gosyujin gosyujin 1036288 2011-12-05 06:50 milky.wmv
Mon Dec  5 06:50:29 PST 2011
-rw-r--r-- 1 gosyujin gosyujin 1052672 2011-12-05 06:50 milky.wmv
Mon Dec  5 06:50:30 PST 2011
-rw-r--r-- 1 gosyujin gosyujin 1069056 2011-12-05 06:50 milky.wmv
Mon Dec  5 06:50:31 PST 2011
-rw-r--r-- 1 gosyujin gosyujin 1077248 2011-12-05 06:50 milky.wmv
||&lt;
もりもりDLなされている！　そしてちゃんと聞ける！

&lt;del datetime=&quot;2011-12-18T09:35:51+09:00&quot;&gt;次回は毎週お目当てのファイルを探し当てる旅にでます。&lt;/del&gt;
**次回
-[http://d.hatena.ne.jp/kk_Ataka/20111217/1324168464:title]
その前にダウンロードしたファイルを変換する事に。

</body>
</day>
<day date="2011-12-07" title="">
<body>
*1323291938*[Ruby][備忘録]ZenTestでRSpecを自動実行できるようにした

**あらすじ
ZenTestを使えばテストを*specファイルを変更したタイミングで実行できるという事を知った。
ファイル編集する -&gt; alt+tabでウィンドウ切り替える -&gt; プロンプトでrspecコマンドうつ…の繰り返しとはなんだったのか……。

**参考サイト
-[http://randd.kwappa.net/2011/08/07/338:title]
-[http://d.hatena.ne.jp/seiunsky/20100131/1264913047:title]

**環境
-Windows XP
-導入済み
--Ruby 1.8.7
--Rspec 2.5
--Rubygems バージョン失念
**手順
***ZenTest導入
まずはZenTestをgemで導入……しようと思ったらgem自体のアップデートを要求された。
&gt;||
gem update --system
||&lt;
アップした後はgem 1.8.10となった。gemを最新にしたらZenTestを導入。
&gt;||
gem install ZenTest
||&lt;
次にソースファイルを用意。Growlで何かしら通知するファイルを作りたかったのでそんな感じの名前に。
&gt;||
growl_for_ruby
┣.autotest
┣autotest
┃┗discover.rb
┣growl.rb　　　　# 実際にソースをゴリゴリ書いていく
┗spec
　┗growl_spec.rb # テストコード
||&lt;

***.autotest
これにはまだ何も書いていない。設定を書いていくらしい。

***autotest/discover.rb
autotestコマンド実行時にautotestフォルダに入っているdiscover.rbを読みに行くようだ。中身は以下。
&gt;|ruby|
Autotest.add_discovery { &quot;rspec2&quot; }
||&lt;
autotestでrspec 2.Xを使うよってことかな。

***spec/growl_spec.rb
テストコード。rspecの書き方にならってテストを書いていく。注意しないといけないのは、テストコードはspecフォルダ以下に入れないと読み込んでくれない。((ただし、どこかの設定で場所は変えられると書いてあった気がする。))

***テスト実行
一つ新しいプロンプトを開き、プロジェクトルートへ移動。そしてautotest実行。
&gt;||
$ autotest
loading autotest/rspec2
C:\ruby1.8\bin\ruby -rrubygems -S C:/ruby1.8/lib/ruby/gems/1.8/gems/rspec-core-2.5.1/bin/rspec --tty 'C:/xx/growl_for_ruby/spec/growl_spec.rb'
||&lt;
成功すると待ち状態になり。以後はコードを保存する毎？　にrspecコマンドが走ってくれる！

***その他
どうもRubyのPATHにスペースが入っているとLoad Errorとなる様子。&lt;del datetime=&quot;2011-12-08T06:05:38+09:00&quot;&gt;またお前か。&lt;/del&gt;ここでもデフォルトパスでインストールした弊害が……。

と、もう一つ。autotestの他にrspecにautospecというコマンドがあるらしく、こちらを叩いてもOK&quot;だった&quot;らしい。今は以下のようなメッセージが出る。訳は [http://d.hatena.ne.jp/smellman/20110310/1299727933:title] に記載されています。
&gt;||
************************************************************
REMOVAL NOTICE: you are using behaviour that has been
removed from rspec-2.

 * The 'autospec' command is no longer supported.
 * Please use 'autotest' insted.

This message will be removed from a future version of rspec.
************************************************************
||&lt;

**今後の予定

-動作原理をもう少し調べる
-rspecにオプションをつけて実行したい
-テスト結果をGrowlで通知したい

</body>
</day>
<day date="2011-12-08" title="">
<body>
*1323357042*[Solaris][備忘録]Solarisで現在のOSバージョンやパッチバージョンを確認する
&lt;del datetime=&quot;2011-12-10T09:14:42+09:00&quot;&gt;SPARC向けだろうか。&lt;/del&gt;そんなことなかったぜ！
**参考サイト
-[http://www.rose.sannet.ne.jp/nterasim/solaris/patch.html:title]

**unameコマンドでパッチ確認+α
uname(現在のシステム名の表示)コマンドを使用していろいろ取得する。
|*コマンド 引数|*意味|*出力内容|
|uname|OSの表示|SunOS|
|uname -n|ホスト名の表示|XXXXXXX|
|uname -r|OSリリースレベルの表示|5.10|
|uname -v|カーネルパッチバージョンの表示|Generic_999999-99|
|uname -m|マシンタイプの表示|sunXX|
|uname -p|プロセッサタイプの表示|sparc|
|uname -i|プラットフォーム名の表示|SUNXX,SPARC-ZZZZZZZZZZ|
|uname -a|全部|SunOS XXXXXXX 5.10 Generic_141999-99 (以下略)|
[f:id:kk_Ataka:20111210091242j:image]
パッチは6ケタのパッチ番号と2ケタのバージョンで管理されている。上記の例だと999999がパッチ番号で99がバージョン。

**当たっているパッチ一覧の確認
現在当たっているパッチの一覧は以下のコマンドで表示できる。
&gt;||
$ showrev -p
||&lt;
&gt;||
$ patchadd -p
||&lt;
[f:id:kk_Ataka:20111210091241j:image]
後は grep と組み合わせて当たっているパッチと当たっていないパッチを精査していく？
一応、当てたパッチのログは /var/sadm/patch/パッチID/log に残されているので、こっちを見るとパッチがどこまで当たっているかわかりやすい？？

patchcheckというスクリプトを使えば更新状況がわかるようだが、内部で閉じているサーバ環境だと使えないか。

</body>
</day>
<day date="2011-12-09" title="">
<body>
*1323474254*[Unix][備忘録][Solaris]Unixでファイル圧縮・解凍するときに使うコマンドをまとめた

**あらすじ
不意に.Zファイルがやってきて解凍の仕方を調べてしまった。あとだいたいオプションを忘れるのでメモ。対象ファイルは以下。
+.zip
+.Z
+.gz
+.bz2
+.tar.gz
+.tgz
+.tar.bz2
+.tbz
+.tar.Z
こんなファイルを固めたり解凍したり。
&gt;||
extracted
┣direct/
┃┗ls.txt # man ls &gt;&gt; ls.txt
┣slink
┣tar.txt  # man tar &gt;&gt; tar.txt
┗zip.txt  # man zip &gt;&gt; zip.txt
||&lt;
&gt;||
tar
┗sample.tar
$ tar tvf sample.tar ../extracted
drwxr-xr-x 9999/9999      0 12月  8日 19:14 2011年 ../extracted/
lrwxrwxrwx 9999/9999      7 12月  8日 19:13 2011年 ../extracted/slink tar.txt へのシンボリックリンク
drwxr-xr-x 9999/9999      0 12月  8日 19:37 2011年 ../extracted/direct/
-rw-r--r-- 9999/9999  36890 12月  8日 19:37 2011年 ../extracted/direct/ls.txt
-rw-r--r-- 9999/9999  39133 12月  8日 19:07 2011年 ../extracted/tar.txt
-rw-r--r-- 9999/9999  40835 12月  8日 19:11 2011年 ../extracted/zip.txt
||&lt;

**zip(unzip) 拡張子: zip
-圧縮
--zip 圧縮後のファイル名 [ファイル ファイル]
&gt;||
$ zip ../compressed/c.zip *
  adding: direct/ (stored 0%)
  adding: slink (deflated 71%)
  adding: tar.txt (deflated 71%)
  adding: zip.txt (deflated 67%)
||&lt;
&gt;||
$ zip -r ../compressed/c.zip *
  adding: direct/ (stored 0%)
  adding: direct/ls.txt (deflated 75%)
  adding: slink (deflated 71%)
  adding: tar.txt (deflated 71%)
  adding: zip.txt (deflated 67%)
||&lt;
-解凍
--unzip 解凍ファイル.zip -d 解凍パス
&gt;||
$ unzip ../compressed/c.zip -d ../compressed/output/zip/
Archive:  ../compressed/c.zip
   creating: ../compressed/output/zip/direct/
  inflating: ../compressed/output/zip/direct/ls.txt
  inflating: ../compressed/output/zip/slink
  inflating: ../compressed/output/zip/tar.txt
  inflating: ../compressed/output/zip/zip.txt
||&lt;
rでディレクトリの下も含めてまとめて。解凍時にdでパス指定

**compress(uncompress) 拡張子: Z, tar.Z
-圧縮
--compress -fv [ファイル ファイル]
&gt;||
$ compress -fv *
direct: 圧縮: 86.32% -- 通常ファイルではありません: 変更されていません。
slink: 圧縮: 60.13% -- slink.Z と置換しました。
tar.txt: 圧縮: 60.13% -- tar.txt.Z と置換しました。
zip.txt: 圧縮: 57.45% -- zip.txt.Z と置換しました。
||&lt;
&gt;||
$ compress -v sample.tar
sample.tar: 圧縮: 60.78% -- sample.tar.Z と置換しました。
||&lt;
-解凍
--compress -dv [ファイル ファイル]
--uncompress -v [ファイル ファイル]
&gt;||
$ compress -dv *
direct.Z: ファイルもディレクトリもありません。
slink.Z:  -- slink と置換しました。
tar.txt.Z:  -- tar.txt と置換しました。
zip.txt.Z:  -- zip.txt と置換しました
||&lt;
&gt;||
$ uncompress -v *
direct.Z: ファイルもディレクトリもありません。
slink.Z:  -- slink と置換しました。
tar.txt.Z:  -- tar.txt と置換しました。
zip.txt.Z:  -- zip.txt と置換しました。
||&lt;
&gt;||
$ compress -dv sample.tar.Z
sample.tar.Z:  -- sample.tar と置換しました。
||&lt;
&gt;||
$ uncompress -v sample.tar.Z
sample.tar.Z:  -- sample.tar と置換しました
||&lt;
そのファイル自体が置換される？　fは強制(圧縮しても小さくならない、ファイルが既に存在する場合も上書き)、vは冗長、dは解凍？

**gzip(gunzip) 拡張子: gz, tar.gz, tgz
-圧縮
--gzip [ファイル ファイル]
&gt;||
$ gzip -rv *
direct/ls.txt:   75.2% -- replaced with direct/ls.txt.gz
slink:   71.3% -- replaced with slink.gz
tar.txt:         71.3% -- replaced with tar.txt.gz
zip.txt:         66.7% -- replaced with zip.txt.gz
||&lt;
&gt;||
$ gzip -v sample.tar
sample.tar:      72.2% -- replaced with sample.tar.gz
||&lt;
-解凍
--gzip -d [ファイル ファイル]
--gunzip [ファイル ファイル]
&gt;||
$ gzip -rdv *
direct/ls.txt.gz:        75.2% -- replaced with direct/ls.txt
slink.gz:        71.3% -- replaced with slink
tar.txt.gz:      71.3% -- replaced with tar.txt
zip.txt.gz:      66.7% -- replaced with zip.txt
||&lt;
&gt;||
$ gunzip -rv *
direct/ls.txt.gz:        75.2% -- replaced with direct/ls.txt
slink.gz:        71.3% -- replaced with slink
tar.txt.gz:      71.3% -- replaced with tar.txt
zip.txt.gz:      66.7% -- replaced with zip.txt
||&lt;
&gt;||
$ gzip -dv sample.tar.gz
sample.tar.gz:   72.2% -- replaced with sample.tar
||&lt;
&gt;||
$ gunzip -v sample.tar.gz
sample.tar.gz:   72.2% -- replaced with sample.tar
||&lt;
そのファイル自体が置換される？　fは強制。vは冗長。dで解凍。

**bzip2(bunzip2) 拡張子: bz2, tar.bz2, tbz
-圧縮
--bzip2 [ファイル ファイル]
&gt;||
$ bzip2 -v *
bzip2: Input file direct is a directory.
  slink:    4.001:1,  1.999 bits/byte, 75.01% saved, 39133 in, 9780 out.
  tar.txt:  4.001:1,  1.999 bits/byte, 75.01% saved, 39133 in, 9780 out.
  zip.txt:  3.355:1,  2.384 bits/byte, 70.19% saved, 40835 in, 12171 out.
||&lt;
&gt;||
$ bzip2 -v sample.tar
  sample.tar:  4.165:1,  1.921 bits/byte, 75.99% saved, 121856 in, 29256 ou
t.
||&lt;
-解凍
--bzip2 -d [ファイル ファイル]
--bunzip2 [ファイル ファイル]
&gt;||
$ bzip2 -dv *
bzip2: Input file direct is a directory.
  slink.bz2:   done
  tar.txt.bz2: done
  zip.txt.bz2: done
||&lt;
&gt;||
$ bunzip2 -v *
bunzip2: Input file direct is a directory.
  slink.bz2:   done
  tar.txt.bz2: done
  zip.txt.bz2: done
||&lt;
&gt;||
$ bzip2 -dv sample.tar.bz2
  sample.tar.bz2: done
||&lt;
&gt;||
$ bunzip2 -v sample.tar.bz2
  sample.tar.bz2: done
||&lt;
そのファイル自体が置換される？　fは強制。vは冗長。dで解凍。ディレクトリの下は指定しないとダメ？

**圧縮結果(参考)
&gt;||
-rw-r--r--   1 test    test      47784 12月  8日  21:38 sample.tar.Z
-rw-r--r--   1 test    test      29256 12月  8日  21:41 sample.tar.bz2
-rw-r--r--   1 test    test      33934 12月  8日  21:21 sample.tar.gz
||&lt;
今回の結果だと、ファイルサイズはおおむね Z &gt; gz &gt; bz2 になっている。

</body>
</day>
<day date="2011-12-10" title="">
<body>
*1323541524*[Solaris][備忘録]tarコマンドでzオプションを使わずにファイルを解凍する

**あらすじ
Solarisにデフォルトで入っているtarではzオプションなどが使えない。のでtar.gzやtar.bz2ファイルを一発で解凍するにはパイプでつないでやる必要がある。
**コマンド
&gt;||
$ gzip -cd xxxx.tar.gz | tar -xvf -
||&lt;
こんな感じ。cオプションを指定してやる。……やってる事はわかるけど、tarの最後にあるハイフンはなんじゃろう。tar -f -で標準入力から持ってくるルール？
-[http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1120031991:title]
ふむ。マニュアルを見てみる。
&gt;&gt;
    tarfile の名前が - である場合は、tarは標準出
    力への書き込みあるいは標準入力からの読み取り
    のいずれか適当な操作を行います。tarはパイプ
    ラインの先頭もしくは末尾として使用することが
    できます。また、次のコマンドを使えば、tar
    は、 ディレクトリ階層を移動するためにも使用す
    ることができます。
&lt;&lt;
ルールだったようだ。

</body>
</day>
<day date="2011-12-11" title="">
<body>
*1323617084*[イベント][java-ja]java-ja忘年会に参加しました2011

**今年は秋葉原
の北海道。今年は日曜日だったので余裕を持って3年連続3度目の出場を決められた。自分の正面には[http://twitter.com/#!/daisuke_m:title=@daisuke_m]さんが！　超緊張して全然話ができなかった……。とても眠そうでらした[http://twitter.com/#!/drillbits:title=@drillbits]さんとも初対面だった。が、もしかしたらBPStudyなどでお会いしていたかもしれない。

**いろんな話題とサンタ的ななにか
「PHPは育てるとかわいくなる」とか「ゲームはPC、XBOX、PS3で出すにはどのくらい大変なんだろう？　AndroidとiOSで同じアプリ同時にリリースしろって言われたら困る」とか「ドキュメントはこっちで自由に作ってPDFで送付します、ただし微妙にレイアウトが違うのを指摘される」とか「ブログ持ってTwitterやってGitHubに作ったサービス登録して自分をアピールできる時代」いう話題が繰り広げられる中、違う島ではD社の就職説明会が開催されたり、サンタのようなものが会場を練り歩いたりしていました。

サンタのようなものはどこかにアップされてそうなのでそちらを参照してください。(java-ja サンタ とかでググる？)

**個人的な
-[http://twitter.com/#!/Jxck_:title=@Jxck_]さんに以前Sphinxを教えてもらって以来使ってます！　弊社内一人で！　報告ができてよかった
-[http://twitter.com/#!/fd0:title=いけむら]さんと日々の作業の効率化について少しお話させて頂き、作業を効率化して浮いた時間を有効に使い…という正のループにハマれるようにちょっと気持ちを引き締めて明日からまた生きようと思いました

**最後に
幹事の[http://twitter.com/#!/yamashiro:title=@yamashiro]さんいつもお疲れ様です！　いつか冬場のリップクリームの件についてお話させてください＞＜
</body>
</day>
<day date="2011-12-12" title="">
<body>
*1323701022*[Unix][Shell][備忘録][Solaris]ファイルの拡張子を見て適切なコマンドで解凍してくれるスクリプトを組んだ
-[http://d.hatena.ne.jp/kk_Ataka/20111209/1323474254:title]
-[http://d.hatena.ne.jp/kk_Ataka/20111210/1323541524:title]
を基に引数に指定したらよろしく解凍してくれるスクリプトを組んでみる。とりあえずオプション指定できないし圧縮できないけど必要になったら実装していこう。
&lt;script src=&quot;https://gist.github.com/1460871.js?file=autocompress.sh&quot;&gt;&lt;/script&gt;

</body>
</day>
<day date="2011-12-13" title="">
<body>
*1323783496*[Subversion][備忘録][Unix]svn updateコマンド以外でリビジョン番号を抜き出す

**あらすじ
svnのリビジョン番号だけ抜き出したい。アップデートなしで！　svn updateするとリビジョンは出てくれるんだけど、アップデート走らせないようにリビジョン番号だけ抜き出したい。
&gt;||
$ svn up
リビジョン 111 です
||&lt;

**&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;続編&lt;/span&gt;
-[http://d.hatena.ne.jp/kk_Ataka/20111216/1324086694:title]
&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;以下はとてもめんどくさい方法での実現となります。&lt;/span&gt;

**試行錯誤
***svn log
svn logで表示したリビジョンを抽出する。limit N で出力するログを制御。
&gt;||
$ /usr/local/bin/svn log --limit 1
------------------------------------------------------------------------
r111 | kk_Ataka | 2011-12-17 11:51:11 +0900 ((金), 17 12月 2011) | 3 lines

コミットログ
...
...

||&lt;
まずは最新ログをひとつだけ取得。
***grep
次にリビジョンが記載してある行だけ抽出。
&gt;||
$ /usr/local/bin/svn log --limit 1 | grep ^r.*lines$
r111 | kk_Ataka | 2011-12-17 11:51:11 +0900 ((金), 17 12月 2011) | 3 lines
||&lt;
***sed
最後にその行からsedコマンドで「rXX」だけを抜き出し。
&gt;||
$ /usr/local/bin/svn log --limit 1 | grep ^r.*lines$ | sed -e &quot;s/^\(r[0-9]*\) .*/\1/g&quot; 
r111
||&lt;
めんどくさ！　なんか使ったことないコマンドから一発で出せる気がする……。

</body>
</day>
<day date="2011-12-14" title="">
<body>
*1323868360*[Unix][備忘録][さくらVPS][StartUp]さくらVPSの初期設定メモ
さくらVPSで最初に行ったとりあえず最低クラスの設定を発掘したのでメモ。OSはCentOSか。

**参考サイト
-[http://blog.myfinder.jp/2010/09/vpsssh.html:title]
-[http://d.hatena.ne.jp/h-yano/20080225/1203952174:title]
-[http://d.hatena.ne.jp/rubellum/20100901/1283321253:title]
-[http://havelog.ayumusato.com/develop/server/e135-sakura-vps-setup1.html:title]

**サーバ
ユーザを作成する。
&gt;||
# useradd kk_Ataka
# passwd  kk_Ataka
||&lt;
ユーザをwheelグループに。
&gt;||
# usermod -G wheel kk_Ataka
||&lt;
**クライアント
鍵を作る。
&gt;||
$ ssh-keygen -t rsa
||&lt;
鍵をサーバに送る。(既に作ってある場合は~/.ssh/にあるid_rsa.pubを)
&gt;||
$ scp id_rsa.pub USER@ADDRESS:PATH
||&lt;
※ポート変えた場合はscpコマンドに -P ポート番号 をつける。
&gt;||
$ scp -P PORT id_rsa.pub USER@ADDRESS:PATH
||&lt;
**再びサーバ
***SSHの設定
鍵を受け取ったらホームディレクトリに.sshディレクトリを作りコピー。
&gt;||
$ mkdir .ssh
$ mv id_rsa.pub .ssh/authorized_keys
||&lt;
権限を変更。
&gt;||
$ chmod 700 ~demo/.ssh
$ chmod 600 ~demo/.ssh/authorized_keys
||&lt;
sshd_configファイルを編集。
&gt;||
# vi /etc/ssh/sshd_config
||&lt;
&gt;|?|
# 使用ポートをデフォルトから変更
Port XXXXX 
# sshでrootでのログインを許可しない
PermitRootLogin no
# パスワード認証でのsshログインを許可しない
PasswordAuthentication no
# PAMによる認証を許可しない
UsePAM no
||&lt;
編集したら再起動。((もしくはservice sshd restart？))
&gt;||
# /etc/init.d/sshd restart
||&lt;
***sudoコマンド
wheelグループがsudoコマンド使えるように。
&gt;||
# visudo
||&lt;
&gt;||
%wheel  ALL=(ALL)       ALL  
||&lt;
rootアカウントをロック。
&gt;||
# passwd -l root  
||&lt;
アンロックするにはuオプション。
&gt;||
# passwd -u root
||&lt;

</body>
</day>
<day date="2011-12-15" title="">
<body>
*1323951847*[Ruby][Solaris][備忘録][Redmine]RedmineとApacheを連携させるPassengerをインストールできなかった
**あらすじ
-Redmineを自動起動するようにしたい
--Phusion Passenger(mod_rails for Apache)を使えばApacheと連携できるらしい
&gt;http://redmine.jp/tech_note/apache-passenger/&gt;
特徴
    * Apache単独でRailsアプリケーションを実行可能です。Apacheのモジュールとして実装されており、別途デーモンを起動する必要がありません。tcpポートも使いません。
    * Railsアプリケーションのデプロイが簡単になります。ファイルをアップロードするだけ。ほぼPHP感覚です。
    * サーバのメモリを節約できます。Railsインスタンスは必要なタイミングで生成します。また、一定時間アクセスがなければインスタンスを終了させます。
&lt;&lt;
ふーむ。

**参考サイト
-[http://redmine.jp/faq/system_management/redmine-auto-start/:title]
-[http://redmine.jp/tech_note/apache-passenger/:title]
-[http://d.hatena.ne.jp/rx7/20080412/p1:title]
-[http://d.hatena.ne.jp/r7kamura/20110212/1297452845:title]

**手順
***passengerインストール
Passengerを使うにはfastthread、daemon_controllerが必要らしい。
&gt;||
$ gem install --local fastthread-1.0.7.gem
$ gem install --local daemon_controller-0.2.6.gem
$ gem install --local passenger-3.0.9.gem
||&lt;
※スタンドアロンなマシンだったため。ネットにつながっていればgem install passengerで全部入るはず。

**passenger-install-apache2-module実行
対話形式でApacheのモジュール等を確認・インストールしていく。はじめにpassener-install-apache2-moduleを実行するとこんなメッセージが出てくる。
&gt;||
$ passenger-install-apache2-module
Welcome to the Phusion Passenger Apache 2 module installer, v3.0.9.

This installer will guide you through the entire installation process. It
shouldn't take more than 3 minutes in total.

Here's what you can expect from the installation process:

 1. The Apache 2 module will be installed for you.
 2. You'll learn how to configure Apache.
 3. You'll learn how to deploy a Ruby on Rails application.

Don't worry if anything goes wrong. This installer will advise you on how to
solve any problems.

Press Enter to continue, or Ctrl-C to abort.
||&lt;
+Apacheモジュールをインストールしたい
+Apacheの設定を知りたい
+Railsアプリのデプロイ方法をしりたい
の中から一つ選んだらアドバイスしてやるよっと言っている？　のようなので1を選択。必要なソフトウェアがインストールされているかチェックされる。
&gt;||
Checking for required software...

 * GNU C++ compiler... found at /usr/local/bin/g++
 * Curl development headers with SSL support... not found
 * OpenSSL development headers... not found
 * Zlib development headers... found
 * Ruby development headers... found
 * OpenSSL support for Ruby... found
 * RubyGems... found
 * Rake... found at /usr/local/bin/rake
 * rack... found
 * Apache 2... not found
 * Apache 2 development headers... not found
 * Apache Portable Runtime (APR) development headers... not found
 * Apache Portable Runtime Utility (APU) development headers... not found

Some required software is not installed.
But don't worry, this installer will tell you how to install them.

Press Enter to continue, or Ctrl-C to abort.
||&lt;
結構インストールされていないものが多いな。メッセージでも「いろいろ入っていないものが見受けられるが心配すんな、俺がお前にインストール方法教えてやるよ！」と言われているようのでそのままエンター。
&gt;||
Installation instructions for required software

 * To install Curl development headers with SSL support:
   Please download Curl from http://curl.haxx.se/libcurl and make sure you install it with SSL support.

 * To install OpenSSL development headers:
   Please download it from http://www.openssl.org/

 * To install Apache 2:
   Please download it from http://httpd.apache.org/

 * To install Apache 2 development headers:
   Please download it from http://httpd.apache.org/

 * To install Apache Portable Runtime (APR) development headers:
   Please download it from http://httpd.apache.org/
   (APR is an integrated part of Apache.)

 * To install Apache Portable Runtime Utility (APU) development headers:
   Please download it from http://httpd.apache.org/
   (APR Utility is an integrated part of Apache.)

If the aforementioned instructions didn't solve your problem, then please take
a look at the Users Guide:

  /usr/local/lib/ruby/gems/1.8/gems/passenger-3.0.9/doc/Users guide Apache.html
||&lt;
どこに何があるかUrlなどを教えてくれた。親切！

**足りないもの集め
***Curl
-http://www.blastwave.org/pkg/pkgcontents.ftd?software=curl&amp;style=brief&amp;state=5&amp;arch=i386 から
-ディストリビューションを選択しパッケージをDL
--依存ファイルもあるので注意
-libidnとかlibssh2が足りなかったのでcurlが実行できない
--not found状態になっていた

***Apache
-Apacheはあるはずなんだけどなあ。うまく見てくれてない
-/usr/local/apache2/binにパスを通したらApache 2 development headerはfoundになった
--え？　Apache 2 development headerだけ？　他は？

***OpenSSL
-OpenSSL development headersはなぜ入っていないのかわからなかった
-パッケージをpkgaddしただけではダメ？
--Solarisにopenssl-develみたいなものはある？
-この文章を読むとソースから入れればよさそうなのだが…
&gt;http://www.sunhelp.org/pipermail/sunhelp/2003-September/019267.html&gt;
Does anyone know where I can obtain openssl-devel source or package for
solaris.  I am trying to compile courier-imap-2.1.1 and it bombs out in
the make process with the following error:
&lt;&lt;
&gt;http://www.sunhelp.org/pipermail/sunhelp/2003-September/019268.html&gt;
You can download complete OpenSSL source from www.openssl.org.
&lt;&lt;
-configのオプションに --openssldir を指定してみてもダメだった。

**とかなんとかしてるうちに
Rubyが実行できなくなった。lddで調べてみると、シンボルが見つからなくなっている。
&gt;||

        librt.so.1 =&gt;    /usr/lib/librt.so.1
        libdl.so.1 =&gt;    /usr/lib/libdl.so.1
        libcrypt_d.so.1 =&gt;       /usr/lib/libcrypt_d.so.1
        libm.so.2 =&gt;     /usr/lib/libm.so.2
        libc.so.1 =&gt;     /usr/lib/libc.so.1
        libgcc_s.so.1 =&gt;         /usr/local/lib//libgcc_s.so.1
        libaio.so.1 =&gt;   /usr/lib/libaio.so.1
        libmd.so.1 =&gt;    /usr/lib/libmd.so.1
        libgen.so.1 =&gt;   /usr/lib/libgen.so.1
        シンボルが見つかりません: rb_cObject          (./md5.so)
        シンボルが見つかりません: MD5_Update          (./md5.so)
        シンボルが見つかりません: MD5_Init            (./md5.so)
        シンボルが見つかりません: MD5_Finish          (./md5.so)
        /platform/SPARC-XXXX/lib/libc_psr.so.1
        /platform/SPARC-XXXX/lib/libmd_psr.so.1
||&lt;
md5.soを調べてみる。
&gt;||
$ cd /usr/local/lib/ruby/1.8/sparc-solaris2.10/digest
$ ldd -d md5.so
        librt.so.1 =&gt;    /usr/lib/librt.so.1
        libdl.so.1 =&gt;    /usr/lib/libdl.so.1
        libcrypt_d.so.1 =&gt;       /usr/lib/libcrypt_d.so.1
        libm.so.2 =&gt;     /usr/lib/libm.so.2
        libc.so.1 =&gt;     /usr/lib/libc.so.1
        libgcc_s.so.1 =&gt;         /usr/local/lib//libgcc_s.so.1
        libaio.so.1 =&gt;   /usr/lib/libaio.so.1
        libmd.so.1 =&gt;    /usr/lib/libmd.so.1
        libgen.so.1 =&gt;   /usr/lib/libgen.so.1
        シンボルが見つかりません: rb_cObject          (./md5.so)
        /platform/SUNW,SPARC-Enterprise-T5120/lib/libc_psr.so.1
        /platform/SUNW,SPARC-Enterprise-T5120/lib/libmd_psr.so.1
||&lt;
Ruby本体の中でなんかやっちゃったのかな？

結局Rubyを再インストールしたらこのエラーは消えた。

**今後
-とりあえず、違うOSでPassenger入れなおしてみる

</body>
</day>
<day date="2011-12-16" title="">
<body>
*1324086694*[Subversion][Unix][備忘録]svn infoコマンドでリビジョン番号を抜き出す

**前回までのあらすじ
-[http://d.hatena.ne.jp/kk_Ataka/20111213/1323783496:title]

**もっとよい方法
どう考えても他にやり方があるだろうと思っていたらやっぱりあった。[http://twitter.com/#!/jun66j5:title=@jun66j5]さんよりTwitterで教えてもらいました。ありがとうございます。

[twitter:147687551027781632:detail]

svn infoコマンドで見られるのか。というわけで(全然使ってない)プロジェクトで試してみた。まず普通。
&gt;||
$ svn info
パス: .
URL: file:///home/kk_Ataka/svn/xxxx
リポジトリのルート: file:///home/kk_Ataka/svn/xxxx
リポジトリ UUID: 99999999-9999-9999-9999-999999999999
リビジョン: 4
ノード種別: ディレクトリ
準備中の処理: 特になし
最終変更者: user
最終変更リビジョン: 4
最終変更日時: 2010-12-29 21:31:44 +0900 (水, 29 12月 2010)
||&lt;
ロケールをen_USに。
&gt;||
$ LC_ALL=en_US.UTF8 svn info
Path: .
URL: file:///home/kk_Ataka/svn/xxxx
Repository Root: file:///home/kk_Ataka/svn/xxxx
Repository UUID: 99999999-9999-9999-9999-999999999999
Revision: 4
Node Kind: directory
Schedule: normal
Last Changed Author: user
Last Changed Rev: 4
Last Changed Date: 2010-12-29 21:31:44 +0900 (Wed, 29 Dec 2010)
||&lt;
xml形式で出力もできる。
&gt;|xml|
$ svn info --xml
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;info&gt;
&lt;entry
   kind=&quot;dir&quot;
   path=&quot;.&quot;
   revision=&quot;4&quot;&gt;
&lt;url&gt;file:///home/kk_Ataka/svn/xxxx&lt;/url&gt;
&lt;repository&gt;
&lt;root&gt;file:///home/kk_Ataka/svn/xxxx&lt;/root&gt;
&lt;uuid&gt;99999999-9999-9999-9999-999999999999&lt;/uuid&gt;
&lt;/repository&gt;
&lt;wc-info&gt;
&lt;schedule&gt;normal&lt;/schedule&gt;
&lt;/wc-info&gt;
&lt;commit
   revision=&quot;4&quot;&gt;
&lt;author&gt;user&lt;/author&gt;
&lt;date&gt;2010-12-29T12:31:44.294483Z&lt;/date&gt;
&lt;/commit&gt;
&lt;/entry&gt;
&lt;/info&gt;
||&lt;
ってことは、これをgrepすれば……。
&gt;||
$ LC_ALL=en_US.UTF8 svn info | grep Revision
Revision: 4
||&lt;
簡単にとれた！　けど、ちゃんと調べないといかんなーこんな簡単に取れるものを敢えて難しくとる必要ないしな。

</body>
<comments>
<comment>
<username>discypus</username>
<body>svnversion ではいかが?</body>
<timestamp>1324629831</timestamp>
</comment>
<comment>
<username>kk_Ataka</username>
<body>確認してみたら、そのコマンドありました！&lt;br&gt;これが一番簡単ですね。ありがとうございます！</body>
<timestamp>1324741178</timestamp>
</comment>
</comments>
</day>
<day date="2011-12-17" title="">
<body>
*1324168464*[Unix][備忘録]Unixでwmvファイルを他のファイルフォーマットに変換したい
**前回までのあらすじ
-[http://d.hatena.ne.jp/kk_Ataka/20111206/1323186439:title]
ダウンロードしたwmvファイルを他のファイルフォーマットに変換したい。

**参考サイト
-[http://d.hatena.ne.jp/griffith181/20090302/1235980536:title]

**インストール
ソースをgit clone で取得してくる。
&gt;||
$ git clone git://source.ffmpeg.org/ffmpeg.git ffmpeg
Cloning into ffmpeg...
remote: Counting objects: 192168, done.
remote: Compressing objects: 100% (43840/43840), done.
remote: Total 192168 (delta 150640), reused 188926 (delta 148049)
Receiving objects: 100% (192168/192168), 49.63 MiB | 278 KiB/s, done.
Resolving deltas: 100% (150640/150640), done.
||&lt;
&gt;||
$ ./configure --disable-yasm
$ make
$ sudo make install
||&lt;

**使い方
基本的に-iオプションでインプットファイルを選択すれば使えるはずなのだが……。
&gt;||
$ ffmpeg -i input.wmv -acodec copy output.mp3
ffmpeg version N-35890-g83b4671, Copyright (c) 2000-2011 the FFmpeg developers
  built on Dec 17 2011 22:36:09 with gcc 4.1.2 20080704 (Red Hat 4.1.2-48)
  configuration: --disable-yasm
  libavutil    51. 32. 0 / 51. 32. 0
  libavcodec   53. 46. 0 / 53. 46. 0
  libavformat  53. 26. 0 / 53. 26. 0
  libavdevice  53.  4. 0 / 53.  4. 0
  libavfilter   2. 53. 0 /  2. 53. 0
  libswscale    2.  1. 0 /  2.  1. 0
Input #0, asf, from 'input.wmv':
  Metadata:
    WMFSDKVersion   : 12.0.7601.17514
    WMFSDKNeeded    : 0.0.0.0000
    IsVBR           : 0
  Duration: 00:40:30.10, start: 0.000000, bitrate: 110 kb/s
    Stream #0:0: Audio: wmav2 (a[1][0][0] / 0x0161), 44100 Hz, 2 channels, s16, 96 kb/s
Output #0, mp3, to 'output.mp3':
  Metadata:
    WMFSDKVersion   : 12.0.7601.17514
    WMFSDKNeeded    : 0.0.0.0000
    IsVBR           : 0
    TSSE            : Lavf53.26.0
    Stream #0:0: Audio: wmav2 (a[1][0][0] / 0x0161), 44100 Hz, 2 channels, 96 kb/s
Stream mapping:
  Stream #0:0 -&gt; #0:0 (copy)
Press [q] to stop, [?] for help
size=   28464kB time=00:40:30.10 bitrate=  96.0kbits/s   
video:0kB audio:28464kB global headers:0kB muxing overhead 0.001513%

||&lt;
エラーは出ていないが、再生ができない。多分copyだとダメなのかな…。

試しに他のフォーマットで変換してみたら、mp4だとうまくいった。
&gt;||
$ ffmpeg -i input.wmv output.mp4
ffmpeg version N-35890-g83b4671, Copyright (c) 2000-2011 the FFmpeg developers
  built on Dec 17 2011 22:36:09 with gcc 4.1.2 20080704 (Red Hat 4.1.2-48)
  configuration: --disable-yasm
  libavutil    51. 32. 0 / 51. 32. 0
  libavcodec   53. 46. 0 / 53. 46. 0
  libavformat  53. 26. 0 / 53. 26. 0
  libavdevice  53.  4. 0 / 53.  4. 0
  libavfilter   2. 53. 0 /  2. 53. 0
  libswscale    2.  1. 0 /  2.  1. 0
Input #0, asf, from 'input.wmv':
  Metadata:
    WMFSDKVersion   : 12.0.7601.17514
    WMFSDKNeeded    : 0.0.0.0000
    IsVBR           : 0
  Duration: 00:40:30.10, start: 0.000000, bitrate: 110 kb/s
    Stream #0:0: Audio: wmav2 (a[1][0][0] / 0x0161), 44100 Hz, 2 channels, s16, 96 kb/s
encoder 'aac' is experimental and might produce bad results.
Add '-strict experimental' if you want to use it.

||&lt;
ん、-strict experimentalを付けないとだめらしい。
&gt;||
$ ffmpeg ｰn -i input.wmv -strict experimental output.mp4
ffmpeg version N-35890-g83b4671, Copyright (c) 2000-2011 the FFmpeg developers
  built on Dec 17 2011 22:36:09 with gcc 4.1.2 20080704 (Red Hat 4.1.2-48)
  configuration: --disable-yasm
  libavutil    51. 32. 0 / 51. 32. 0
  libavcodec   53. 46. 0 / 53. 46. 0
  libavformat  53. 26. 0 / 53. 26. 0
  libavdevice  53.  4. 0 / 53.  4. 0
  libavfilter   2. 53. 0 /  2. 53. 0
  libswscale    2.  1. 0 /  2.  1. 0
Input #0, asf, from 'input.wmv':
  Metadata:
    WMFSDKVersion   : 12.0.7601.17514
    WMFSDKNeeded    : 0.0.0.0000
    IsVBR           : 0
  Duration: 00:40:30.10, start: 0.000000, bitrate: 110 kb/s
    Stream #0:0: Audio: wmav2 (a[1][0][0] / 0x0161), 44100 Hz, 2 channels, s16, 96 kb/s
Output #0, mp4, to 'output.mp4':
  Metadata:
    WMFSDKVersion   : 12.0.7601.17514
    WMFSDKNeeded    : 0.0.0.0000
    IsVBR           : 0
    encoder         : Lavf53.26.0
    Stream #0:0: Audio: aac (@[0][0][0] / 0x0040), 44100 Hz, 2 channels, s16, 128 kb/s
Stream mapping:
  Stream #0:0 -&gt; #0:0 (wmav2 -&gt; aac)
Press [q] to stop, [?] for help
size=   37922kB time=00:40:30.10 bitrate= 127.8kbits/s   
video:0kB audio:37513kB global headers:0kB muxing overhead 1.091713%

||&lt;
これでできた。

**オプション
|*-y|アウトプットファイルを上書きする|
|*-n|アウトプットファイルを上書きしない|
|*-i|インプットファイル指定|
|*-acodec|オーディオコーデック(copyでコピー)|
|*-strict|厳密さ(very &gt; strict &gt; normal(デフォルト) &gt; unofficial &gt; experimental)|

うーんできることが多すぎて惑う。

</body>
</day>
<day date="2011-12-18" title="">
<body>
*1324219740*[Unix][備忘録][Vim]Vimを使い始めるためにインストールから設定まで行った
**あらすじ
-[http://atnd.org/events/21925:title] を見てvim使いたいと思った！

**参考サイト
-[http://d.hatena.ne.jp/osyo-manga/20111201/1322665228:title]
-[http://d.hatena.ne.jp/arcright/20100207/1265551998:title]
-http://sites.google.com/site/vimdocja/various-html
-[http://www.hazama.nu/t2o2/archives/002696.shtml:title]
-[http://blog.ville.jp/2011/03/11/536:title]
-[http://ystyle.jpn.org/geekstyle/archives/9:title]

**ダウンロード
はじめにVimをgetする。
&gt;||
$ wget ftp://ftp.vim.org/pub/vim/unix/vim-7.3.tar.bz2
||&lt;
次にvim7.3の最新のパッチファイルを確認して、ftp://ftp.vim.org/pub/vim/patches/7.3/からダウンロードする。今382だった。
&gt;||
$ cd vim73
$ mkdir patches
$ curl -O 'ftp://ftp.vim.org/pub/vim/patches/7.3/7.3.[001-382]'
$ cd ../
$ cat patches/7.3.* | patch -p0
patching file src/misc1.c
patching file src/version.c
patching file src/ex_docmd.c
patching file src/version.c
.
.
.
||&lt;
patchコマンドって使った事ないなーと思い、-p0ってなんぞやとman patchしてみる……。
&gt;&gt;
 -pnum  または  --strip=num
　　　パッチファイルで見つかったファイル名それぞれについて、 num 個の
　　　スラッシュを含む最小のプレフィクスを取り除く。隣接した 1 個また
　　　は複数のスラッシュの並びは 1 個のスラッシュとして数えられる。こ
　　　のオプションはパッチを送った人と異なるディレクトリにファイルを
　　　格納している場合のために、パッチファイル中のファイル名の扱いを
　　　変更する。例えば、パッチファイル中のファイル名が

　　　/u/howard/src/blurfl/blurfl.c

　　　であったとすると、 -p0 とするとファイル名全体が変更されずに用い
　　　られ、 -p1 とすると

　　　u/howard/src/blurfl/blurfl.c

　　　のように先頭のスラッシュが取り除かれ、 -p4 とすると

　　　blurfl/blurfl.c

　　　のようになり、 -p を指定しなければ blurfl.c となる。最終的に参
　　　照されるディレクトリはカレントディレクトリ、または -d オプション
　　　で指定されたディレクトリである。
&lt;&lt;
**インストール
configureで色々オプションを指定する必要があるよう。
|*--disable-selinux|Don't check for SELinux support.|
|*--enable-xim|Include XIM input support.|
|*--enable-multibyte|Include multibyte editing support.|
|*--enable-fontset|Include X fontset output support.|
|*--enable-rubyinterp=OPTS|Include Ruby interpreter.  default=no OPTS=no/yes/dynamic|
|*--enable-pythoninterp=OPTS|Include Python interpreter. default=no OPTS=no/yes/dynamic|
|*--with-features=TYPE|TYPE: tiny, small, normal, big or huge (default: normal)|
うーん。xim(X Input Method)とX fontsetはいらないのかも？
&gt;||
$ ./configure --disable-selinux --enable-multibyte --enable-rubyinterp --enable-pythoninterp --with-features=huge
$ make
$ sudo make install
||&lt;

**設定ファイル
$HOME/_vimrcもしくは.vimrcファイルの中に書きこんでいく。とりあえずこんなものを設定してみた。なお、.vimrcファイルではダブルクォーテーションがコメントとなる。
&gt;||
&quot;オートインデント
set autoindent
&quot;バックアップディレクトリ
set backupdir=/tmp/vimbackup
&quot;スワップファイル用ディレクトリ
set directory=/tmp/vimbackup
&quot;タブ、行末を可視化
set list
&quot;listで表示する文字の設定
set listchars=eol:$,tab:&gt;\ ,extends:&lt;
&quot;行番号表示
set number
&quot;シフトの移動幅
set shiftwidth=2
||&lt;

**色づけ
-[http://d.hatena.ne.jp/kattton/20110425/1303746056:title]
vim　カラースキーマなどでググると色々出てくる。もしくはvimをインストールした場所(/usr/local/share/vimなど)/vim73/colorsの下にもある。このファイルを$HOME/vimfiles/colorsもしくは$HOME/.vim/colorsに放り込む。
-[http://ethanschoonover.com/solarized:title]
-[http://ethanschoonover.com/solarized/vim-colors-solarized:title]
今回はSolarizedを入れてみる。
&gt;||
$ mkdir -p .vim/bundle
$ mkdir .vim/colors
$ cd .vim/bundle/
$ git clone git://github.com/altercation/vim-colors-solarized.git
Cloning into vim-colors-solarized...
remote: Counting objects: 336, done.
remote: Compressing objects: 100% (189/189), done.
remote: Total 336 (delta 102), reused 309 (delta 75)
Receiving objects: 100% (336/336), 92.06 KiB, done.
Resolving deltas: 100% (102/102), done.
$ cp vim-colors-solarized/colors/solarized.vim ../colors/
||&lt;
最後に.vimrcファイルにこのスキーマを読み込む設定を書く。
&gt;||
syntax enable
set background=dark
colorscheme solarized
||&lt;
これでvimを使う準備はOK。どんどんvim使っていこう。
[f:id:kk_Ataka:20111218234523j:image]

</body>
</day>
<day date="2011-12-19" title="">
<body>
*1324307879*[Windows][備忘録]Excelの備忘録
**あらすじ
Excelの備忘録。ただし個人でExcel持ってないのでスクリーンショットはなし。

**シート名の取得 - Excel2003,2007で確認
&gt;|?|
=MID(CELL(&quot;filename&quot;, $A$1 ), FIND(&quot;]&quot;, CELL(&quot;filename&quot;, $A$1))+1, 99)
||&lt;

**グラフ関係 - Excel2007で確認
***単位などを表示する用
-グラフを選択 -&gt; レイアウトタブ -&gt; ラベル -&gt; グラフタイトル、軸ラベル

***複合グラフ
-分けたいグラフを選択 -&gt; レイアウトタブ -&gt; 現在の選択範囲 -&gt; 選択対象の書式設定 -&gt; 系列のオプション -&gt; 第2軸

***グラフタイトル等を動的に決める
-グラフタイトル等をクリック -&gt; 入力エリアではなく関数エリアを選択し「=シート名!A1」とする
--あらかじめ規定の場所に(例えばA1)タイトルとしたい文言をセットしておく
--シート名を明記しないと「SERIES式では、ワークシートを外部参照していなければなりません。」エラーとなる

**シートの保護解除 - Excel2007で確認
-ホーム -&gt; セル -&gt; 書式 -&gt; シート保護の解除

**入力規則変更(カラムの文字制限、リストから選択など) - Excel2007で確認
-データ -&gt; データツール -&gt; データの入力規則

**画像の圧縮 - Excel2007で確認
-画像を選択 -&gt; 書式リボン(図ツールで出る？) -&gt; 調整エリア -&gt; 図の圧縮
--選択した画像のみに適用にチェック -&gt; (オプションでトリミング部分削除などにチェック) -&gt; OK
--2003等？　では画像右クリック -&gt; 図のプロパティからいけたらしい

</body>
</day>
<day date="2011-12-20" title="">
<body>
*1324386674*[Windows][備忘録]CapsLockキーとCtrlキーを入れ替える(置き換える)方法
**あらすじ
CapsLockいらない！　ここにCtrlキーほしい！

**方法
レジストリをいじってキーを置き換える事に。この例では無変換キーもまとめてCtrlキーに変更する。&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;レジストリをいじるため&lt;del&gt;一か八か&lt;/del&gt;細心の注意を払う。&lt;/span&gt;
-ファイルを指定して実行で regedit を起動
-HKEY_LOCAL_MACHINE -&gt; SYSTEM -&gt; CurrentControlSet -&gt; Control -&gt; Keyboard Layout を選択し右クリック
-新規 -&gt; バイナリ で新しいキーを作成
-新しいキーを選択し右クリック -&gt; 名前の変更 で Scancode Map に変更
-同じく右クリック -&gt; 修正 でバイナリデータを以下のように編集
&gt;||
      0000 00 00 00 00 00 00 00 00 ........
      0008 04 00 00 00 1D 00 3A 00 ......:.
      0010 1D 00 7B 00 00 00 00 00 ..{.....
      0018
||&lt;
-0000はヘッダらしい。全て0固定
-0008前半部の04 00 00 00 は&lt;span class=&quot;deco&quot; style=&quot;font-weight:bold;&quot;&gt;&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;使用するキー+1を入力&lt;/span&gt;&lt;/span&gt;する。今回は下記キーを使用するため04となる
++左Ctrlキー
++無変換キー
++CapsLockキー
++&lt;span class=&quot;deco&quot; style=&quot;font-weight:bold;&quot;&gt;&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;プラス1&lt;/span&gt;&lt;/span&gt;
-0008後半部の 1D 00 3A 00 と 0010前半部の 1D 00 7B 00 がキーをカスタマイズしている箇所
-0010後半部の残りは 00 埋め
**対応
-キーとバイナリ値は下記のようになっている
--が、書き込むときはひっくり返す事。(CapsLockなら 3A 00 となる)リトルエンディアンだとそうなるらしい
--[http://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%B3%E3%83%87%E3%82%A3%E3%82%A2%E3%83%B3#.E3.83.AA.E3.83.88.E3.83.AB.E3.82.A8.E3.83.B3.E3.83.87.E3.82.A3.E3.82.A2.E3.83.B3:title]
|*キー|*バイナリ|*ひっくり返す|
|左ctrl|00 1D|1D 00|
|無変換|00 7B|7B 00|
|CapsLock|00 3A|3A 00|
</body>
</day>
<day date="2011-12-21" title="">
<body>
*1324477125*[Ruby][備忘録]Ruby実行時のオプションをよろしく解析してくれるoptparseを使ってみる

**あらすじ
コマンドラインから引数つきでRubyを実行する時は
&gt;||
ruby xxxx.rb ARG1 ARG2
||&lt;
とかして、中でARGVをifで条件分岐とかしていたが…何か他にやり方があるのではと調べたらやっぱりあった。optparseを使えばよろしく解析してくれるようだ。

**参考サイト
-[http://www.ruby-lang.org/ja/old-man/html/optparse_A5C1A5E5A1BCA5C8A5EAA5A2A5EB.html:title]
&gt;&gt;
   1. OptionParser オブジェクト opt を生成する。
   2. オプションを取り扱うブロックを opt に登録する。
   3. opt.parse(ARGV) でコマンドラインを実際に parse する。
&lt;&lt;
基本はこういう事らしい。

**サンプルソース
とりあえずGistに。色々試してみる。
&lt;script src=&quot;https://gist.github.com/1376804.js?file=optparse.rb&quot;&gt;&lt;/script&gt;

**実行結果
***単純なオプション
&gt;|ruby|
  # short option
  opt.on('-a', 'DESCRIPTION') do |v|
    puts &quot;v class is #{v.class}&quot;
    puts &quot;-a is #{v}&quot;
  end
||&lt;
オプションに-aを指定するだけ。真偽値で返ってくる。第二引数のDESCRIPTIONは後述。
&gt;|ruby|
$ ruby optparse.rb -a
v class is TrueClass
-a is true
||&lt;

***オプションの後に値(必須)
&gt;|ruby|
  # short option with require argument
  opt.on('-b VALUE') do |v|
    puts &quot;v class is #{v.class}&quot;
    puts &quot;-b is #{v}&quot;
  end
||&lt;
オプションに-b xxxxと指定する。こう記述すると必須になるため、VALUEにあたる値を指定しないとエラーに。
&gt;|ruby|
$ ruby optparse.rb -b
C:/ruby/lib/ruby/1.8/optparse.rb:451:in `parse': missing argument: -b (OptionPar
ser::MissingArgument)
        from C:/ruby/lib/ruby/1.8/optparse.rb:1295:in `parse_in_order'
        from C:/ruby/lib/ruby/1.8/optparse.rb:1254:in `catch'
        from C:/ruby/lib/ruby/1.8/optparse.rb:1254:in `parse_in_order'
        from C:/ruby/lib/ruby/1.8/optparse.rb:1248:in `order!'
        from C:/ruby/lib/ruby/1.8/optparse.rb:1339:in `permute!'
        from C:/ruby/lib/ruby/1.8/optparse.rb:1360:in `parse!'
        from optparse.rb:49
        from C:/ruby/lib/ruby/1.8/optparse.rb:791:in `initialize'
        from optparse.rb:4:in `new'
        from optparse.rb:4
||&lt;
VALUEを指定すると受け取れる。
&gt;|ruby|
$ ruby optparse.rb -b sample.txt
v class is String
-b is sample.txt
||&lt;

***オプションの後に値(任意)
&gt;|ruby|
  # short option with argument
  opt.on('-c [VALUE]') do |v|
    puts &quot;v class is #{v.class}&quot;
    puts &quot;-c is #{v}&quot;
  end
||&lt;
VALUEを[]で囲むと値は任意指定になる。指定しないのと指定するので返る値がちがう。(Nilが返ってくる)
&gt;|ruby|
$ ruby optparse.rb -c
v class is NilClass
-c is
||&lt;
&gt;|ruby|
$ ruby optparse.rb -c sample.txt
v class is String
-c is sample.txt
||&lt;

***長いオプション
&gt;|ruby|
  # long option. it can also -d, --d
  opt.on('--define') do |v|
    puts &quot;v class is #{v.class}&quot;
    puts &quot;--define is #{v}&quot;
  end
||&lt;
一文字じゃなくて長い言葉(--define)にする事もできる。また、その頭文字をとって一文字指定(-d, --d)もできる。(かぶったらどっちが優先されるんだろう、まだ調べてない)
&gt;|ruby|
$ ruby optparse.rb --define
v class is TrueClass
--define is true
||&lt;
***単純なオプションと長いオプション両方指定
&gt;|ruby|
  # short option and long option. it can also --e
  opt.on('-e', '--element') do |v|
    puts &quot;v class is #{v.class}&quot;
    puts &quot;-e, --element is #{v}&quot;
  end
||&lt;
指定する事もできる。
&gt;|ruby|
$ ruby optparse.rb -e
v class is TrueClass
-e, --element is true
||&lt;
&gt;|ruby|
$ ruby optparse.rb --element
v class is TrueClass
-e, --element is true
||&lt;

***オプションの後に真偽値
&gt;|ruby|
  # class define
  opt.on('-f BOOLEAN', TrueClass) do |v|
    puts &quot;v class is #{v.class}&quot;
    puts &quot;-f is #{v}&quot;
  end
||&lt;
BOOLEANで真偽値を入力させる事ができる。それ以外だとエラー。
&gt;|ruby|
$ ruby optparse.rb -f aaa
C:/ruby/lib/ruby/1.8/optparse.rb:454:in `parse': invalid argument: -f aaa (Optio
nParser::InvalidArgument)
        from C:/ruby/lib/ruby/1.8/optparse.rb:326:in `parse_arg'
        from C:/ruby/lib/ruby/1.8/optparse.rb:454:in `parse'
        from C:/ruby/lib/ruby/1.8/optparse.rb:1295:in `parse_in_order'
        from C:/ruby/lib/ruby/1.8/optparse.rb:1254:in `catch'
        from C:/ruby/lib/ruby/1.8/optparse.rb:1254:in `parse_in_order'
        from C:/ruby/lib/ruby/1.8/optparse.rb:1248:in `order!'
        from C:/ruby/lib/ruby/1.8/optparse.rb:1339:in `permute!'
        from C:/ruby/lib/ruby/1.8/optparse.rb:1360:in `parse!'
        from optparse.rb:49
        from C:/ruby/lib/ruby/1.8/optparse.rb:791:in `initialize'
        from optparse.rb:4:in `new'
        from optparse.rb:4
||&lt;
真偽値が返ってくる。
&gt;|ruby|
$ ruby optparse.rb -f true
v class is TrueClass
-f is true
||&lt;
&gt;|ruby|
$ ruby optparse.rb -y
v class is TrueClass
-y is true
||&lt;

***ヘルプとバージョン、ヘルプに表示するメッセージ
&gt;|ruby|
  # -h, --h, --help is show usage.
  # -v, --v, --version is show version.
||&lt;
オプション-hと-vはヘルプとバージョンに用途が決められている模様。バージョンは何もやっていないので
&gt;|ruby|
$ ruby optparse.rb -v
optparse: version unknown
||&lt;
こうなる。ヘルプは
&gt;|ruby|
$ ruby optparse.rb -h
Usage: optparse [options]
    -z                               MOVE HEAD!!
    -a                               DESCRIPTION
    -b VALUE
    -c [VALUE]
        --define
    -e, --element
    -f BOOLEAN
    -y                               MOVE TAIL!!
||&lt;
ここで、一番上の-zと-yの位置とMOVE XXX、そして-aのDESCRIPTIONが気になる。さっきの-aの後にあるDESCRIPTIONはヘルプ用メッセージ。
&gt;|ruby|
  # short option
  opt.on('-a', 'DESCRIPTION') do |v|
    puts &quot;v class is #{v.class}&quot;
    puts &quot;-a is #{v}&quot;
  end
||&lt;
残りの-zと-yは、まず-aと同様に引数にMOVE XXXを指定しているのでこれが表示される。そして、opt.onメソッドの代わりにそれぞれon_headとon_tailを使っている。これでheadの場合はヘルプのはじめに上がってきて、tailの場合はおわりに下がるらしい。
&gt;|ruby|
  # usage sort
  opt.on_head('-z', 'MOVE HEAD!!') do |v|
    puts &quot;v class is #{v.class}&quot;
    puts &quot;-z is #{v}&quot;
  end
||&lt;

&gt;|ruby|
  # usage sort
  opt.on_tail('-y', 'MOVE TAIL!!') do |v|
    puts &quot;v class is #{v.class}&quot;
    puts &quot;-y is #{v}&quot;
  end
||&lt;

***組み合わせ
組み合わせもできる。
&gt;|ruby|
$ ruby optparse.rb -aeb sample.txt
v class is TrueClass
-a is true
v class is TrueClass
-e, --element is true
v class is String
-b is sample.txt 
||&lt;

</body>
</day>
<day date="2011-12-22" title="">
<body>
*1324573161*[Solaris][備忘録][Subversion]SolarisにSubversionをインストールするときのメモ
**インストール
-http://www.sunfreeware.com/
-ftp://ftp.ne.jp/Sun/sunfreeware/
から必要なライブラリをダウンロード。
--neon 0.29.5((Neon is an HTTP and WebDAV client library - installs in /usr/local. Neon is used by subversion. There are slightly newer versions of neon, but this one seems to work best with subversion. Dependencies: openssl-1.0.0d, expat-2.0.1, zlib-1.2.5, and you will need /usr/local/lib/libgcc_s.so.1 either from the libgcc-3.4.6 or gcc-3.4.6 packages.))
--swig 1.3.40((SWIG is a software development tool that connects programs written in C and C++ with a variety of high-level programming languages. SWIG is used with different types of languages including common scripting languages such as Perl, PHP, Python, Tcl, Ruby and PHP - installs in /usr/local. Dependencies: zlib and having libgcc_s.so.1 and libstdc++.so.6 in /usr/local/lib is required. This can be done by installing libgcc-3.4.6 or gcc-3.4.6.))
--expat 2.0.1((Expat is a fast, non-validating, stream-oriented XML parsing library - installs in /usr/local. Dependency: to have /usr/local/lib/libgcc_s.so.1 install either the libgcc-3.4.6 or gcc-3.4.6 or later.))
--libxml2 2.7.8((Libxml2 is the XML C library developed for the Gnome project - installs in /usr/local. libxml2 requires that the zlib, libiconv, and either libgcc-3.4.6 or gcc-3.4.6 packages be installed.))
--db 4.2.52 REV=1.0.12((db is the Berkeley open source embedded database system - installs in /usr/local/BerkeleyDB.4.2. This packages also requires that you have install either libgcc or gcc.))
--openssl 1.0.0d((Openssl is an open source toolkit implementing the Secure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS v1) protocols as well as a full-strength general purpose cryptography library - installs in /usr/local/ssl. Note to users with sun4m machines. The openssl package here was built on a sun4u system and will not work on your machines. The one built for Solaris 2.5 was built on a sun4m machine and has been tested and does work. If you do uname -a and you get sun4m in the result, install the Solaris 2.5 openssl package instead. The configure option used for making openssl was solaris-sparcv9-gcc shared. You may also need to install either gcc-3.4.6 or libgcc-3.4.6 to obtain the libgcc_s.so.1 library. The libraries for openssl-0.9.8r are also included in this package to maintain compatibility for those packages still using them. If you cannot or do not want to update to the 1.0.x level, the 0.9.8p package below can be used. Openssl is often used to make machines more secure. Make sure you know what you are doing. Any security problems are your responsiblitiy. See our Disclaimer.))
--libiconv 1.13.1((GNU libiconv provides an iconv() implementation for use on systems which do not have one - installs in /usr/local. Dependencies: libgcc_s.so.1 from libgcc-3.4.6 or gcc-3.4.6 or higher. ))
--libintl 3.4.0((Libintl is used with gettext and is needed by a few programs when libintl in not in /usr/lib - installs in /usr/local/lib. Dependencies: libiconv and to have /usr/local/lib/libgcc_s.so.1 and /usr/local/lib/libstdc++.so.6, either the libgcc-3.4.6 or gcc-3.4.6 packages.))
--sasl 2.1.21((This is the Cyrus SASL (Simple Authentication and Security Layer) API implementation. It can be used on the client or server side to provide authentication and authorization services - installs in /usr/local. Dependencies: db-4.2.52.NC and having libgcc_s.so.1 in /usr/local/lib is required. This can be done by installing libgcc-3.3 or gcc-3.3.2 or higher. The installation of the sasl software indicates:))
--gcc(libgcc 3.4.6)((The GNU C compiler and related programs - installs in /usr/local. This package includes the GNU C, C++, and f77 suites and support files. These gcc packages require the installation of libiconv. It was compiled to use the SUN assembler and loader usually in /usr/ccs/bin if the SUNW developer packages are installed. When needed and the source code supports it, this C compiler can create 64-bit executables via the -m64 flag as well as the usual 32-bit ones. Please read the details on how this package was created which can be found at Comments on gcc 3.4.6 . The Details link below contains information on what is new in 3.4.6. Documentation is in /usr/local/doc/gcc, /usr/local/man, and /usr/local/info. The gcc package is quite large. Some users may have trouble downloading very large files via a browser. These users should try using command line anonymous ftp or perhaps the Sun Download Manager.))
--zlib((zlib compression libraries - installs in /usr/local. This package has both libz.a and libz.so libraries. The package requires that libgcc_s.so.1 be in /usr/local/lib. This can be done by installing libgcc-3.3 or gcc or higher.))
--apache2 2.2.19
--openldap 2.4.24
--subversion 1.6.12
上記のsparc-local.gzファイルをDLする。

**確認
-ldd svnで何が足りないかわかる
-全部入れてもエラーが出た
--どうもsasl-2.1.21-sol10-sparc-local.gzが足りなかった模様(上記反映済み)

**インストール
&gt;||
# pkgadd -d パッケージ
||&lt;
依存関係などはない？

**設定
***svnserve
&gt;http://tortoisesvn.net/docs/nightly/TortoiseSVN_ja/tsvn-serversetup-svnserve.html&gt;
Subversion には、Svnserve (通常の TCP/IP 接続上でカスタムプロトコルを使用する軽量スタンドアロンサーバ) があります。小規模構成にしたい場合や、本格的な Apache サーバを使用できない場合には申し分ありませんし、

ほとんどの場合、svnserve は Apache ベースサーバよりセットアップが簡単で、早く実行できますが、高度な機能のいくつかはありません。また今では、さらに安全にしやすくする SASL サポートも含まれています。
&lt;&lt;
&gt;http://ja.wikipedia.org/wiki/Inetd&gt;
inetd登場以前は、1台のサーバで複数のサービス(FTPサーバ、TELNETサーバ等)を稼働させておくには、それぞれのサービスのデーモン (ftpd、tftpd等)を起動しておき、それぞれのデーモンが、それぞれの待ち受けポートを監視する - というスタイルだった。しかし、この方法では、監視するポートの数だけデーモンが起動していることとなるため、実際にそのサービスが利用されていない時には、実質、メモリの無駄遣いということとなる。そこで、待ち受けポートを監視する専用の中継デーモンを用意し、待ち受けポートに要求がきた時には、あらかじめ決められたデーモン(ftpd、tftpd等)を起動させるという動作が用意されるようになった。
&lt;&lt;
Subversion用の簡易サーバをクライアントから要求が来た時だけ起動するようにしたい。(ただしちょっと遅い)ってことかな。

:ポート - サービス の設定:/etc/services
:サービス - サーバ の設定:/etc/inetd.conf

Subversionでは3690ポートに要求がくるため/etc/servicesには以下のように追記する。
&gt;||
# サービス名 ポート
svn      3690/tcp
svn      3690/udp
||&lt;
svnというサービスを3690ポートで受ける。

***管理DBに登録
次にinetd.confファイルを追記する。
&gt;||
svn stream tcp nowait svn /(SVNインストールされたディレクトリ)/svnserve svnserve -i -r SVNROOT
||&lt;
|*サービス名|svn|
|*ソケットタイプ|stream|
|*プロトコル|tcp|
|*wait or nowait|nowait|
|*&lt;del datetime=&quot;2012-01-15T20:04:06+09:00&quot;&gt;プログラム名&lt;/del&gt;ユーザ名|svn|
|*コマンドと引数|/(SVNインストールされたディレクトリ)/svnserve svnserve -i -r SVNROOT|
svnというサービスをsvnserve -i -r SVNROOTというコマンドで動かす。-iは--inetdオプションと同じでsvnserveが標準出力、標準入力のファイル拡張子を利用するように指定する。-r SVNROOTはリポジトリのルートを設定する。UrlはこのSVNROOTからのパスとみなされる。- オプション一覧。 http://www.thekyo.jp/manual/subversion/svn.ref.svnserve.html

※ユーザ名を存在しないユーザにしてinetconvすると下記のようなエラーになる。
&gt;||
inetconv: エラー ./inetd.conf、n行目。不明なユーザ: xxx
||&lt;

設定ファイルを作成したが、Solaris10ではinetd.conf自体は使われない。inetconvコマンドを使い管理DB？　に登録を行う。
&gt;||
# inetconv -i ./inetd.conf
svn -&gt; /var/svc/manifest/network/svn-tcp.xml
Importing svn-tcp.xml ...Done
||&lt;
設定変更した時は-fオプションをつける。
&gt;||
inetconv -f -I ./inetd.conf？
||&lt;
起動しているかの確認はinetadmコマンドで行う。
&gt;||
# inetadm | grep svn
enabled online svc:/network/svn/tcp:default
||&lt;
このsvc:/network/svn/tcp:defaultをFMRIという。

***起動・停止
起動・停止もinetadmコマンドを使う。起動は-eオプション+FMRI。(enable？)
&gt;||
inetadm -e svc:/network/svn/tcp:default  
||&lt;
停止は-dオプション+FMRI。(disable？)
&gt;||
inetadm -d svc:/network/svn/tcp:default
||&lt;
***参考サイト
このあたりはまだよく仕組みがわかってない。
-[http://sy2920.s151.xrea.com/solaris/smf.html:title]
-[http://sy2920.s151.xrea.com/solaris/smf-inetd.html:title]
-[http://www.rinneza.com/junya/tech/solaris10_x86/os/etc_setting_02.html:title]
-[http://www.oratorio-tangram.com/Solaris/SMF.html:title]
-[http://tortoisesvn.net/docs/nightly/TortoiseSVN_ja/tsvn-serversetup-svnserve.html:title]
-[http://www.sunsept.com/svnbook_ja_html/ch09s04.html:title]

</body>
<comments>
<comment>
<username>kk_Ataka</username>
<body>inetd.confのプログラム名、これユーザ名の間違い&lt;br&gt;存在しないユーザ入力してinetconvすると&lt;br&gt;&lt;br&gt;inetconv: エラー ./inetd.conf、n行目。不明なユーザ: xxx</body>
<timestamp>1326450707</timestamp>
</comment>
</comments>
</day>
<day date="2011-12-23" title="">
<body>
*1324651460*[Unix][備忘録][Vim]Vimコマンドよく使うものと覚えたいコマンドまとめ
**コマンドモード
|*コマンド|*解説|
|:w|保存|
|:q||終了|
|:wq|保存して終了|
|:w!|強制的な保存|
|:q!|強制的な終了|
|:w|ファイル名 任意のファイル名で保存|
|:e ファイル名|複数ファイルを開く|
|:br|前のバッファへ|
|:bn|次のバッファへ|
|:ls|バッファの一覧を表示|
|:!コマンド|コマンドを実行し標準出力に出力&lt;br /&gt;(:!ls でファイル一覧を表示)|
|:r ファイル|指定したファイルの内容を現在のファイルに流しこみ|
|:r !コマンド|コマンド実行結果を現在のファイルに流しこみ|
|:set number|行に番号を割り振る|
|:set nonumber|:set numberで割り振った番号を消す|
|:任意の数字|任意の数字の行へカーソルを移動する|
|:s/置換前/置換後|行の一番最初にヒットした文字を置き換える|
|:s/置換前/置換後/g|行全体の文字を置き換える|
|:数字,数字s/置換前/置換後/g|数字の行から数字の行までに&lt;br /&gt;存在する全て文字を置き換える|
|:%s/置換前/置換後/g|存在する全ての文字を置き換える|
|:%s/置換前/置換後/gc|存在する全ての文字を置き換える&lt;br /&gt;(置換するかしないかを選択)|

**カーソル移動系
|*コマンド|*解説|
|h|カーソルを左に移動する|
|j|カーソルを下に移動する|
|k|カーソルを上に移動する|
|l|カーソルを右に移動する|
|数字 =&gt; hjkl|カーソルを数字分移動する(10j =&gt; 10行下)|
|0 or ^|カーソルを行頭に移動する|
|$|カーソルを行末に移動する|
|H|カーソルを画面内の一行目に移動する|
|M|カーソルを画面内の中段行に移動する|
|L|カーソルを画面内の最終行に移動する|
|Ctrl + e|カーソルを一行次に移動する|
|Ctrl + y|カーソルを一行前に移動する|
|Ctrl + d|カーソルを半画面次に移動する|
|Ctrl + u|カーソルを半画面前に移動する|
|Ctrl + f|カーソルを一画面次に移動する|
|Ctrl + b|カーソルを一画面前に移動する|
|G|カーソルの位置をファイルの最後に移動する|
|G =&gt; G|カーソルの位置をファイルの先頭に移動する|
|数字 =&gt; G =&gt; G|カーソルの位置を数字行目に移動する|
|z =&gt; Enter|現在のカーソル位置を画面内の一行目とするように移動|
|Ctrl + j|改行する|
|w|次の単語へカーソル位置を移動|

**削除系
|*コマンド|*解説|
|x|文字を一つ削除する|
|d =&gt; w|カーソルの位置の単語を一つ削除する|
|d =&gt; $|カーソルの位置から行末まで削除する|
|d =&gt; d|行全体を削除する|
|数 =&gt; d =&gt; d|カーソル位置から数字行を削除する|

**モード切替系
|*コマンド|*解説|
|i|モード切替、カーソルの位置から文字を入力する|
|a|モード切替、カーソルの位置の一つ後から文字を入力する|
|A|モード切替、行末から文字を入力する|
|o|モード切替、一つ下に新しい行を作り、そこから文字を入力する|
|O|モード切替、一つ上に新しい行を作り、そこから文字を入力する|

**コピーペースト系
|*コマンド|*解説|
|v|範囲指定可能に|
|y =&gt; w|カーソルの位置の単語をコピーする|
|y =&gt; $|カーソルの位置から行末までをコピーする|
|y =&gt; y|行全体をコピーする|
|数 =&gt; y =&gt; y|カーソル位置から数字行をコピーする|
|p|ddキー、またはyyキー等でバッファに格納された行の貼り付け|
|Shift + p|pは今のカーソルの下に貼り付け、これは上に貼り付け|

**操作取り消し系
|*コマンド|*解説|
|u|最後に実行したコマンドの取り消し|
|U|最後に行ったコマンドの行単位の取り消し|
|Ctrl + r|取り消しの取り消し|

**置換系
|*コマンド|*解説|
|r|一文字置き換える|
|R|一文字以上を置き換える|
|c =&gt; w|単語の一部、もしくは全体の置き換え|
|~|カーソル上の文字の大文字⇔小文字変換|

**検索系
|*コマンド|*解説|
|/文字|順方向に任意の文字を検索|
|?文字|逆方向に任意の文字を検索|
|検索後 =&gt; n|検索にヒットしたキーワードの次に現れる。&lt;br /&gt;ヒットしたキーワードにカーソル位置を移動|
|検索後 =&gt; N|検索にヒットしたキーワードの前に現れる。&lt;br /&gt;ヒットしたキーワードにカーソル位置を移動|
|%|(や{や[などの括弧の上にカーソルを置き%キーを押すと、&lt;br /&gt;対応する括弧へカーソルが移動する|

**画面系
|*コマンド|*解説|
|Ctrl + g|&quot;ファイル名&quot; [状態] 現在行/全体行 行 --現在行の割合%--を表示する|
|Ctrl + l|画面をリフレッシュするシステムメッセージに割り込まれた場合に|

</body>
</day>
<day date="2011-12-24" title="">
<body>
*1324741031*[Unix][備忘録]特定のファイルを探したり除外したり(メモ)
**特定のファイル群を一括で何かする
***状況
.cblファイルをコンパイルした後、同一ディレクトリにできる拡張子なしのファイルを別のディレクトリにコピーしたい…という。
&gt;||
/tmp
┣file01.cbl
┣file02.cbl
┣file01
┗file02
||&lt;
file01とfile02を/usr/local/userに移動したい。

***コマンド
&gt;||
find /tmp/* ! -name &quot;*.cbl&quot; | xargs -i mv {} /usr/local/user
||&lt;
-nameの前に!で条件の否定ができる(知らなかった)
-findコマンドでfile01, file02を引っかけたあと、xargsでmvコマンド実行する
-iオプションを使用する事でfindの結果を{}にもってこれる

**特定のファイル群を一括で何かする その2
***状況
ファイル検索でリポジトリ内の .svn ファイルを除外したいなーと思った。

***コマンド
&gt;||
find ./ -name &quot;.svn&quot; -prune -o -print
||&lt;
この結果に xargs をつけると除外はできたの……だが、どうも
&gt;||
! -name &quot;XXX&quot;
||&lt;
&gt;||
-name &quot;XXX&quot; -prune
||&lt;
は挙動が違う模様……以下メモ。
-pruneオプションは引数より下のディレクトリやファイルを捜査しない
-oオプション はor演算子と同じ
-ワイルドカード指定で隠しファイルは検索できない

とりあえずここまで。

</body>
</day>
<day date="2011-12-25" title="">
<body>
*1324852724*[VB][備忘録]VB6からVB.NETにソース移行すると特定のIf文でInvalidCastException

**あらすじ
VB6の時、If (value = 1)のような条件式でvalueに数値・文字どちらが入ってきてもエラーになっていなかった。((結果は覚えていないけど、1以外は全てfalseになったような。))

しかし、VB.NETになりvalueに文字が入ってきた場合、InvalidCastExceptionが発生するようになった。どうも、VB6のときと評価の方法が変わっている模様…。

**参考サイト
-[http://msdn.microsoft.com/ja-jp/library/cey92b0t(v=VS.80).aspx:title]

**検証
Option Strict が Off の場合の比較は、実行時の型で比較方法が変わる。
|*比較対象|*例|*結果|
|どちらもString|If (“a” = “b”)|文字列比較を行う|
|どちらも数値|If (1 = 3)|Doubleに変換され数値比較を行う|
|数値とString|If (1 = “1”)&lt;br /&gt;If (1 = “a”)|文字列がDoubleに変換(※)され数値比較を行う。&lt;br /&gt;文字列をDoubleに変換できない場合 InvalidCastException|
(※)どうも、この部分がVB6のときと変わっている？

数値と文字(数値以外)の比較がダメなようなので、不本意ながらIf (value = &quot;1&quot;)にしてその場を凌いだが…。
なお、Nothingは比較対象が数値なら0,文字列なら”“となる。
</body>
</day>
<day date="2011-12-26" title="">
<body>
*1324910284*[Ruby][備忘録][Haml][Sinatra]SinatraでHaml入門

**あらすじ
Sinatraとか使っていてもHtmlべた書きばかりなのでHamlに入門してみる。

**参考サイト
-[http://haml.ursm.jp/getting-started:title]
日本ハム！
**Hamlとは
&gt;http://haml.ursm.jp/&gt;
HamlはHTML/XHTMLを生成するためのマークアップ言語です。インデントや簡略構文によって簡潔な記述が行えます。
&lt;&lt;

**今まで
&gt;|ruby|
require 'rubygems'
require 'sinatra'

get '/' do
  &quot;&lt;style type='text/css'&gt;.head {border-bottom: 1px solid #CCCCCC;border-left: 5px solid #CCCCCC;}.time {color: #CCCCCC;}.tweet {}&lt;/style&gt;&lt;h1&gt;Hello Tycoon-Timeline powerd by Heroku!!&lt;/h1&gt;&lt;a href=''&gt;Reload&lt;/a&gt;&lt;dl&gt;&lt;dt class='head'&gt;User &lt;span class='time'&gt;2011/12/26 02:25:00&lt;/span&gt;&lt;/dt&gt;&lt;dd class='tweet'&gt;ついーと&lt;/dd ...&quot;
end
||&lt;
全部こんな感じ。なのでページがでかくなっていくことを考えると非常につらい。

**準備
***構成
&gt;||
Gemfile
app.rb
views
┗index.haml
||&lt;

***Gemfile
Bundlerを使うのでGemfileを作成。
&gt;|ruby|
source :rubygems
source &quot;http://rubygems.org&quot;

gem 'sinatra'
gem 'haml'
||&lt;
SinatraとHamlをインストール。
***gemインストール
&gt;||
$ bundle install ./vendor/bundle
||&lt;

***app.rb
&gt;|ruby|
require 'rubygems'
require 'sinatra'
require 'haml'

get '/' do
  haml :index
end
||&lt;
今までhtmlタグを書いていた返り値をhtml :indexとする。するとここではviews/index.hamlを見に行ってくれる。

***views/index.haml
&gt;|?|
!!!
%html
  %head
    %title Hello.
  %body
    %div#main
      %h1 Hello!!
      %a{:href =&gt;  'http://google.com'} Google
      %div.comment
        / Html comment
        This is html comment.
      %div.comment
        -# Haml comment
        This is haml comment.
      %div.ruby= Time.now
      %div.fizbuz
        - (1..15).each do |i|
          - if i % 15 == 0
            %p FizzBuzz
          - elsif i % 3 == 0
            %p Fizz
          - elsif i % 5 == 0
            %p Buzz
          - else 
            %p #{i} 
||&lt;
ものすごく基本的な構文しか使っていないが、
|*記述|*解説|*例|
|!!!|DOCTYPE宣言|XMLとかも設定できる|
|%hoge|要素名|%head で ＜head＞＜/head＞|
|%hoge value|値にvalue|%title Hello. で ＜title＞Hello.＜/title＞|
|%hoge{:属性 =&gt; 'value'}|属性セット|%a{:href =&gt;  'http://google.com'} Google で &lt;br /&gt;＜a href='http:google.com'＞Google＜/a＞|
|%hoge#id|ID指定|%div#main で ＜div id='main'＞＜/div＞|
|%hoge.class|class指定|%div.test で ＜div class='test'＞＜/div＞|
|/ Html comment|コメント(Html)|/ Html comment で ＜!-- Html comment --＞|
|-# Haml comment|コメント(Haml)|生成されたHtmlには表示されない|
|%hoge= Rubyの構文|Rubyのコード実行|%div= Time.now で ＜div＞Mon Dec 26 ....＜/div＞|

Rubyの構文はもう少し本格的に書く事もできるようで、条件分岐なんかも書ける。とりあえずFizzBuzzも書ける。

**出力結果
***実行
&gt;||
$ bundle exec ruby app.rb
||&lt;

***Htmlにで描画された画面
[f:id:kk_Ataka:20111226233342j:image]

***生成されたソース
[f:id:kk_Ataka:20111226233343j:image]
まださわりしか触っていないのでこれから触ってみる。 

</body>
</day>
<day date="2011-12-27" title="">
<body>
*1324911671*[Evernote][備忘録][Ruby][API]EvernoteのAPIをRubyから叩きたい
**はじめに
この記事は[http://atnd.org/events/22021:title]の27日目の記事です。
26日目はid:tackunさんの[http://d.hatena.ne.jp/tackun/20111226/1324908770:title]でした。
28日目はr7kamuraさんの[http://r7kamura.hatenablog.com/entry/2011/12/28/234717:title=RubyでGPUを使おう - &amp;#10008;&amp;#9593;&amp;#9697;&amp;#9593;&amp;#10008;]です。


今日はターミナル(or コマンドプロンプト)経由でEvernoteのAPIを叩き、自分のノートブックを取得してみようとしてみます。ソースを書く前にAPIの申請からやっていきます。

**APIの申請…の前に
developer用サイトからAPI SDKを入手。
-[http://www.evernote.com/about/developer/api/:title]
[f:id:kk_Ataka:20111226235624j:image]
上記のリンクを叩くとzipがDLできるので、これを解凍しruby/lib以下のファイルを用意しておく。

**APIの申請
-[http://www.evernote.com/about/developer/api/:title]
同じページを下へスクロールしていくとRequest an API Keyという箇所があるので以下の項目を入力する。
|*Evernote username|Evernoteのユーザ名|
|*Your Name|氏名|
|*Your Email|メールアドレス|
|*Organization|組織や団体、だが、個人で使う場合は氏名でよい|
|*Web or Client|今回は自分で使う用なのでClient Keysを選択(既に持っているので下の画像ではWebを選択している)|
|*Application Details|どうやってAPIを使いたいか|
つたない英語でDetailsを書く。以前は審査に時間がかかったらしいが今はSUBMITすればすぐKeyが発行されるみたい。
[f:id:kk_Ataka:20111218113115j:image]
WebApplicationを選んだ場合。
[f:id:kk_Ataka:20111218113113j:image]
Clientを選んだ場合。
[f:id:kk_Ataka:20111218113114j:image]
これでConsumer KeyとConsumer Secretをもらえた。ただし、この状態では砂場(sandbox.evernote.com)でしか使えない。

上記画像のNext Steps 2.によると[https://sandbox.evernote.com/Registration.action:title]で砂場用アカウントを作成し、砂場で開発をしてくださいという事でいきなり本家(www.evernote.com)で動かせないようになっている。

**Activate
今回のエントリではやらないが、本家で動かす時はActivateサイト(Next Steps 3.のlet us knowリンクから行ける)でActivateしてもらう必要がある。(ここは昔の事なので少し曖昧)
|*Email|メールアドレス|
|*API Consumer Key|登録時にもらったConsumer Key|
|*Additional Info|その他何かあれば？(何か書いたっけ…？)|
[f:id:kk_Ataka:20111218115757j:image]

**ソース
iitHubに。 https://github.com/gosyujin/evernote_for_ruby/blob/master/myEvernote.rb
ここから実際に取得していきます。

**パス追加
プロジェクト内にあるライブラリ(さっき落としたAPI SDK)を読み込む。
&gt;|ruby|
dir = File.expand_path(File.dirname(__FILE__))
$LOAD_PATH.push(&quot;#{dir}/lib/ruby&quot;)
$LOAD_PATH.push(&quot;#{dir}/lib/ruby/Evernote/EDAM&quot;)

require 'thrift/types'
(略)
require 'Evernote/EDAM/user_store'
(略)
||&lt;
File.expand_path(File.dirname(__FILE__))は出力するとそれぞれこのようになる。
&gt;|?|
&gt; puts __FILE__
#=&gt; ./myEvernote.rb
&gt; puts File.dirname(__FILE__)
#=&gt; .
&gt; puts File.expand_path(File.dirname(__FILE__))
#=&gt; C:/project/evernotexxx
||&lt;
プロジェクトディレクトリを指定できる。そして、
&gt;|ruby|
$LOAD_PATH.push(&quot;#{dir}/lib/ruby&quot;)
||&lt;
で組み込み変数$LOAD_PATH((requireがファイルを読み込むときに検索するディレクトリの名前を含む配列 - たのしいRuby 第三版 P373))にプロジェクト内のlib/rubyを含めている。これで読み込める。

**初期化
***流れ
+パスワードなどの情報を取得する
+UserStoreを作成し、認証する
+NoteStoreを作成し、Evernoteのノートをいじれるようにする

***パスワードなどの情報を取得する
&gt;|ruby|
  def initialize()
    @core = Pit.get(&quot;evernote&quot;, :require =&gt; {
      &quot;userName&quot; =&gt; &quot;your evernote userName.&quot;,
      &quot;password&quot; =&gt; &quot;your evernote password.&quot;,
      &quot;consumerKey&quot; =&gt; &quot;your evernote consumerKey.&quot;,
      &quot;consumerSecret&quot; =&gt; &quot;your evernote consumerSecret.&quot;,
    })
    
    host = &quot;sandbox.evernote.com&quot;
    userStoreUrl = &quot;https://#{host}/edam/user&quot;
    userStoreTransport = Thrift::HTTPClientTransport.new(userStoreUrl)
    userStoreProtocol = Thrift::BinaryProtocol.new(userStoreTransport)
    userStore = Evernote::EDAM::UserStore::UserStore::Client.new(userStoreProtocol)
||&lt;
初期化時にまず
-userName(登録時の)
-password(登録時の)
-consumer_key(Evernoteからもらったもの)
-consumer_secret(Evernoteからもらったもの)
を取得する。ソースにべた書きしてもいいのだが、パスワードとかはGitHubにあげる時に消しておきたいのでpit
を使って情報を外出しする事に。
-[http://subtech.g.hatena.ne.jp/cho45/20080102/1199257680:title]
-[http://d.hatena.ne.jp/snaka72/20090409/1239286994:title]
pitを使う事で%USERPROFILE%\.pit\下にyaml形式で情報を保存しておくことができる。
***UserStore作成
次にUserStoreを作成する。UserStoreはとりあえず、ユーザの情報をほげほげするものという認識。hostはテスト環境なのでsandbox.evernote.comを指定している。

***認証
&gt;|ruby|
  def auth(userStore)
    # バージョンチェック
    versionOK = userStore.checkVersion(&quot;MyEvernote&quot;,
      Evernote::EDAM::UserStore::EDAM_VERSION_MAJOR,
      Evernote::EDAM::UserStore::EDAM_VERSION_MINOR)
#      puts &quot;Is my EDAM protocol version up to date? #{versionOK}&quot;
    if (!versionOK) then
      exit(1)
    end
    begin
      auth = userStore.authenticate(
        @core[&quot;userName&quot;],
        @core[&quot;password&quot;],
        @core[&quot;consumerKey&quot;],
        @core[&quot;consumerSecret&quot;])
#        puts &quot;Auth Success: #{auth.user.username}&quot;
      return auth
    rescue Evernote::EDAM::Error::EDAMUserException =&gt; ex
      parameter = ex.parameter
      errorCode = ex.errorCode
      errorText = Evernote::EDAM::Error::EDAMErrorCode::VALUE_MAP[errorCode]
      puts &quot;Auth Error: #{errorText}(ErrorCode: #{errorCode}), Parameter: #{parameter}&quot;
      exit
    end
  end
||&lt;
まずは、checkVersionメソッド(後述)の呼び出し。((キャメルケースを多用してる…？　と思ったけど、xxx_yyyZzzzみたいなメソッドもあるなあ。どっちにあわせれば…))
&gt;|ruby|
bool UserStore.checkVersion(clientname, edamVersionMajor, edamVersionMinor)
||&lt;
チェックが終わったら次はauthenticateでユーザの認証を行う。
&gt;|ruby|
AuthenticationResult UserStore.authenticate(userName, password, consumer_key, consumer_secret)
||&lt;
認証が成功したらAuthenticationResultオブジェクトが返ってくる。ユーザ情報なんかも返ってくるが、この中のauthenticationTokenが、この先ノートを新規作成したり更新したりする時に必ず必要になるので控えておく。Tokenを使っている例は下記の通り。
&gt;|ruby|
# ノートブック作成。第一引数がauthenticationToken。
Types.Notebook createNotebook(string authenticationToken, Types.Notebook notebook)
# ノートブック更新。第一引数が以下同文。
i32 updateNotebook(string authenticationToken, Types.Notebook notebook)
# ノートブック取得。略。
Types.Notebook getNotebook(string authenticationToken, Types.Guid guid)
||&lt;

***NoteStore作成
&gt;|ruby|
    noteStoreUrlBase = &quot;https://#{host}/edam/note/&quot;
    noteStoreUrl = noteStoreUrlBase + @authentication.user.shardId
    noteStoreTransport = Thrift::HTTPClientTransport.new(noteStoreUrl)
    noteStoreProtocol = Thrift::BinaryProtocol.new(noteStoreTransport)
    @noteStore = Evernote::EDAM::NoteStore::NoteStore::Client.new(noteStoreProtocol)
||&lt;
で、最後にNoteStoreを作成する。shardIdを指定する必要がある。shardIdは何かっていうと…。
&gt;&gt;
The name of the virtual server that manages the state of this user. This value is used internally to determine which system should service requests about this user's data. It is also used to construct the appropriate URL to make requests from the NoteStore.
&lt;&lt;
ユーザ状態を管理する仮想サーバ名？

**ノートブックを取得していく。
準備はできたのでノートブックを取得していく。今のEvernote(砂場)の構造はこう。
[f:id:kk_Ataka:20111225163340j:image]
それに対して全ノートを取得してくるとこんな感じ。
&gt;|ruby|
@e = MyEvernote.new()
# 全ノートブックを取得
pp @e.getNotebooks()
||&lt;
&gt;|ruby|
  # 全ノートブックを取得する
  def getNotebooks()
    @noteStore.listNotebooks(@token)
  end
||&lt;
全ノートブックはNoteStore.listNotebooks(authenticationToken)で取得する事ができる。
&gt;|ruby|
[&lt;Evernote::EDAM::Type::Notebook guid:&quot;2d8ec8b5-5706-434d-a1dc-4ea0c6ba1993&quot;, name:&quot;Wait&quot;, updateSequenceNum:745, defaultNotebook:false, serviceCreated:1312818684000, serviceUpdated:1324051378000&gt;,
 &lt;Evernote::EDAM::Type::Notebook guid:&quot;33880e53-4c9f-4104-a6e6-777ed1e3cef2&quot;, name:&quot;Sandbox&quot;, updateSequenceNum:871, defaultNotebook:true, serviceCreated:1309536176000, serviceUpdated:1324051378000&gt;,
 &lt;Evernote::EDAM::Type::Notebook guid:&quot;71cdd6f9-5070-4508-bc80-a3f835a61a55&quot;, name:&quot;UpDeleteNotebook&quot;, updateSequenceNum:1468, defaultNotebook:false, serviceCreated:1324099155000, serviceUpdated:1324099155000&gt;,
 &lt;Evernote::EDAM::Type::Notebook guid:&quot;450b52e6-2daa-4b04-9012-4623a8e12ef5&quot;, name:&quot;TestNotebook&quot;, updateSequenceNum:1469, defaultNotebook:false, serviceCreated:1324099138000, serviceUpdated:1324099166000&gt;]
||&lt;
おお、取れた！

nameは文字通りノートブック名。defaultNoteBookはデフォルトの設定true|false。以下略。guid(globally unique identifier)は、ノートブック、ノート、タグなどに対して振られる一意のID。フォーマットはこんな感じ。((Evernote::EDAM::Limits::EDAM_GUID_REGEX))
&gt;||
^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
||&lt;
GUIDがわかれば、特定のノートブックを引っ張ってくる事もできる。例えばGUID: 450b52e6-2daa-4b04-9012-4623a8e12ef5がTestNotebookなので…。
&gt;|ruby|
    @e = MyEvernote.new()
    @NotebookGuid = '450b52e6-2daa-4b04-9012-4623a8e12ef5'
    # 特定のノートブックを取得
    pp @e.getNotebook(@NotebookGuid).name
    pp @e.getNotebook(@NotebookGuid)
||&lt;
&gt;|ruby|
  def getNotebook(key)
    if isGuid(key) then
      # GUIDから検索
      return @noteStore.getNotebook(@token, key)
    end
  end
||&lt;
&gt;|ruby|
&quot;TestNotebook&quot;
&lt;Evernote::EDAM::Type::Notebook guid:&quot;450b52e6-2daa-4b04-9012-4623a8e12ef5&quot;, name:&quot;TestNotebook&quot;, updateSequenceNum:1469, defaultNotebook:false, serviceCreated:1324099138000, serviceUpdated:1324099166000&gt;
||&lt;
TestNotebookが取れた！

さらにfilterをかける事でノートブック内から特定のノートを取得できる。
&gt;|ruby|
@e = MyEvernote.new()
@NotebookGuid = '450b52e6-2daa-4b04-9012-4623a8e12ef5'
# ノートブック内のノートを取得
pp @e.getNote(@NotebookGuid)
||&lt;
&gt;|ruby|
  def getNote(notebookGuid, count=100)
    filter = Evernote::EDAM::NoteStore::NoteFilter.new
    filter.notebookGuid = notebookGuid
    @noteStore.findNotes(@token, filter, 0, count)
  end
||&lt;
&gt;|ruby|
&lt;Evernote::EDAM::NoteStore::NoteList startIndex:0, totalNotes:2, 
  notes:[
    &lt;Evernote::EDAM::Type::Note guid:&quot;fa05f909-97d3-4504-8015-125fb026c8be&quot;, 
      title:&quot;Images&quot;, contentHash:6dd62d0a9b187cbea4350b1ada8fda74, contentLength:1200,
      created:1324099541000, updated:1324099550000, active:true, updateSequenceNum:1473,
      notebookGuid:&quot;450b52e6-2daa-4b04-9012-4623a8e12ef5&quot;,
      resources:[&lt;Evernote::EDAM::Type::Resource guid:&quot;536abe91-3ad3-48f6-8add-9fbcad7b95ab&quot;, 
      noteGuid:&quot;fa05f909-97d3-4504-8015-125fb026c8be&quot;, 
      data:&lt;Evernote::EDAM::Type::Data bodyHash:203b77ab9cb177e5406340445b64e78c, size:2044&gt;, 
      mime:&quot;image/jpeg&quot;, width:64, height:64, active:true, 
      recognition:&lt;Evernote::EDAM::Type::Data bodyHash:68b3bd35f22b01ac57e55e7a7974ed8d, size:533&gt;, 
      attributes:&lt;Evernote::EDAM::Type::ResourceAttributes &gt;, updateSequenceNum:1476&gt;, 
      &lt;Evernote::EDAM::Type::Resource guid:&quot;8c329667-4c20-4e0a-a291-e437baf99f2d&quot;, 
      noteGuid:&quot;fa05f909-97d3-4504-8015-125fb026c8be&quot;, 
      data:&lt;Evernote::EDAM::Type::Data bodyHash:b1bdcdc515d937fb3e16a1e654abfffb, size:453&gt;,
      mime:&quot;image/png&quot;, width:14, height:13, active:true, 
      attributes:&lt;Evernote::EDAM::Type::ResourceAttributes &gt;, updateSequenceNum:1474&gt;], 
      attributes:&lt;Evernote::EDAM::Type::NoteAttributes sourceURL:&quot;http://google.com&quot;&gt;&gt;,
    &lt;Evernote::EDAM::Type::Note guid:&quot;19c20dac-6d90-4e8c-bbf9-f11450416c48&quot;, title:&quot;TestNote&quot;, 
      contentHash:401df83bfdb6fd1f152c4d226fa1d0b6, contentLength:189, created:1324099587000, 
      updated:1324099587000, active:true, updateSequenceNum:1477, 
      notebookGuid:&quot;450b52e6-2daa-4b04-9012-4623a8e12ef5&quot;, 
      attributes:&lt;Evernote::EDAM::Type::NoteAttributes &gt;&gt;], updateCount:1477&gt;
||&lt;
**終わりに
という事で、EvernoteAPI登録からノート取得までをする事ができました。もっと画像をアップしたりタグ埋め込んだりもできるのですが、それはこれから学んでいくという事で。

**参考サイト、兼自分で調べる用
***Thrift
-[http://blog.broomie.net/index.cgi?id=36:title]
-[http://www.atmarkit.co.jp/news/200704/03/thrift.html:title]
***EDAM(Evernote Data Access and Management)
-[http://d.hatena.ne.jp/soutaro/20110910/1315645433:title]
***UserStoreとは
&gt;&gt;
The UserStore service is primarily used by EDAM clients to establish authentication via username and password over a trusted connection (e.g. SSL). A client's first call to this interface should be checkVersion() to ensure that the client's software is up to date. 
&lt;&lt;
ユーザ名やパスワードを信頼された接続上で認証するためEDAMクライアントで利用される。はじめにcheckVersion()メソッドを呼び、クライアントのソフトのバージョンが最新である事を保障すべき。
***NoteStoreとは
&gt;&gt;
The NoteStore service is used by EDAM clients to exchange information about the collection of notes in an account. This is primarily used for synchronization, but could also be used by a &quot;thin&quot; client without a full local cache.

All functions take an &quot;authenticationToken&quot; parameter, which is the value returned by the UserStore which permits access to the account. This parameter is mandatory for all functions. 
&lt;&lt;
アカウントのノート収集情報を交換、同期するためEDAMクライアントで利用される。(ローカルキャッシュのない新クライアントでも使われた)全ての機能はauthenticationTokenのパラメータを使用する。これはアクセス認証が通ったアカウントのUserStoreの値を使用する。

</body>
</day>
<day date="2011-12-28" title="">
<body>
*1325118790*[日記]2011年KPT

**今年学んだこと
-Ruby
--Bundler, RVM, Pik, Pit, Sinatra, ZenTest, Lokka
-インストールパスにProgram FilesとDocuments and Settingsは鬼門
-Redmine
-Heroku
-Git
-Sphinx
--reST
-各種WebAPI
--はてな, Read it Later, Twitter, Evernote
-&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;インストールパスにProgram FilesとDocuments and Settingsは鬼門&lt;/span&gt;(大事なので2回)

**Keep
-色々なスクリプトを作るようになり○○するだけの簡単なお仕事はかなり効率化できた 
--特にwin32oleには何時間分助けられたか
-Ruby Advent Calendarに参加して初めて発表？　的な事をできた

**Problem
-TDDやるやる詐欺
--specファイルは毎回作るのだか毎回中途半端になってしまった
-Jenkins使う使う詐欺
--まずテストコードが書けないといかんともしがたいということがわかったので、少し保留？
--小さいスクリプトならZenTestだけでもよさそう？
-スクリプト投げっぱなしジャーマン
--自分専用とはいえ、必要最低限の機能をこしらえたら後はボロボロ

**Try(優先度順)
+TDDのリズムで何か作ってみたい
--社内で一人TDDに開眼したい
+仕事で使っているスクリプトを汎用化してGitHubに登録したい
--Outlookから添付ファイルをぶっこ抜いてきたりExcelから必要データぶっこ抜いてcsvにしたり
+gemを作れるようになりたい
--特に何かしたいわけではないが、動作原理を追いたい
+ブログを月一更新したい
--気づいたら2011年は2月に無更新月を作ってしまい悔しい！
+Advent Calendar以外でも何か発表してみたい！
</body>
</day>
<day date="2012-01-15" title="">
<body>
*1326624864*[Solaris][備忘録][Subversion]Subversionのリポジトリをサーバ間でまるごと移動する

**あらすじ
AサーバからBサーバにリポジトリを引っ越しする。

**参考サイト
[http://hain.jp/index.php/tech-j/2008/03/24/p199:title]

**手順
***引っ越し元のサーバ
まずはリポジトリのダンプファイルを作成。
&gt;||
$ svnadmin dump リポジトリパス(/home/xxx/yyyなど) &gt; repo.dump

 * リビジョン 0 をダンプしました。
 * リビジョン 1 をダンプしました。
 * リビジョン 2 をダンプしました。
 * リビジョン 3 をダンプしました。
 * リビジョン 4 をダンプしました。
 * リビジョン 5 をダンプしました。
||&lt;

***引っ越し先のサーバ
まずリポジトリを作る。
&gt;||
$ svnadmin create repos
||&lt;
次に引っ越し元で作ったdumpファイルを引っ越し先のサーバに持って来る。(FTPでもなんでも)
そして、svnadmin loadコマンドでダンプファイルを流しこむ。
&gt;||
$ svnadmin load repos &lt; repo.dump
     * パスを追加しています...
     (略)
------- リビジョン xxx をコミットしました。
||&lt;

同期を取るため、最新のリビジョンを移動するとかもできるそうなので、必要になったらその辺も調べてみる。

</body>
</day>
<day date="2012-01-23" title="">
<body>
*1327323360*[Ruby][備忘録]Rubyで固定長の値を扱う方法sprintfとパーセント演算子

**あらすじ
-Rubyで固定長の値を扱うときはどうしたらいいんだろう
--必ず5ケタにしたい！　255の場合は00255になってほしい

**参考サイト
[http://www.ruby-lang.org/ja/old-man/html/sprintf_A5D5A5A9A1BCA5DEA5C3A5C8.html:title]
[http://www.oki-osk.jp/esc/ruby/tut-04.html:title] の4.2

**方法
調べてみるとsprintfメソッドというものがあった。
&gt;|ruby|
irb(main):020:0&gt; sprintf(&quot;Number:%10d&quot;, 255)
=&gt; &quot;Number:       255&quot;
irb(main):021:0&gt; sprintf(&quot;Number:%010d&quot;, 255)
=&gt; &quot;Number:0000000255&quot;
||&lt;
なるほど、これを使えば良いのかと思っていたら、次にStringクラスに%(パーセント演算子)というものが存在している事を発見。どんな事をしてくれるのかというと…
&gt;|ruby|
irb(main):022:0&gt; &quot;Number:%010d&quot; % 255
=&gt; &quot;Number:0000000255&quot;
||&lt;
とりあえず、使ってないと見慣れない物体に見えるなぁ。

という事で、方法を二種類見つけたんだけど、これどっち使うのがいいんだろう。個人的にはsprintfの方が何やっているかはわかりやすいけど、これは慣れの問題っぽいしな。 

</body>
</day>
<day date="2012-01-30" title="">
<body>
*1327931393*[Ruby][備忘録]BASE64エンコーディングをRubyで自力実装した
**あらすじ
BASE64エンコーディングをおまじないのように使っていたので車輪の再発明で原理を学ぶ。

**参考サイト
-[http://www5d.biglobe.ne.jp/~stssk/rfc/rfc3548j.html:title]
-[http://program.station.ez-net.jp/mini/encode/base64.asp:title]
-[http://blog.livedoor.jp/maru_tak/archives/50438057.html:title]
-[http://d.hatena.ne.jp/gan2/20070603/1180888302:title]
-[http://wind-master.dip.jp/soft-info/item/7/catid/3:title]
-[http://www.sea-bird.org/doc/Cygwin/BASE64enc.html:title]
-[http://yakinikunotare.boo.jp/orebase/index.php?Ruby%2F%CA%B8%BB%FA%CE%F3%A4%AB%A4%E91%CA%B8%BB%FA%CC%DC%A4%F2%BC%E8%A4%EA%BD%D0%A4%B9:title]
-[http://www.syuhitu.org/other/b64.html:title]

**BASE64
&gt;http://ja.wikipedia.org/wiki/Base64&gt;
Base64は、データを64種類の印字可能な英数字のみを用いて、それ以外の文字を扱うことの出来ない通信環境にてマルチバイト文字やバイナリデータを扱うためのエンコード方式である。
&lt;&lt;
-データ変換形式
-メール等でも使われている
-やりかた
--元データを6bitに分割
---ちょうど6bitにならない場合は0を足す
--6bitデータを対応する文字に4文字ずつ変換(A-Za-z0-9+/)
---4文字にならない場合は=を足す
--全部くっつける

ふむう。。何か書けそう？　ちょっとやってみるか。

**ソース
&lt;script src=&quot;https://gist.github.com/1869205.js?file=base64enc.rb&quot;&gt;&lt;/script&gt;

+まず、変換したい文字のASCII値を取得
+次にそれを2進数に変換(1と2はまとめてもいいかも)
+6bit毎に分けて割り切れない分は0を足す
+6bitのデータを変換テーブルと照らしあわせて対応する1文字と変換
+4文字になるまで=を足す

**検証
-テスト文字列: kk_Ataka
***己
&gt;||
$ ruby base64.rb kk_Ataka
BYTE16:6b6b5f4174616b61
BYTE2 :0110101101101011010111110100000101110100011000010110101101100001
ADD 0 :011010110110101101011111010000010111010001100001011010110110000100
TRANS :a2tfQXRha2E
ADD = :a2tfQXRha2E=
a2tfQXRha2E=
||&lt;
***[http://hogehoge.tk/tool/:title]
-プレーンTEXT, 変換不要, 未指定, BASE64
&gt;||
a2tfQXRha2E=
||&lt;
***[http://tociyuki.flop.jp/archive/base64.html:title]
&gt;||
a2tfQXRha2E=
||&lt;
***[http://base64.taroz.jp/:title]
&gt;||
a2tfQXRha2E=
||&lt;

おお、同じようだ。

とりあえず原理は何となくわかったぞ。

</body>
</day>
<day date="2012-02-20" title="">
<body>
*1329744294*[Ruby][備忘録][Windows]Rubyの実行ファイルを作成するExerbとOcraを試してみた
**あらすじ
Rubyが入っていないWindows環境でも(要は自分以外)Rubyスクリプトを実行したいのでexe化する方法を模索する。というか、昔模索した後の結果を今更まとめる。

**対象プロジェクト
win32oleを使ってExcelファイルを読み込みシートを取得し連番で吐くというRubyスクリプトをexe化。ソースはこんな感じ。
&lt;script src=&quot;https://gist.github.com/1869221.js?file=getXlsSheetname.rb&quot;&gt;&lt;/script&gt;
出力結果はこう。
&gt;||
$ ruby getSheetname.rb Book1.xlsx
Book1.xlsx
---
Sheet1
Sheet2
Sheet3
Sheet4
Sheet5
---
end.
||&lt;
ExerbとOcraをためしてみた。

**Exerb(ダメだった)
最新は5.4.0らしいが、今回はなんでか4.3.0を入れていた。(理由不明)
***手順(失念)
-[http://exerb.sourceforge.jp/:title]よりExerbをダウンロード後、setup.rbを実行？だけでいいんだっけ？
-mkexy.batとexerb.batがRubyのbinに入るはず
-exyファイルを作成する
&gt;||
$ mkexy.bat getSheetname.rb
---
end.
||&lt;
-成功するとgetSheetname.exyというファイルが作成される(GemfileにおけるGemfile.lockのようなもん？)
&gt;||
# Generated by mkexy
# on 2012-02-15 22:05

general:
  startup: getSheetname.rb
  core: cui
  kcode: none

file:
  getSheetname.rb:
  win32ole.so:
    file: C:/rubies/Ruby/lib/ruby/1.8/i386-mswin32/win32ole.so
    type: extension-library
  nkf.so:
    file: C:/rubies/Ruby/lib/ruby/1.8/i386-mswin32/nkf.so
    type: extension-library
  kconv.rb:
    file: C:/rubies/Ruby/lib/ruby/1.8/kconv.rb
  rational.rb:
    file: C:/rubies/Ruby/lib/ruby/1.8/rational.rb
  date/format.rb:
    file: C:/rubies/Ruby/lib/ruby/1.8/date/format.rb
  date.rb:
    file: C:/rubies/Ruby/lib/ruby/1.8/date.rb
  prettyprint.rb:
    file: C:/rubies/Ruby/lib/ruby/1.8/prettyprint.rb
  pp.rb:
    file: C:/rubies/Ruby/lib/ruby/1.8/pp.rb
||&lt;
-exyファイルをもとにexeファイルを作成する
&gt;||
$ exerb.bat getSheetname.exy
||&lt;
-特にエラーも出ず、exeファイルも生成されたが…実行時にエラー
&gt;||
プロシージャ エントリ ポイント rb_during_gc がダイナミックリンクライブラリ getSheetname.exe から見つかりませんでした。
||&lt;
[http://ruby.11.n6.nabble.com/ruby-dev-35318-rb-during-gc-td3526996.html:title]

これ？　んー何かコマンドが足りない？　手がかりが少なそうなので、もう一つのツールを当たってみる事に…。

**Ocra
バージョンは1.3.0

***手順
-gemでインストール
&gt;||
$ gem install ocra
||&lt;
-ocraコマンドでexe化
&gt;||
$ ocra.bat getSheetname.rb
=== Loading script to check dependencies
---
end.

=== Building getSheetname.exe
=== Adding user-supplied source files
=== Adding ruby executable ruby.exe
=== Adding library files
=== Compressing 2113827 bytes
=== Finished building getSheetname.exe (615866 bytes)
||&lt;
これで終わり。ワンコマンドでいける分、手順的にはOcraの方が早いか。(他のメリット・デメリットはおいといて……)

</body>
</day>
<day date="2012-02-23" title="">
<body>
*1330001338*[Jenkins][備忘録][Git]GitプロジェクトをコミットしたタイミングでJenkinsにビルドをしてもらいたい！
**あらすじ
-全然CIっぽくJenkinsを使っていなかったので本格的に使ってみたい。
-Gitを連携させたい
-GitリポジトリにコミットしたタイミングでJenkinsにビルドさせてみたい
…のだが、いきなりビルド時にcloneできないという現象でハマっていた。
&gt;||
ERROR: Error cloning remote repo 'origin' : Could not clone C:/project/excel_for_ruby.git
||&lt;

**上記の原因
cloneできない問題はJenkins実行時にgit.exeにパスが通ってなかった、設定していなかったという非常に残念なものだった。Jenkins実践入門にも手順が書いてあった。((環境がアレだったので、proxyの設定とかその辺も探してしまった。))

**Jenkinsの「ビルド実行」でGitリポジトリのソースのテストをする
-Jenkinsの管理 =&gt; プラグインの管理 =&gt; Jenkins GIT plugin をインストール
-新規ジョブ作成 =&gt; フリースタイル・プロジェクト でプロジェクト作成
-ソースコードシステム
--Gitを選択
--リポジトリを入力
---C:\project\excel_for_ruby
-ビルド
--Windowsバッチコマンドの実行
---rspecを実行できるように記述する
&gt;||
cd &quot;C:\project\excel_for_ruby&quot;
rspec -fs spec\*
||&lt;
これでビルドするとはじめのcloneできないエラー。
&gt;||
Error cloning remote repo 'origin' : Could not clone C:\project\excel_for_ruby
||&lt;
-Jenkinsから見たGitのパスを設定
--Jenkinsの管理 =&gt; システムの設定
---Gitのパスを追加するフォームがあるのでこれを追加
---Nameもなんでもいいから入力する(Defaultにした)

**GitでCommitしたらJenkinsがビルドをしてくれるようにする
「wget ビルド実行パス」というコマンドをGitのフックスクリプトに記述すればコミット時にビルド実行できるらしい。とりあえずWindows用のwgetを取得。[http://users.ugent.be/~bpuype/wget/:title]

プロジェクト内の.git/hooks/post-commitを編集。
&gt;||
echo &quot;Hook post-commit start&quot;
wget --no-proxy http://localhost:8080/job/excel_for_ruby/build?delay=5sec || echo &quot;wget failed&quot;
echo &quot;Hook post-commit end&quot;
||&lt;
proxyが噛んでいたので--no-proxy指定しないと400エラーに。
&gt;||
Hook post-commit start
--2012-02-09 16:40:39--  http://localhost:8080/job/excel_for_ruby/build?delay=5s
ec
Resolving proxy.xxx.jp... xxx.xxx.xxx.xxx
Connecting to proxy.xxx.jp|xxx.xxx.xxx.xxx|:8080... connected.
Proxy request sent, awaiting response... 400 Bad Request
2012-02-09 16:40:39 ERROR 400: Bad Request.
||&lt;
これでCommit時にビルドが走ってくれる！　これでようやくスタートラインが見えてきた！

</body>
</day>
<day date="2012-02-28" title="">
<body>
*1330436604*[Ruby][備忘録][Windows][Rails]Rails3レシピブックを読みながらRailsを学ぶ

**あらすじ
Redmineプラグインの作り方を学ぶ前にRailsの基本的な事を学ばねばなりますまい。そういやあ。

**参考
-Rail3レシピブック 190の技

**環境
-WindowsXP
-Ruby 1.8.7
-Rails 3.2.1

**準備
-はじめにbundleでrailsをインストールする……が、なんかエラーが。
&gt;||
Gem::InstallError: The 'json' native gem requires installed build
tools.

Please update your PATH to include build tools or download the DevKit
from 'http://rubyinstaller.org/downloads' and follow the instructions
at 'http://github.com/oneclick/rubyinstaller/wiki/Development-Kit'
An error occured while installing json (1.6.5), and Bundler cannot continue.
Make sure that `gem install json -v '1.6.5'` succeeds before bundling.
||&lt;
bundleするまえにjsonをインストールしてくれと言われた。ので、そのとおりにgem install……。
&gt;||
$ gem install json -v '1.6.5'
ERROR:  Error installing json:
        The 'json' native gem requires installed build tools.

Please update your PATH to include build tools or download the DevKit
from 'http://rubyinstaller.org/downloads' and follow the instructions
at 'http://github.com/oneclick/rubyinstaller/wiki/Development-Kit'
||&lt;
まだだめか。Development-Kitが必要？　[https://github.com/oneclick/rubyinstaller/wiki/Development-Kit:title]へ。

どれ落とせばいいんだろうと思ったら、
&gt;&gt;
for the legacy RubyInstaller v1.8.6 use the DevKit-3.4.5 available at our archive downloads page. For RubyInstaller versions 1.8.7, 1.9.2, and 1.9.3 use the DevKit 4.5.2 from our main downloads page.
&lt;&lt;
という事らしいので4.5.2をDLしexeを実行。さらに以下を実行。
&gt;||
$ cd &lt;DEVKIT_INSTALL_DIR&gt;
$ ruby dk.rb init

Initialization complete! Please review and modify the auto-generated
'config.yml' file to ensure it contains the root directories to all
of the installed Rubies you want enhanced by the DevKit.
||&lt;
config.ymlが生成されるので例に従ってRubyのパスを記述。
&gt;||
  8 # Example:
  9 #
 10 # ---
 11 # - C:/ruby19trunk
 12 # - C:/ruby192dev
 13 #
 14 ---
+15 - C:\rubies\Ruby-187-p352
||&lt;
で、インストール。
&gt;||
$ ruby dk.rb review
Based upon the settings in the 'config.yml' file generated
from running 'ruby dk.rb init' and any of your customizations,
DevKit functionality will be injected into the following Rubies
when you run 'ruby dk.rb install'.

C:/rubies/Ruby-187-p352

$ ruby dk.rb install
[INFO] Updating convenience notice gem override for 'C:/rubies/Ruby-187-p352'
[INFO] Installing 'C:/rubies/Ruby-187-p352/lib/ruby/site_ruby/devkit.rb'
||&lt;
満を持してbundle install再び。
&gt;||
…
Installing json (1.6.5) with native extensions
…
||&lt;
オッケー。

**アプリケーション作成
-rails new アプリ名で作成
&gt;||
$ bundle exec rails new sampleapp
      create
      create  README.rdoc
      create  Rakefile
      create  config.ru
      create  .gitignore
      create  Gemfile
      create  app
      create  app/assets/images/rails.png
||&lt;
-rails new アプリ名 -d DBでDBを指定して作成もできる。省略した場合はSQLite3
-このアプリ名は変数Rails.rootで参照できる
-Rails.rootでbundle install(また？)
Bundleで入れたRailsでRailsアプリをnewしてそのRailsアプリでまたBundleしてるのが気持ち悪いけどこんなもんなのかな。

**DB設定
これはRedmineでやった事ある。
-config/database.ymlを編集……し……？
&gt;||
  6 development:
  7   adapter: sqlite3
  8   database: db/development.sqlite3
  9   pool: 5
 10   timeout: 5000
||&lt;
あれ？　もうよろしくされてるじゃん。

**バージョン等
-rail -vでRailsのバージョン
&gt;||
$ bundle exec rails -v
Rails 3.2.1
||&lt;
-rake aboutでRailが使っているライブラリ
&gt;||
$ bundle exec rake about
About your application's environment
Ruby version              1.8.7 (i386-mingw32)
RubyGems version          1.8.12
Rack version              1.4
Rails version             3.2.1
JavaScript Runtime        Node.js (V8)
Active Record version     3.2.1
…
||&lt;

**とりあえず起動
-rails sまたはrails serverで起動。rails s -p ポート番号でポート指定可能
&gt;||
$ bundle exec rails s
=&gt; Booting WEBrick
=&gt; Rails 3.2.1 application starting in development on http://0.0.0.0:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2012-02-28 19:27:58] INFO  WEBrick 1.3.1
[2012-02-28 19:27:58] INFO  ruby 1.8.7 (2011-06-30) [i386-mingw32]
[2012-02-28 19:27:58] INFO  WEBrick::HTTPServer#start: pid=5396 port=3000
||&lt;
-http://localhost:3000にアクセスしてWelcome aboard You’re riding Ruby on Rails! と表示されていれば動いている

**Railsアプリ内のファイルとディレクトリ(抜粋)
Redmineでも見たことがあるファイル等もあるが、役割を明確にわかっていなかった。
|*file/dir|*役割|
|config.ru|Rackアプリケーションとして実行する際の設定ファイル|
|Rakefile|MakefileのRuby版、MakeのRuby版であるRakeで使う|
|app/|アプリケーションを格納|
|app/assets/|CoffeeScript等を格納|
|app/controllers/|コントローラを格納|
|app/models/|モデルを格納|
|app/views/|ビューのテンプレート(html,js)を格納|
|app/views/layouts/|ビューのレイアウトとして使用するhtmlテンプレートを格納|
|app/helper/|ヘルパーを格納|
|config/|DB設定、環境設定等各種設定ファイルを格納|
|config/environments/|各実行環境用の設定ファイルを格納|
|config/initializers/|初期化時に実行されるファイルを格納|
|config/locales/|I18n用のファイルを格納|
|db/|DB操作に使用するスクリプトを格納、SQLite3の場合はDBファイルも|
|db/migrate/|DBスキーマの編集のためのマイグレーションファイルを格納|
|lib/|MVCいずれにも属さない処理をライブラリ化し格納|
|script/|各種スクリプトを格納|
|public|静的ファイル(html,js,css,画像)を格納|
|test/|テストコードを格納|
|vendor/|サードパーティ製のライブラリ、外部ライブラリを格納|
|vendor/plugins/|プラグインを格納|
ほとんどになってしまった……。とりあえず役割は覚えておこう。ただし一部ピンときてない場所もあり。

続く。[http://d.hatena.ne.jp/kk_Ataka/20120229/1330528564:title]

</body>
</day>
<day date="2012-02-29" title="">
<body>
*1330528564*[Ruby][Rails][Windows][備忘録]Rails3レシピブックを読みながらRailsを学ぶ モデル、コントローラ、ビュー、Railsの規約など

**前回までのあらすじ
-[http://d.hatena.ne.jp/kk_Ataka/20120228/1330436604:title]
Railsをインストールして起動する所まではできた。

**参考
-Rail3レシピブック 190の技

**環境
-WindowsXP
-Ruby1.8.7
-Rails3.2.1

**MVCを自動生成する
***アプリケーションのscaffold(足場)の作成
scaffoldジェネレータを実行する事でCRUD操作が可能な簡単なアプリケーションの足場が生成できる。コマンドはrails generate ジェネレータ モデル名 カラム名:型 カラム名:型 (以下繰り返せる)...
&gt;||
$ bundle exec rails generate scaffold Blog name:string user_id:integer
      invoke  active_record
      create    db/migrate/20120229022816_create_blogs.rb
      create    app/models/blog.rb
      invoke    test_unit
      create      test/unit/blog_test.rb
      create      test/fixtures/blogs.yml
       route  resources :blogs
      invoke  scaffold_controller
      create    app/controllers/blogs_controller.rb
      invoke    erb
      create      app/views/blogs
      create      app/views/blogs/index.html.erb
      create      app/views/blogs/edit.html.erb
      create      app/views/blogs/show.html.erb
      create      app/views/blogs/new.html.erb
      create      app/views/blogs/_form.html.erb
      invoke    test_unit
      create      test/functional/blogs_controller_test.rb
      invoke    helper
      create      app/helpers/blogs_helper.rb
      invoke      test_unit
      create        test/unit/helpers/blogs_helper_test.rb
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/blogs.js.coffee
      invoke    scss
      create      app/assets/stylesheets/blogs.css.scss
      invoke  scss
      create    app/assets/stylesheets/scaffolds.css.scss
||&lt;
いろいろ生成された！　確かに[http://d.hatena.ne.jp/kk_Ataka/20120228/1330436604:title=前回]のまとめたファイルとディレクトリの役割通りにファイルが生成されてるっぽい。

***テーブルの作成
テーブルをDBに定義。rake db:migrateコマンドを実行する。足場を作った際にdb/migrate/20120229022816_create_blogs.rbというマイグレーションファイルができたので、これを使っている？
&gt;||
$ bundle exec rake db:migrate
==  CreateBlogs: migrating ====================================================
-- create_table(:blogs)
   -&gt; 0.0000s
==  CreateBlogs: migrated (0.0000s) ===========================================
||&lt;
作られたようだ。

***マイグレーションとは
-DBのスキーマを変更する機能
-一気に作らずちょっとずつ変更もできる
-rails generate migration マイグレーション名で作成可能
--ファイル名はタイムスタンプ_マイグレーション名.rbでdb/migrate/に格納
-上記の場合はscaffoldジェネレータで全部一括で作成している様子
--db/migrate/20120229022816_create_blogs.rb

***また起動
で、わくわくしながら起動。アドレスはhttp://localhost:3000/blogs。Listing blogsというページとCRUDできるフォームが用意されたページが！

Blogモデルを作成して、blogsになったのは規約ってやつだろうか……といったところで次のレシピが規約だった。

**Railsの規約
-設定ファイルはあまり作らない
-ファイル名、クラス名、ディレクトリの場所に規則
規則を知る事でどこでなにやってるのかわかりそう。

***コントローラ
-app/controllers/に格納
-クラス名は単語区切りキャメルケースで「(先頭大文字)コントローラController」 =&gt; BlogsController
-ファイル名はクラス名をスネークケースに変換 =&gt; blogs_controller.rb
-名称は対応するモデルの複数系 =&gt; BlogモデルのコントローラなのでBlogs
--scaffoldで生成されたモデルとコントローラもこの規則に従っている

なるほどね。だからBlogモデルでコントローラはBlogsだったのか。

***モデル
-app/models/に格納
-クラス名は単語区切りキャメルケースで名詞の単数形 =&gt; Blog
-ファイル名はクラス名をスネークケースに変換 =&gt; blog.rb
-モデルとDBテーブルは1:1で対応 =&gt; モデルBlog : blogsテーブル
-変換ルールはActiveSupportで定義されている

***ビュー
-app/views/コントローラ名/にテンプレート
--上で作ってたblogの場合app/views/blogsの下
-ビューファイル名はindex.html.erb, show.html.erb 等
--アクション名.フォーマット名.レンダリングエンジン名の規則で命名
--レンダリングエンジンerbは任意のテキストファイルにRubyコードを埋められるもの。Javaのjspみたいなもん？
--hamlとかでもいい？
-show.html.erb の場合はshowアクションを実行する場合show.html.erbをerbでレンダリングしてhtmlフォーマットで出力とかそういう感じかな

……ここまではなんとか。どこで何してるかとかは少しずつわかってきた。

</body>
</day>
<day date="2012-03-05" title="">
<body>
*1330951640*[Git][備忘録][Windows]Pro Gitと入門gitでGitの復習 基本操作編
**あらすじ
めっきりadd, commitくらいしか使っていないGitをもう一回さわってみて学びなおす。Pro Gitのページもブクマしただけで真剣に読んでいなかったので読み進める。
続き。
-[http://d.hatena.ne.jp/kk_Ataka/20120311/1331472478:title]

**参考
-[http://progit.org/:title]
-入門git

**リポジトリの作成
リポジトリにしたいディレクトリの中でinitコマンドで作成 or init ディレクトリ で生成。
&gt;||
$ git init
Initialized empty Git repository in c:/project/testRemote/test/.git/
||&lt;
以後は基本的にリポジトリの中で作業。

**コンフィグ
***コンフィグファイルの適用範囲と優先度
下に行くほど適用範囲は狭くなり、優先度が上がる。(同じオプションがあったら下のものが適用される)
|*ファイル|*Windows(msysGit)では|*範囲|*優先度|*configコマンドでの設定方法|
|/etc/gitconfig|(msysのルート)/etc/gitconfig|システム全体|低|--system|
|~/.gitconfig|%USERPROFILE%\.gitconfig|あるユーザ|中|--global|
|(リポジトリ内).git/config|(リポジトリ内).git/config|そのリポジトリ|高|(指定なし)|

***コンフィグの一覧を見る
そのリポジトリのコンフィグを見る。
&gt;||
$ git config --list
user.name=kk_Ataka
...
||&lt;
あるユーザのコンフィグを見る。
&gt;||
$ git config --list --global
||&lt;
システム全体のコンフィグを見る。
&gt;||
$ git config --list --system
||&lt;
***コンフィグの確認(特定の)
&gt;||
$ git config user.name
kk_Ataka
||&lt;
***コンフィグの編集
&gt;||
$ git config --global user.name &quot;kk_Ataka&quot;
$ git config --global user.email &quot;test@example.com&quot;
||&lt;

**リポジトリ作成
.git ファイルを作成し、その中にGitリポジトリのスケルトンが格納される。→スケルトン？
***リポジトリを作成する
&gt;||
$ git init testdir
Initialized empty Git repository in c:/project/testdir/.git/
||&lt;

**リポジトリのクローン
既存のリポジトリを歴史毎ごっそり持ってくる。プロトコルにはhttp,https,git等がある。
***既存リポジトリのクローン
&gt;||
$ git clone http://github.com/gosyujin/excel_for_ruby.git
Cloning into excel_for_ruby...
remote: Counting objects: 22, done.
remote: Compressing objects: 100% (13/13), done.
remote: Total 22 (delta 2), reused 21 (delta 1)
Unpacking objects: 100% (22/22), done.
||&lt;
&gt;||
$ cd excel_for_ruby\
$ git log
commit b6cd9964b1e586d8be280acd40c9719f6cc045c0
Author: kk_Ataka &lt;kk_ataka@---.---.jp&gt;
Date:   Sun Dec 25 17:36:53 2011 +0900

    .gitignore追加
||&lt;
**状態確認
***作業ツリーの状態確認
-変更なし
&gt;||
$ git status
# On branch master
nothing to commit (working directory clean)
||&lt;
-変更あり
-Untracked files
まだGitに追跡されていないファイル。(＝前回コミット時になかったファイル)これからaddする必要がある。赤く表示される。
&gt;||
$ git status
# On branch master
# Untracked files:
#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
#
#       README
nothing added to commit but untracked files present (use &quot;git add&quot; to track)
||&lt;
-new file
addで新しく追跡開始されたファイルmenu.htmlがステージされている。緑で表示される。
&gt;||
# On branch master
# Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#       new file:   menu.html
||&lt;
-modified
既に追跡されているファイルが変更された。赤で表示される。これからaddでステージする。
&gt;||
$ git status
# On branch master
# Changed but not updated:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       modified:   index.html
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
||&lt;
**ファイル追加(追跡)
***リポジトリに追加(追跡の開始)
***ステージング
追跡の開始ともいうらしい。ディレクトリを指定すると、その下を再帰的に追跡する。
&gt;||
$ git add index.html
||&lt;

**ファイル比較
***ファイルの比較
-作業ツリーの内容とステージングエリアの比較
&gt;||
$ git status
# On branch master
# Changed but not updated:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       modified:   index.html
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
||&lt;
&gt;||
$ git diff
diff --git a/index.html b/index.html
index a633da3..bc2a94f 100644
--- a/index.html
+++ b/index.html
@@ -1,8 +1,9 @@
 &lt;html&gt;
   &lt;head&gt;
-    &lt;title&gt;Welcome !!&lt;/title&gt;
+    &lt;title&gt;Welcome&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
     &lt;h1&gt;Hello&lt;/h1&gt;
+    &lt;p&gt;Hello world&lt;/p&gt;
   &lt;/body&gt;
 &lt;/html&gt;
||&lt;
-ステージされた内容と直近のコミットの比較
&gt;||
$ git add index.html
$ git status
# On branch master
# Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#       modified:   index.html
#
$ git diff
||&lt;
add してdiff すると出力はなし。--cached, --stagedオプションをつけるとステージされた内容との比較を取る。
&gt;||
$ git diff --cached
diff --git a/index.html b/index.html
index a633da3..bc2a94f 100644
--- a/index.html
+++ b/index.html
@@ -1,8 +1,9 @@
 &lt;html&gt;
   &lt;head&gt;
-    &lt;title&gt;Welcome !!&lt;/title&gt;
+    &lt;title&gt;Welcome&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
     &lt;h1&gt;Hello&lt;/h1&gt;
+    &lt;p&gt;Hello world&lt;/p&gt;
   &lt;/body&gt;
 &lt;/html&gt;
$ git diff --staged
diff --git a/index.html b/index.html
index a633da3..bc2a94f 100644
--- a/index.html
+++ b/index.html
@@ -1,8 +1,9 @@
 &lt;html&gt;
   &lt;head&gt;
-    &lt;title&gt;Welcome !!&lt;/title&gt;
+    &lt;title&gt;Welcome&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
     &lt;h1&gt;Hello&lt;/h1&gt;
+    &lt;p&gt;Hello world&lt;/p&gt;
   &lt;/body&gt;
 &lt;/html&gt;
||&lt;
ステージした後に編集。
&gt;||
$ git status
# On branch master
# Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#       modified:   index.html
#
# Changed but not updated:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       modified:   index.html
||&lt;
これをdiff, diff --stagedで比較すると……。
&gt;||
$ git diff
diff --git a/index.html b/index.html
index bc2a94f..341bb47 100644
--- a/index.html
+++ b/index.html
@@ -4,6 +4,7 @@
   &lt;/head&gt;
   &lt;body&gt;
     &lt;h1&gt;Hello&lt;/h1&gt;
-    &lt;p&gt;Hello world&lt;/p&gt;
+    &lt;p&gt;Hello world !!&lt;/p&gt;
+    &lt;span&gt;I am typo&lt;/span&gt;
   &lt;/body&gt;
 &lt;/html&gt;
$ git diff --staged
diff --git a/index.html b/index.html
index a633da3..bc2a94f 100644
--- a/index.html
+++ b/index.html
@@ -1,8 +1,9 @@
 &lt;html&gt;
   &lt;head&gt;
-    &lt;title&gt;Welcome !!&lt;/title&gt;
+    &lt;title&gt;Welcome&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
     &lt;h1&gt;Hello&lt;/h1&gt;
+    &lt;p&gt;Hello world&lt;/p&gt;
   &lt;/body&gt;
 &lt;/html&gt;
||&lt;
diffが作業ツリーの内容とステージングエリアの比較でdiff --stagedがステージされた内容と直近のコミットの比較だから歴史としてはa633da3 -&gt; bc2a94f -&gt; 341bb47こうか。

**ファイル削除(追跡除外)
***ファイルの削除(追跡の除外)
通常のrmだと作業ツリーからファイルを消しただけ。
&gt;||
$ rm VERSION

$ git status
# On branch master
# Changed but not updated:
#   (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       deleted:    VERSION
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
||&lt;
git rm 後にcommitする事で追跡対象から除外する。
&gt;||
$ git rm VERSION
rm 'VERSION'

$ git status
# On branch master
# Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#       deleted:    VERSION
#
$ git commit -m &quot;Deleted VERSION file&quot;
[master 5981baf] Deleted VERSION file
 0 files changed, 0 insertions(+), 0 deletions(-)
 delete mode 100644 VERSION

$ git status
# On branch master
nothing to commit (working directory clean)
||&lt;

**コミット
***コミットを行う
ログ記述のためにgit config core.editorや環境変数EDITORに適切なエディタが設定されている必要がある。VIなど
&gt;||
$ git commit index.html
||&lt;
&gt;||
 1
 2 # Please enter the commit message for your changes. Lines starting
 3 # with '#' will be ignored, and an empty message aborts the commit.
 4 # On branch master
 5 # Changes to be committed:
 6 #   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
 7 #
 8 #       modified:   index.html
 9 #
||&lt;
commit -v でdiffを確認する事も出来る。
&gt;||
 1
 2 # Please enter the commit message for your changes. Lines starting
 3 # with '#' will be ignored, and an empty message aborts the commit.
 4 # Explicit paths specified without -i nor -o; assuming --only paths...
 5 # On branch master
 6 # Changes to be committed:
 7 #   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
 8 #
 9 #       modified:   index.html
10 #
11 diff --git a/index.html b/index.html
12 index a633da3..341bb47 100644
13 --- a/index.html
14 +++ b/index.html
15 @@ -1,8 +1,10 @@
16  &lt;html&gt;
17    &lt;head&gt;
18 -    &lt;title&gt;Welcome !!&lt;/title&gt;
19 +    &lt;title&gt;Welcome&lt;/title&gt;
20    &lt;/head&gt;
21    &lt;body&gt;
22      &lt;h1&gt;Hello&lt;/h1&gt;
23 +    &lt;p&gt;Hello world !!&lt;/p&gt;
||&lt;
&gt;||
[master (root-commit) 4b5c302] First commit.
 1 files changed, 8 insertions(+), 0 deletions(-)
 create mode 100644 index.html
||&lt;
***コミットを行う(コミットログまでワンライナー)
commit -mでコミットログを指定できる。-mを打つ毎に改行される
&gt;||
$ git commit -m &quot;Modified index.html title&quot; -m &quot;Added menu.html&quot;
[master eaa9ebc] Modified index.html title
 2 files changed, 6 insertions(+), 1 deletions(-)
 create mode 100644 menu.html
||&lt;
***追跡ファイルのステージを省略
addを省く。
&gt;||
$ git status
# On branch master
# Changed but not updated:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       modified:   menu.html
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
||&lt;
&gt;||
$ git commit -a -m &quot;Added head tag&quot;
[master 1d4d741] Added head tag
 1 files changed, 2 insertions(+), 0 deletions(-)
||&lt;
&gt;||
$ git status
# On branch master
nothing to commit (working directory clean)
||&lt;
追跡可能じゃないとできない？
&gt;||
$ touch VERSION

$ git commit -a -m &quot;Added VERSION file&quot;
# On branch master
# Untracked files:
#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
#
#       VERSION
nothing added to commit but untracked files present (use &quot;git add&quot; to track)
||&lt;

**コミットのやり直し
誤ってtypoしたままコミットしてしまった。
&gt;||
$ cat README
Haloo Wold

$ git commit -a -m &quot;Typo commit&quot;
[master 663daa6] Typo commit
 1 files changed, 1 insertions(+), 0 deletions(-)

$ git log
commit 663daa64c7fab6a23e17a7e544dd81df85d88dc6
Author: kk_Ataka &lt;test@example.com&gt;
Date:   Tue Feb 21 18:50:59 2012 +0900

    Typo commit

commit 5981baf9b3a9bd4a1d5a9cf5f26738391fbb9fff
Author: kk_Ataka &lt;test@example.com&gt;
Date:   Tue Feb 21 13:10:02 2012 +0900

    Deleted VERSION file
||&lt;
コミットした後commit --amendで前回のコミット直前からやり直せる？
&gt;||
$ vi README
$ git add README
$ git commit --amend

$ git log
commit a59ff99de68cbf359c814f25cda9c926ef9cdad9
Author: kk_Ataka &lt;test@example.com&gt;
Date:   Tue Feb 21 18:50:59 2012 +0900

    Modified typo
commit 5981baf9b3a9bd4a1d5a9cf5f26738391fbb9fff
Author: kk_Ataka &lt;test@example.com&gt;
Date:   Tue Feb 21 13:10:02 2012 +0900

    Deleted VERSION file
||&lt;

**ステージのやり直し
ステージングエリアに入れたファイルを取り消したいときはresetコマンドを使う。
&gt;||
$ git status
# On branch master
# Changed but not updated:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       modified:   README
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)

$ git add README

$ git status
# On branch master
# Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#       modified:   README
#
||&lt;
ここでステージングエリアに入れたREADMEファイルをreset。
&gt;||
$ git reset HEAD README
Unstaged changes after reset:
M       README
||&lt;
&gt;||
$ git status
# On branch master
# Changed but not updated:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       modified:   README
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
||&lt;
HEADってなんじゃらほい？　今自分が作業じているローカルブランチへのポインタ。上から見ていくと今はmasterから動いていないので作業しているブランチはmasterのまま=HEADもmaster。

**変更の取り消し
SubversionでいうところのRevertであっている？　編集したファイルを直前のコミットの状態まで戻す。実はずっとgit statusコマンド打っていたときに出ていた。
&gt;||
$ git diff README
diff --git a/README b/README
index 27f338f..557db03 100644
--- a/README
+++ b/README
@@ -1 +1 @@
-Hello Wrld
+Hello World

$ git status
# On branch master
# Changed but not updated:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       modified:   README
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
||&lt;
checkout -- &lt;file&gt;で戻せるようだ。
&gt;||
$ git checkout -- README

$ git diff README

$ cat README
Hello Wrld
||&lt;

**リモート関連
***(リモート)リポジトリの作成
作業ディレクトリがいらない場合はinit --bareオプションをつける。ディレクトリ名に.gitをつけるのは慣例……だったかな？　何かに書いてあった気がする。
&gt;||
$ git init --bare remote1.git
Initialized empty Git repository in c:/project/testRemote/remote1.git/
||&lt;

***リモートリポジトリの追加
追加はremote add [shortname] [url]で行う。以後、gitコマンドからはshortnameで指定できるようになる。
&gt;||
$ git remote add rem1 c:/project/testRemote/remote1
||&lt;
ここでURLを間違えていた事に気づく。(.git忘れた)が、同じshortnameにaddしても既にあるよって言われてしまうので削除しないといけない。
&gt;||
$ git remote add rem1 c:/project/testRemote/remote1.git
fatal: remote rem1 already exists.
||&lt;
また、Windows？msysGit？を使っている場合は、Windows感覚でパスを打ちこむとエスケープされる。
&gt;||
$ git remote add rem1 c:\project\testRemote\remote1.git

$ git remote -v
rem1    c:projecttestRemoteremote1.git (fetch)
rem1    c:projecttestRemoteremote1.git (push)
||&lt;
円マークを重ねるのとスラッシュとでは表記は変わるけど違いはないようだ。
&gt;||
$ git remote add rem1 c:/project/testRemote/remote1.git

$ git remote add rem2 c:\\project\\testRemote\\remote2.git

$ git remote -v
rem1    c:/project/testRemote/remote1.git (fetch)
rem1    c:/project/testRemote/remote1.git (push)
rem2    c:\project\testRemote\remote2.git (fetch)
rem2    c:\project\testRemote\remote2.git (push)
||&lt;

***リモートリポジトリのリネーム
remote rename [shortname_now] [shortname_after]でいける。
&gt;||
$ git remote rename rem1 remo

$ git remote
rem2
remo
||&lt;

***リモートリポジトリの削除
remote rm [shortname]
&gt;||
$ git remote rm rem1
||&lt;

***リモートリポジトリの確認
リポジトリからcloneしてきた場合はoriginという名前が付けられる。Gitがデフォルトでつけるshortname。よくgit push origin masterとかで出てくるorigin。
&gt;||
$ git remote -v
origin  http://github.com/gosyujin/evernote_for_ruby.git (fetch)
origin  http://github.com/gosyujin/evernote_for_ruby.git (push)
||&lt;
git initでローカルに作成したリポジトリだとoriginもないので何も表示されない。
&gt;||
$ git remote

||&lt;
addした後はそのリポジトリのshortnameが列挙される。
&gt;||
$ git remote
rem1
rem2
||&lt;
remote -vでURLも。
&gt;||
$ git remote -v
rem1    c:/project/testRemote/remote1.git (fetch)
rem1    c:/project/testRemote/remote1.git (push)
rem2    c:\project\testRemote\remote2.git (fetch)
rem2    c:\project\testRemote\remote2.git (push)
||&lt;
remote show [shortname]でより詳しく。
&gt;||
$ git remote show rem1
 * remote rem1
   Fetch URL: c:/project/testRemote/remote1.git
   Push  URL: c:/project/testRemote/remote1.git
   HEAD branch: master
   Remote branch:
     master tracked
   Local ref configured for 'git push':
     master pushes to master (up to date)
||&lt;

***リモートリポジトリからデータ取得(フェッチ、プル)
リモートにあるデータの内、まだ持っていないものを取得できる。fetchコマンドを使う。
&gt;||
$ git fetch rem1

$ git fetch rem2
||&lt;
空のリポジトリからfetchしているので特に何も起こらなかった……。cloneした後(最近fetchした後)からの変更を取得できる。ただし、これだと取得しただけなのでfetch後マージをしてやる必要がある。フェッチ、マージを一気にやってくれるgit pullというコマンドもある。

***リモートリポジトリへのデータ登録(プッシュ)
ローカルにコミットしたデータをプッシュ。という事でpushコマンドを使用。push [shortname] [branch]でプッシュ先とプッシュするブランチを指定。
&gt;||
$ git push rem1 master
Counting objects: 26, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (22/22), done.
Writing objects: 100% (26/26), 2.33 KiB, done.
Total 26 (delta 5), reused 0 (delta 0)
Unpacking objects: 100% (26/26), done.
To c:/project/testRemote/remote1.git
 * [new branch]      master -&gt; master
||&lt;
次はブランチから。

</body>
</day>
<day date="2012-03-11" title="">
<body>
*1331472478*[Git][備忘録][Windows]Pro Gitと入門gitでGitの復習 ブランチ編
**前回までのあらすじ
-[http://d.hatena.ne.jp/kk_Ataka/20120305/1330951640:title]
今回はローカルブランチから。

**参考
-[http://progit.org/:title]
-入門git

**他のVCSとの違い
-Subversionなどは各ファイルに対しての差分を時間軸で持っていた
-Gitではコミットのたびにその時のリポジトリ全体のスナップショットをとる
--ただし、変更がなかったファイルは以前のスナップショットで格納したファイルへのリンクを貼っている

**Gitのオブジェクト
Gitには大きく分けて4つのオブジェクトが存在する。
-Commitオブジェクト
-Treeオブジェクト
-Blobオブジェクト
-Tagオブジェクト

***Commitオブジェクト
リポジトリのルート。ファイル情報(ツリー)やメタデータを格納している。以下のコミットのCommitオブジェクトを見てみる。
&gt;||
$ git log --pretty=oneline
5f431a8cf6023e7398102dfef8b88baf1c581023 Typo 4
||&lt;
log --pretty=rawコマンドを実行するとハッシュタグがいろいろと。
&gt;||
$ git log --pretty=raw 5f431a8cf6023e7398102dfef8b88baf1c581023
commit 5f431a8cf6023e7398102dfef8b88baf1c581023
tree de445cf5b526c554dea465d09cea6d65059d1f80
parent a59ff99de68cbf359c814f25cda9c926ef9cdad9
author kk_Ataka &lt;test@example.com&gt; 1329818747 +0900
committer kk_Ataka &lt;test@example.com&gt; 1329819044 +0900

    Typo 4
||&lt;
|*commit|このコミットに対するSHA1名|
|*tree|このコミットの中身を記載しているSHA1名|
|*parent|一つ前のコミットのSHA1名。存在しない場合はそれが一発目(Rootコミット)、マージされた場合は1つ以上になる場合もある|
|*author|作成者|
|*committer|コミッター|
author, committerあたりがメタデータになるのかな。

***Treeオブジェクト
あるコミット時点の中身を格納している。ls-treeコマンドかshowコマンドで確認が出来る。ls-treeコマンドの方が詳しい。
&gt;||
$ git ls-tree 5f431a8cf6023e7398102dfef8b88baf1c581023
100644 blob 27f338f5bd0c368f96e063127705bd1bb81e992a    README # ファイル
100644 blob 0dc64072619bf0734c878d90e9150b6978898083    index.html # ファイル
100644 blob 543200914423ddc0cb2249c322f262e31ee11c55    menu.html # ファイル
||&lt;
&gt;||
100644 blob c447b5cfd585f44aafef7d513c5efea5471e2848    convert.rb # ファイル
040000 tree a1117a81580de591d292b9e6d80deee3e1cabd85    testdata # ディレクトリ

#testdataディレクトリを調査
$ git ls-tree a1117a81580de591d292b9e6d80deee3e1cabd85
040000 tree a9da0b188817cc119eff96f4c8db5306d0be009d    init # ディレクトリ

#initディレクトリを調査
$ git ls-tree a9da0b188817cc119eff96f4c8db5306d0be009d
100644 blob 2918a6642d19aadf2b11213978ae6044166a87e0    read_cell # ファイル
||&lt;
showで調査する場合はこんな感じ。ファイル名だけ？
&gt;||
#initディレクトリを調査
$ git show a9da0b188817cc119eff96f4c8db5306d0be009d
tree a9da0b188817cc119eff96f4c8db5306d0be009d

read_cell
||&lt;
実行権、ファイルタイプ、SHA1名、ファイル名が出力される。ファイルタイプは超ざっくりこんな感じみたい。
|*blob|普通のファイル|
|*tree|ディレクトリ|

***Blobオブジェクト
ファイルそのもの。showコマンドで見る事が出来るのはファイルの中身。
&gt;||
#READMEを調査
$ git show 27f338f5bd0c368f96e063127705bd1bb81e992a
Hello Wrld
||&lt;
&gt;||
#index.htmlを調査
$ git show 0dc64072619bf0734c878d90e9150b6978898083
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Welcome&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Hello&lt;/h1&gt;
    &lt;p&gt;Hello world !!&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
||&lt;
&gt;||
#menu.htmlを調査
$ git show 543200914423ddc0cb2249c322f262e31ee11c55
&lt;html&gt;
  &lt;head&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;menu&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;
||&lt;

**で、ブランチ
ブランチはこの一つのCommitオブジェクトをさすポインタとなる。今は最新がこれ。
&gt;||
$ git log --pretty=raw 5f431a8cf6023e7398102dfef8b88baf1c581023
commit 5f431a8cf6023e7398102dfef8b88baf1c581023
tree de445cf5b526c554dea465d09cea6d65059d1f80
parent a59ff99de68cbf359c814f25cda9c926ef9cdad9
author kk_Ataka &lt;test@example.com&gt; 1329818747 +0900
committer kk_Ataka &lt;test@example.com&gt; 1329819044 +0900

    Typo 4
||&lt;
で、branchコマンドでブランチを確認すると……。
&gt;||
$ git branch
 * master
||&lt;
masterというブランチがある。これは最初にコミットした時点で作られるブランチ。次にまたコミットをするとmasterブランチはそれを追いかけていく。

**ブランチの作成
branch [newbranch]で作成。
&gt;||
$ git branch checkpoint1
||&lt;
branchコマンドで確認ができる。アスタリスクがついているのブランチが今のブランチ。
&gt;||
$ git branch
   checkpoint1
 * master
||&lt;

**ブランチの確認
基本はbranchコマンドで確認できる。
&gt;||
$ git branch
   checkpoint1
 * master
||&lt;
vオプションでCommitオブジェクトのSHA1とログなどを冗長に確認できる。今は全部同じだが……。
&gt;||
$ git branch -v
   checkpoint1 5f431a8 Typo 4
 * master      5f431a8 Typo 4
||&lt;
rオプションでリモートのブランチも確認できる。(まだよくわかってない)
&gt;||
$ git remote -v
rem1    c:/project/testRemote/remote1.git (fetch)
rem1    c:/project/testRemote/remote1.git (push)
rem2    c:\project\testRemote\remote2.git (fetch)
rem2    c:\project\testRemote\remote2.git (push)

$ git branch -rv
  rem1/master 5f431a8 Typo 4
  rem2/master 5f431a8 Typo 4
||&lt;

**ブランチの削除
branch d [branch]、またはbranch D [branch]で削除する事ができる。
&gt;||
$ git branch -d checkpoint1
Deleted branch checkpoint1 (was 5f431a8).

$ git branch
 * master
||&lt;
ちなみになうなブランチは削除できない。
&gt;||
$ git branch -d master
error: Cannot delete the branch 'master' which you are currently on.
||&lt;
dオプションとDオプションの違いは&quot;今のブランチから到達不可能なブランチの削除を試みた場合&quot;、警告を出す(d)か強制削除(D)か、らしい。どういうことだろう？
→parent,parentで過去へ遡及はできそうだけど、そこから未来には進めなさそう？

**ブランチを切り替える
checkoutコマンドを使う。
&gt;||
$ git branch checkpoint1

$ git checkout checkpoint1
Switched to branch 'checkpoint1'

$ git branch
 * checkpoint1
   master
||&lt;
ブランチを作りつつcheckoutも同時に行う事もできるcheckout -b [newbranch] [branch]
&gt;||
$ git checkout -b check-b master
Switched to a new branch 'check-b'

$ git branch
 * check-b
   checkpoint1
   master
||&lt;
ただし、作業ディレクトリにファイル作りっぱなしとかステージングしっぱなしの状態だと原則としてブランチの切り替えはできない。
&gt;||
$ git checkout master
error: Your local changes to the following files would be overwritten by checkout:
        index.html
Please, commit your changes or stash them before you can switch branches.
Aborting
||&lt;

**HEAD？？
Git系のBlogエントリとか読んでるとちょいちょい出てくるHEAD。これは.gitディレクトリの中のHEADファイルに定義されていて、常に今作業中のブランチを指す、という事になっている。よく見たら[http://d.hatena.ne.jp/kk_Ataka/20120305/1330951640:title=前のエントリ]でgit reset HEAD [resetfile]というコマンドをうっていた！
&gt;||
$ git branch
   check-b
   checkpoint1
 * master

$ cat .git/HEAD
ref: refs/heads/master
||&lt;
masterの時はHEADもmasterだ。
&gt;||
$ git checkout checkpoint1
Switched to branch 'checkpoint1'

$ git branch
   check-b
 * checkpoint1
   master

$ cat .git/HEAD
ref: refs/heads/checkpoint1
||&lt;
別のブランチに切り替えるとHEADも変わる。logコマンドでCommitオブジェクト(SHA1)の代わりにHEADを指定すると見れる！

&gt;||
$ git log --pretty=raw HEAD
commit 5f431a8cf6023e7398102dfef8b88baf1c581023
tree de445cf5b526c554dea465d09cea6d65059d1f80
parent a59ff99de68cbf359c814f25cda9c926ef9cdad9
author kk_Ataka &lt;test@example.com&gt; 1329818747 +0900
committer kk_Ataka &lt;test@example.com&gt; 1329819044 +0900

    Typo 4

commit a59ff99de68cbf359c814f25cda9c926ef9cdad9
(略)
||&lt;
この辺は各々のブランチの歴史を進めた上で比較しないと全部同じだからわかりづらいな。次はマージから。
</body>
</day>
<day date="2012-03-15" title="">
<body>
*1331816663*[Git][備忘録][Windows]Pro Gitと入門gitでGitの復習 マージ編
**前回までのあらすじ
-[http://d.hatena.ne.jp/kk_Ataka/20120305/1330951640:title]
-[http://d.hatena.ne.jp/kk_Ataka/:title]
今回はマージから。

**参考
-[http://progit.org/:title]
-入門git

**マージ
***前準備
ここでブランチ用にリポジトリを作りなおした。
&gt;||
$ cat field.html
&lt;h1&gt;僕にその手を汚せというのか&lt;/h1&gt;
||&lt;
というファイルを作成し、chapter1というブランチを切る。
&gt;||
$ git branch chapter1

$ git branch
   chapter1
 * master
||&lt;
ブランチはこうなるはず。
&gt;||
 *master/chapter1/HEAD
 ↓
 ↓
 ○
　
||&lt;
次にchapter2を作成し、ブランチ切り替え。
&gt;||
$ git checkout -b chapter2law chapter1
Switched to a new branch 'chapter2law'

||&lt;
文言を追加し、コミット。
&gt;||
$ cat field.html
&lt;h1&gt;僕にその手を汚せというのか&lt;/h1&gt;
&lt;h2&gt;誰も僕を責めることはできない&lt;/h2&gt;

$ git commit -a -m &quot;Add chapter2 law route&quot;
||&lt;
ブランチはこうなるはず。chapter2lawに切り替えているのでHEADもこちらへ。
&gt;||
master/chapter1
↓　*chapter2law/HEAD
↓　↓
↓┌○
○┘
　
||&lt;
同様にchapter3lawも作る。
&gt;||
$ git checkout -b chapter3law chapter2law
Switched to a new branch 'chapter3law'

$ cat field.html
&lt;h1&gt;僕にその手を汚せというのか&lt;/h1&gt;
&lt;h2&gt;誰も僕を責めることはできない&lt;/h2&gt;
&lt;h3&gt;欺き欺かれて&lt;/h3&gt;

$ git commit -a -m &quot;Add chapter3 law route&quot;
||&lt;
&gt;||
master/chapter1
↓　chapter2law
↓　↓　*chapter3law/HEAD
↓　↓　↓
↓┌○─○
○┘
　
||&lt;
ここでchapter1から派生させて、馬鹿な事はやめるんだッ！　と新しいブランチを作成。
&gt;||
$ git checkout -b chapter2chaos chapter1
Switched to a new branch 'chapter2chaos'
||&lt;
chapter1を元にcheckout -bしたのでファイルの中身を見るとh1タグしかない状態に戻っている。
&gt;||
$ cat field.html
&lt;h1&gt;僕にその手を汚せというのか&lt;/h1&gt;
||&lt;
また文言を追加しコミット。
&gt;||
$ cat field.html
&lt;h1&gt;僕にその手を汚せというのか&lt;/h1&gt;
&lt;h2&gt;思いどおりにいかないのが世の中なんて割り切りたくないから&lt;/h2&gt;

$ git commit -a -m &quot;Add chapter2 chaos route&quot;
||&lt;
&gt;||
master/chapter1
↓　chapter2law
↓　↓　chapter3law
↓　↓　↓
↓┌○─○
↓│
○┴○
　　↑
　　*chapter2chaos/HEAD
||&lt;
この調子でchapter3neutralとchapter3chaosブランチを作る。
&gt;||
$ git checkout -b chapter3neutral chapter2chaos
Switched to a new branch 'chapter3neutral'

$ cat field.html
&lt;h1&gt;僕にその手を汚せというのか&lt;/h1&gt;
&lt;h2&gt;思いどおりにいかないのが世の中なんて割り切りたくないから&lt;/h2&gt;
&lt;h3&gt;すくいきれないもの&lt;/h3&gt;

$ git commit -a -m &quot;Add chapter3 neutral route&quot;

$ git checkout -b chapter3chaos chapter2chaos
Switched to a new branch 'chapter3chaos'

$ cat field.html
&lt;h1&gt;僕にその手を汚せというのか&lt;/h1&gt;
&lt;h2&gt;思いどおりにいかないのが世の中なんて割り切りたくないから&lt;/h2&gt;
&lt;h3&gt;駆り立てるのは野心と欲望、横たわるのは犬と豚&lt;/h3&gt;

$ git commit -a -m &quot;Add chapter3 chaos route&quot;
||&lt;
&gt;||
master/chapter1
↓　chapter2law
↓　↓　chapter3law
↓　↓　↓
↓┌○─○
↓│
○┴○┬○
　　↑│↑
　　↑│chapter3neutral
　　↑└○
　　↑　↑
　　↑　*chapter3chaos/HEAD
　　chapter2chaos
||&lt;
logコマンドで見てみる。あってるかな。
&gt;||
$ git log --graph --date-order --all --date=short -C -M --pretty=format:&quot;%h&quot;\ %ad\ %cn\ %Cgreen%d%Cre
set\ %s
 * 2078f0a 2012-03-07 kk_Ataka  (HEAD, chapter3chaos) Add chapter3 chaos route
 | * 427a08c 2012-03-07 kk_Ataka  (chapter3neutral) Add chapter3 neutral route
 |/
 * 416daca 2012-03-07 kk_Ataka  (chapter2chaos) Add chapter2 chaos route
 | * 3dc258a 2012-03-07 kk_Ataka  (chapter3law) Add chapter3 law route
 | * cae3956 2012-03-07 kk_Ataka  (chapter2law) Add chapter2 law route
 |/
 * 9d2e5d1 2012-03-07 kk_Ataka  (master, chapter1) typo
 * 4e0ebaa 2012-03-07 kk_Ataka  Add chapter 1
 * 338a929 2012-03-07 kk_Ataka  First commit
||&lt;
***いよいよマージ
最後に今わかれているlaw,chaos,neutralのブランチをchapter4にマージする。まずは久々にmasterブランチに戻る。
&gt;||
$ git checkout master
Switched to branch 'master'

$ cat field.html
&lt;h1&gt;僕にその手を汚せというのか&lt;/h1&gt;
||&lt;
merge [branch]コマンドでまずchapter3lawをマージ。
&gt;||
$ git merge chapter3law
Updating 9d2e5d1..3dc258a
Fast-forward
 field.html |    2 ++
 1 files changed, 2 insertions(+), 0 deletions(-)
 
$ cat field.html
&lt;h1&gt;僕にその手を汚せというのか&lt;/h1&gt;
&lt;h2&gt;誰も僕を責めることはできない&lt;/h2&gt;
&lt;h3&gt;欺き欺かれて&lt;/h3&gt;
||&lt;
マージ元のブランチ(master)がマージ先のブランチ(chapter3law)の親である場合、&quot;直接到達できる&quot;という事なので、masterブランチをそのままchapter3lawまですすめられた。

本来は、ここでchapter3lawブランチは削除するらしい(masterにすべてマージされたからもう必要ないであろうということ？)が、記念に残しておく。

次にchaosルートも取り込む。コマンドは同じだが、出力が少し違う。
&gt;||
$ git merge chapter3chaos
Auto-merging field.html
CONFLICT (content): Merge conflict in field.html
Automatic merge failed; fix conflicts and then commit the result.
||&lt;
コンフリクトが起きたようだ。競合を解決してくださいとファイルが編集されるのでステータスも変わる。しかもメッセージもいつもと違う。Unmerged pathとか出る。
いつもの。
&gt;||
$ git status
# On branch master
# Untracked files:
#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
#
#       README
nothing added to commit but untracked files present (use &quot;git add&quot; to track)
||&lt;
今回の。
&gt;||
$ git status
# On branch master
# Unmerged paths:
#   (use &quot;git add/rm &lt;file&gt;...&quot; as appropriate to mark resolution)
#
#       both modified:      field.html
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
||&lt;

ファイルを見てみる。
&gt;||
$ cat field.html
&lt;h1&gt;僕にその手を汚せというのか&lt;/h1&gt;
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
&lt;h2&gt;誰も僕を責めることはできない&lt;/h2&gt;
&lt;h3&gt;欺き欺かれて&lt;/h3&gt;
=======
&lt;h2&gt;思いどおりにいかないのが世の中なんて割り切りたくないから&lt;/h2&gt;
&lt;h3&gt;駆り立てるのは野心と欲望、横たわるのは犬と豚&lt;/h3&gt;
&gt;&gt;&gt;&gt;&gt;&gt;&gt; chapter3chaos
||&lt;
今マージしたchapter3law=master=HEADとchapter3chaosで競合。とりあえずそのまま追記追記するように。
&gt;||
$ cat field.html
&lt;h1&gt;僕にその手を汚せというのか&lt;/h1&gt;
&lt;h2&gt;誰も僕を責めることはできない&lt;/h2&gt;
&lt;h3&gt;欺き欺かれて&lt;/h3&gt;
&lt;h2&gt;思いどおりにいかないのが世の中なんて割り切りたくないから&lt;/h2&gt;
&lt;h3&gt;駆り立てるのは野心と欲望、横たわるのは犬と豚&lt;/h3&gt;
||&lt;
最後にニュートラルなんだけど、また競合しそう……。
&gt;||
$ git merge chapter3neutral
Auto-merging field.html
CONFLICT (content): Merge conflict in field.html
Automatic merge failed; fix conflicts and then commit the result.
||&lt;
ああやっぱり。
&gt;||
$ cat field.html
&lt;h1&gt;僕にその手を汚せというのか&lt;/h1&gt;
&lt;h2&gt;誰も僕を責めることはできない&lt;/h2&gt;
&lt;h3&gt;欺き欺かれて&lt;/h3&gt;
&lt;h2&gt;思いどおりにいかないのが世の中なんて割り切りたくないから&lt;/h2&gt;
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
&lt;h3&gt;駆り立てるのは野心と欲望、横たわるのは犬と豚&lt;/h3&gt;
=======
&lt;h3&gt;すくいきれないもの&lt;/h3&gt;
&gt;&gt;&gt;&gt;&gt;&gt;&gt; chapter3neutral
||&lt;
とりあえず競合を消して最後の文言を。
&gt;||
$ cat field.html
&lt;h1&gt;僕にその手を汚せというのか&lt;/h1&gt;
&lt;h2&gt;誰も僕を責めることはできない&lt;/h2&gt;
&lt;h3&gt;欺き欺かれて&lt;/h3&gt;
&lt;h2&gt;思いどおりにいかないのが世の中なんて割り切りたくないから&lt;/h2&gt;
&lt;h3&gt;駆り立てるのは野心と欲望、横たわるのは犬と豚&lt;/h3&gt;
&lt;h3&gt;すくいきれないもの&lt;/h3&gt;

$ git commit -a -m &quot;Merge conflict&quot;
[master 134d7a8] Merge conflict

$ cat field.html
&lt;h1&gt;僕にその手を汚せというのか&lt;/h1&gt;
&lt;h2&gt;誰も僕を責めることはできない&lt;/h2&gt;
&lt;h3&gt;欺き欺かれて&lt;/h3&gt;
&lt;h2&gt;思いどおりにいかないのが世の中なんて割り切りたくないから&lt;/h2&gt;
&lt;h3&gt;駆り立てるのは野心と欲望、横たわるのは犬と豚&lt;/h3&gt;
&lt;h3&gt;すくいきれないもの&lt;/h3&gt;
&lt;h4&gt;手を取り合って&lt;/h4&gt;

$ git commit -a -m &quot;Add chapter4 title&quot;
[master f83bfdb] Add chapter4 title
 1 files changed, 1 insertions(+), 0 deletions(-)
||&lt;
最後にグラフを見てみる。
&gt;||
$ git log --graph --date-order --all --date=short -C -M --pretty=format:&quot;%h&quot;\ %ad\ %cn\ %Cgreen%d%Cre
set\ %s
 * f83bfdb 2012-03-07 kk_Ataka  (HEAD, master, chapter4) Add chapter4 title
 *   134d7a8 2012-03-07 kk_Ataka  Merge conflict
 |\
 * | a8e9a29 2012-03-07 kk_Ataka  Merge conflict
 * | a1d3f55 2012-03-07 kk_Ataka  Delete conflict
 * |   9040fa9 2012-03-07 kk_Ataka  Merge chapter3law in master
 |\ \
 | * | 2078f0a 2012-03-07 kk_Ataka  (chapter3chaos) Add chapter3 chaos route
 | | * 427a08c 2012-03-07 kk_Ataka  (chapter3neutral) Add chapter3 neutral route
 | |/
 | * 416daca 2012-03-07 kk_Ataka  (chapter2chaos) Add chapter2 chaos route
 * | 3dc258a 2012-03-07 kk_Ataka  (chapter3law) Add chapter3 law route
 * | cae3956 2012-03-07 kk_Ataka  (chapter2law) Add chapter2 law route
 |/
 * 9d2e5d1 2012-03-07 kk_Ataka  (chapter1) typo
 * 4e0ebaa 2012-03-07 kk_Ataka  Add chapter 1
 * 338a929 2012-03-07 kk_Ataka  First commit
||&lt;
こうなってるか。
&gt;||
chapter1
↓　chapter2law
↓　↓　chapter3law　　　 master/chapter4/HEAD
↓　↓　↓　　　　　　　　↓
↓┌○─○───────┐↓
↓│　　　　　　　　　　│↓
○┴○┬○───────┼○
　　↑│↑　　　　　　　│
　　↑│chapter3neutral │
　　↑└○───────┘
　　↑　↑
　　↑　chapter3chaos
　　chapter2chaos
||&lt;
本当は、これをやってみたかったんだけど例が悪すぎて両方コンフリクトしてしまった
&gt;&gt;
# 図 3-16. Git が共通の先祖を自動的に見つけ、ブランチのマージに使用する
$ git checkout master
$ git merge iss53
Merge made by recursive.
 README |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)
&lt;&lt;
次はリモートブランチとかリベース。
</body>
</day>
<day date="2012-03-20" title="">
<body>
*1332240122*[Windows][Jenkins][Ruby][備忘録]Windows環境用にrcovをビルドしなおす手順
**あらすじ
Jenkinsでビルドしていくとともにカバレッジの調査もしたい。rcovというツールでカバレッジを出す事ができるらしい。

**参考サイト
-[https://github.com/relevance/rcov:title]
-[http://rubygems.org/gems/rcov:title]
-[http://www.freia.jp/taka/blog/762/:title]

**先に結論
Windows環境ではWindows用に自力でビルドしなければならない！
-[http://rubygems.org/gems/rcov:title]よりgemをDL
-[http://www.microsoft.com/japan/msdn/vstudio/express/:title]からVisual C++ 2010 Express Editionを入手しインストール
-全てのプログラム -&gt; Microsoft Visual Studio 2010 Express -&gt; Visual Studio コマンド プロンプト (2010)を起動。以後ビルドはこのプロンプトで実施する
-%RUBY_HOME%\lib\ruby\1.8\i386-mswin32\のconfig.hのMSC_VERの記述を一旦消す
&gt;||
#if _MSC_VER != 1200
#error MSC version unmatch: _MSC_VER: 1200 is expected.
#endif
||&lt;
-env.hのFRAMEを以下のように編集
&gt;||
extern struct FRAME {
||&lt;
&gt;||
extern __declspec(dllimport) struct FRAME {
||&lt;
-gem install！！
以下は四苦八苦した記録の残骸。

**手順(本当に順番をメモっているのでいらない操作が多い)
***rcovインストール
BundlerでGemを管理するのでGemfileにrcovを追加。
&gt;||
gem 'rcov'
||&lt;
追加後、インストール……
&gt;||
$ bundle install
||&lt;
するとエラーが。
&gt;||
C:/rubies/Ruby/bin/ruby.exe extconf.rb
creating Makefile

nmake
'nmake' は、内部コマンドまたは外部コマンド、
操作可能なプログラムまたはバッチ ファイルとして認識されていません。


Gem files will remain installed in C:/project/excel_for_ruby/vendor/bundle/ruby/1.8/gemsResults logged to C:/project/excel_for_ruby/vendor/bundle/ruby/1.8/gems/rcov-1.0.0/ext/rAn error occured while installing rcov (1.0.0), and Bundler cannot continue.
Make sure that `gem install rcov -v '1.0.0'` succeeds before bundling.
||&lt;
bundlingする前にgem install rcov -v '1.0.0'してくれと？　Bundler管理下にはおけないのだろうか。

じゃあGemfileから記述を消して、ターミナルからgem installするか。
&gt;||
$ gem install rcov -v '1.0.0'

nmake
'nmake' は、内部コマンドまたは外部コマンド、
操作可能なプログラムまたはバッチ ファイルとして認識されていません。
||&lt;
結局nmakeがないといわれているので、まずnmakeを落とすか。
***nmakeインストール
[http://johnbokma.com/perl/make-for-windows.html:title] のページにyou have to download NMake 1.5 from the Microsoft Knowledge Base, article 132084 page.と記載されているのでリンクをたどりnmakeをDLし、パスが通っているフォルダへ突っ込む。(デフォルトだとnmake15.exeのようにバージョンがファイル名にくっついているっぽいのでnmake.exeにリネームしておく)

再度。
&gt;||
$ gem install rcov -v '1.0.0'
Building native extensions.  This could take a while...
ERROR:  Error installing rcov:
        ERROR: Failed to build gem native extension.

C:/rubies/Ruby/bin/ruby.exe extconf.rb
creating Makefile

nmake

Microsoft (R) Program Maintenance Utility   Version 1.50
Copyright (c) Microsoft Corp 1988-94. All rights reserved.

        cl -nologo -I. -IC:/rubies/Ruby/lib/ruby/1.8/i386-mswin32 -IC:/rubies/Ru
by/lib/ruby/1.8/i386-mswin32 -I1.8/ -MD -Zi  -O2b2xg- -G6  -c -Tc1.8//callsite.c

'cl' は、内部コマンドまたは外部コマンド、
操作可能なプログラムまたはバッチ ファイルとして認識されていません。
NMAKE : fatal error U1077: 'C:\WINDOWS\system32\cmd.exe' : return code '0x1'
Stop.


Gem files will remain installed in C:/rubies/Ruby/lib/ruby/gems/1.8/gems/rcov-1.
0.0 for inspection.
Results logged to C:/rubies/Ruby/lib/ruby/gems/1.8/gems/rcov-1.0.0/ext/rcovrt/ge
m_make.out

||&lt;
まだ駄目？　clとはC Compilerの事らしい。手に入れるには[http://www.microsoft.com/japan/msdn/vstudio/express/:title]からVisual C++ 2010 Express Editionをインストールするくらいしか方法がないみたい。

......インストール中.......3時間くらいかかった

で、インストールフォルダにcl.exeが作成されるので、これを実行！
&gt;||
$ cd C:\Program Files\Microsoft Visual Studio 10.0\VC\bin
$ cl

mspdb100.dllが見つからなかったため、このアプリケーションを開始できませんでした。
||&lt;
なん……だと……やはりコマンドラインから実行するのは無理？

とりあえずmspdb100.dllを探してみる…と、C:\Program Files\Microsoft Visual Studio 10.0\Common7\IDEにあった。これをclと同じフォルダに持ってくると……。
&gt;||
$ cl
Microsoft(R) 32-bit C/C++ Optimizing Compiler Version 16.00.30319.01 for 80x86
Copyright (C) Microsoft Corporation.  All rights reserved.

使い方: cl [ オプション... ] ファイル名... [ /link リンク オプション... ]
||&lt;
きたー！　じゃあこのcl.exeとmspdb100.dllをパスの通ってる場所にコピーして……再度gem！
&gt;||
$ gem install rcov -v '1.0.0'
Building native extensions.  This could take a while...
ERROR:  Error installing rcov:
        ERROR: Failed to build gem native extension.

C:/rubies/Ruby/bin/ruby.exe extconf.rb
creating Makefile

nmake

Microsoft (R) Program Maintenance Utility   Version 1.50
Copyright (c) Microsoft Corp 1988-94. All rights reserved.

        cl -nologo -I. -IC:/rubies/Ruby/lib/ruby/1.8/i386-mswin32 -IC:/rubies/Ruby/lib/ruby/1.8/i386-mswin32 -I1.8/ -MD -Zi  -O2b2xg- -G6c -Tc1.8//callsite.c
fatal error C1510: Cannot load language resource clui.dll.
NMAKE : fatal error U1077: 'C:\WINDOWS\system32\cmd.exe' : return code '0x4'
Stop.


Gem files will remain installed in C:/rubies/Ruby/lib/ruby/gems/1.8/gems/rcov-1.0.0 for inspection.
Results logged to C:/rubies/Ruby/lib/ruby/gems/1.8/gems/rcov-1.0.0/ext/rcovrt/gem_make.ou
||&lt;
エラった！　っけど一歩進んだ？clui.dllがないと。うーん。

ここで全てのプログラムにMicrosoft Visual Studio 2010 Express -&gt; Visual Studio コマンド プロンプト (2010)というメニューが増えている事に気づく。きちんとVisual Studio用の設定がなされていなかったから失敗したんだ多分！　再度挑戦。
&gt;||
C:\rubies\Ruby\lib\ruby\gems\1.8\cache&gt;gem install --local rcov-1.0.0.gem
Building native extensions.  This could take a while...
ERROR:  Error installing rcov-1.0.0.gem:
        ERROR: Failed to build gem native extension.

C:/rubies/Ruby/bin/ruby.exe extconf.rb
creating Makefile

nmake

Microsoft (R) Program Maintenance Utility   Version 1.50
Copyright (c) Microsoft Corp 1988-94. All rights reserved.

        cl -nologo -I. -IC:/rubies/Ruby/lib/ruby/1.8/i386-mswin32 -IC:/rubies/Ruby/lib/ruby/1.8/i386-mswin32 -I1.8/ -MD -Zi  -O2b2xg- -G6  -c -Tc1.8//callsite.c

cl : コマンド ライン warning D9035 : オプション 'Og-' の使用は現在推奨されていません。今後のバージョンからは削除されます。
cl : コマンド ライン warning D9002 : 不明なオプション '-G6' を無視します
callsite.c
c:\rubies\ruby\lib\ruby\1.8\i386-mswin32\config.h(2) : fatal error C1189: #error :  MSC version unmatch: _MSC_VER: 1200 is expected.
NMAKE : fatal error U1077: 'C:\WINDOWS\system32\cmd.exe' : return code '0x2'
Stop.


Gem files will remain installed in C:/rubies/Ruby/lib/ruby/gems/1.8/gems/rcov-1.0.0 for inspection.
Results logged to C:/rubies/Ruby/lib/ruby/gems/1.8/gems/rcov-1.0.0/ext/rcovrt/gem_make.out
||&lt;
お！　ちょっと進んだ。MSC_VERがアンマッチになっているようなので、これをなおす。c:\rubies\ruby\lib\ruby\1.8\i386-mswin32\のconfig.hを開き編集。
&gt;||
#if _MSC_VER != 1200
#error MSC version unmatch: _MSC_VER: 1200 is expected.
#endif
||&lt;
これを一時的に退避させる。んで、再度。
&gt;||
        cl -nologo -LD -Fercovrt.so callsite.obj rcovrt.obj msvcrt-ruby18.lib  oldnames.lib user32.lib advapi32.lib shell32.lib ws2_32.lib   -link -incremental:no -debug -opt:ref -opt:icf -dll -libpath:&quot;.&quot; -libpath:&quot;C:/rubies/Ruby/lib&quot;  -implib:rcovrt-i386-mswin32.lib -pdb:rcovrt-i386-mswin32.pdb -def:rcovrt-i386-mswin32.def
   ライブラリ rcovrt-i386-mswin32.lib とオブジェクト rcovrt-i386-mswin32.exp を作成中
callsite.obj : error LNK2001: 外部シンボル &quot;_ruby_frame&quot; は未解決です。
rcovrt.obj : error LNK2019: 未解決の外部シンボル _ruby_frame が関数 _coverage_in
crease_counter_uncached で参照されました。
rcovrt.so : fatal error LNK1120: 外部参照 1 が未解決です。
NMAKE : fatal error U1077: 'C:\WINDOWS\system32\cmd.exe' : return code '0x2'
Stop.


Gem files will remain installed in C:/rubies/Ruby/lib/ruby/gems/1.8/gems/rcov-1.0.0 for inspection.
Results logged to C:/rubies/Ruby/lib/ruby/gems/1.8/gems/rcov-1.0.0/ext/rcovrt/gem_make.out
||&lt;
おおおなんか見つからないって出てきた……。

[http://www.freia.jp/taka/blog/762/:title]という事らしいので、env.hを編集。
&gt;||
extern struct FRAME {
||&lt;
&gt;||
extern __declspec(dllimport) struct FRAME {
||&lt;
に。いざ！
&gt;||
C:\rubies\Ruby\lib\ruby\gems\1.8\cache&gt;gem install --local rcov-1.0.0.gem
Building native extensions.  This could take a while...
Successfully installed rcov-1.0.0
1 gem installed
Installing ri documentation for rcov-1.0.0...
Installing RDoc documentation for rcov-1.0.0...
||&lt;
きたーーー！

が、なんかカバレッジの表示のされかたがおかしい？　メソッドの一行目しかグリーンにならないから網羅率が超低くなる。。オプションとかなのかなー。これは早々にRuby1.9でSimplecov使えという事なのだろうか。
</body>
</day>
<day date="2012-03-27" title="">
<body>
*1332856400*[Windows][Jenkins][Ruby][備忘録]simplecovとsimplecov-rcovを使ってJenkinsでカバレッジを確認
**あらすじ
rcovインストールに思いの他てこずったので他のツールを検討してみる。

調べるとsimplecov,simplecov-rcovというツールでもいける様子。Ruby1.9系のカバレッジツールらしいが1.8でも使えるだろうか。あとRailsじゃなくても使えるのかな。
**参考サイト
-[https://github.com/colszowka/simplecov:title]
-[https://github.com/fguillen/simplecov-rcov:title]
**手順(Getting Startedをかなりはしょりながら)
***Simplecov
Gemfileに以下を追加。
&gt;||
gem 'simplecov'
||&lt;
次にspecファイルに以下のrequireを追加。
&gt;||
require 'simplecov'
SimpleCov.start
||&lt;
そしてrspecを実行。
&gt;||
$ bundle exec rspec -fs spec\convert_spec.rb
WARNING: SimpleCov is activated, but you're not running Ruby 1.9+ - no coverage analysis will happen
WARNING: SimpleCov is activated, but you're not running Ruby 1.9+ - no coverage analysis will happen
||&lt;
やっぱ1.8じゃだめかー。ちょっとRuby1.9系で試してみる。
&gt;||
$ bundle exec rspec -fs spec\convert_spec.rb

(略)

Coverage report generated for RSpec to C:/project/excel_for_ruby/coverage. 87
/ 93 LOC (93.55%) covered.
||&lt;
テストは失敗したけど、coverageディレクトリが作成された！　中のindex.htmlを開くと……。

おおー！
***Simplecov-rcov
JenkinsのRuby metrics plugin用にSimpleCovで出力したカバレッジをrcovフォーマットになおしてくれる？
Gemfileに以下を追加。
&gt;||
gem 'simplecov-rcov'
||&lt;
次にspecファイルに以下のrequireを追加。
&gt;||
require 'simplecov-rcov'
SimpleCov.formatter = SimpleCov::Formatter::RcovFormatter
||&lt;
そしてrspecを実行。
&gt;||
$ bundle exec rspec -fs spec\convert_spec.rb

(略)

Coverage report Rcov style generated for RSpec to C:/project/excel_for_ruby/coverage/rcov
||&lt;
ちょっと表記が変わった。coverageの下にrcovという新しいディレクトリが出来ている。その下にindex.html。

***Jenkins
-Jenkinsの管理 -&gt; プラグインの管理からRuby metrics pluginをインストール
-プロジェクトの設定 -&gt; ビルド後の処理 -&gt; Publish Rcov reportにチェック
</body>
</day>
<day date="2012-04-01" title="">
<body>
*1333220954*[Heroku][Agile][イベント]BPStudy#55に参加しました
**詳細: [http://connpass.com/event/354/:title]
-Heroku大好き
ということで参加しました。

**第1部 Heroku @[http://twitter.com/herokujp:title]さん(相澤歩さん、Heroku Inc., Developer Marketing Advocate)
***Herokuとは
-元々Rubyアプリケーションをデプロイするサービスだった。
-今はJavaとかScalaとか
--最近はFacebookアプリの影響でPHPが多い！
Heroku=Rubyと思っていたので、(実際それで使っていたのもある)最近はjsやJava使えたというのが個人的に驚き。さらに最近はPHPも多いという事らしい。ただしBPStudyの会場で聞いたところ。
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/search/%2523bpstudy&quot;&gt;#bpstudy&lt;/a&gt; Herokuを何で使ってますか→Python、Rubyそこそこ、Java、Scalaもある程度、PHPなどがほぼいない&lt;/p&gt;&amp;mdash; ごしゅじんさん (@kk_Ataka) &lt;a href=&quot;https://twitter.com/kk_Ataka/status/185678418275336193&quot; data-datetime=&quot;2012-03-30T10:42:39+00:00&quot;&gt;3月 30, 2012&lt;/a&gt;&lt;/blockquote&gt;
懇親会での話によると「あの空気では手を挙げられない」ということだったらしい。

***Herokuって何？　改めて再定義
-単なるホスティングサービス？
--いいえ、PaaSです
--ホスティングサービスと何が違うの？
--開発者がサーバの管理とかスケーラビリティを意識せずに製品を作れるように

***生産性の低いプログラマを底上げするものではない
-できるプログラマをさらに引き上げてくれるサービス
-Rubyの思想と似ているかも(＝ある程度できる人向けのもの)

***今後Herokuを使う人へ
-Herokuで色々やってTwitter, GitHubなどで情報発信してみてください
-Add onを作ってマーケットプレイスに登録もできるよ、売れるよ！

**第2部 SonicGardenでのherokuの実践活用 Sonic Garden 松村さん(@[http://twitter.com/mat_aki:title]さん)
***Sonic Gardenとは
-受託一括納品についての問題点を解決する
--&quot;納品しない&quot;受託開発
-「Heroku」でググると4番目に出る

***Sonic Gardenのソフトウェア開発について
Sonic Gardenでは6~7人で人数以上のプロジェクトを走らせている=一人が複数のプロジェクトを掛け持ちしている。以下のようなツールを使っている。
-[http://www.pivotaltracker.com/:title](ITS)
--RedmineやTracのようなチケット管理システム
--何がいいの？　→優先度がない
---チケットに関しては結局は上から順番にやっていくしかない
---昔は優先度をつけていたが、「高」が複数できて一体どれが高なんだ状態に
-[http://youroom.in/:title](社内Twitter的)
--プロダクトオーナーとプログラマーが密にコミュニケーションを取れる
--これどうしよっかな？　的なチケットに落とす前の案はまずここに
--文字数制限があるので「お世話になっております」とかない
-GitHub
--おなじみ
--ソース管理
--システムが動かない状態ではpushしない
--ソースコードレビューもGitHubで
-Skype(週一でのMTG)
--youRoomなどで密にコミュニケーションしてたら週一の報告いらないんじゃない？
---期限を作るため必要
-ホワイトボードとMVP
--設計書は本当に必要最小限なものだけ作成
--設計書はホワイトボード、動くコードが大事
--一番キモとなる機能(MVP)をユーザと決定し、まずはその機能を作りこみリリースする

お客にもこの手法に倣ってもらう。メールのやり取りはありません！

***Sonic GardenではどのようにHerokuを使っているのか
-Herokuの課題
--ログを数年レベルでサポートしたい
---logglyというアドオンでログを保存
---そのログをさらにAmazon S3へ退避
-Heroku自体が死んだ時どうする？
--サービスレベルを下げない
--DBをS3にバックアップしておいてどうしても復活しないときはS3でサービスを起動させる

最後はライブコーディング。なんとライブコーディングなのにコーディング一切せず動くところまでいった。その他Git道場というイベントのCMも。
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/search/%2523bpstudy&quot;&gt;#bpstudy&lt;/a&gt; 4/22 大崎 Git道場 rebase, mergeを恐れずにできるようになる&lt;/p&gt;&amp;mdash; ごしゅじんさん (@kk_Ataka) &lt;a href=&quot;https://twitter.com/kk_Ataka/status/185690782274039809&quot; data-datetime=&quot;2012-03-30T11:31:47+00:00&quot;&gt;3月 30, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/search/%2523bpstudy&quot;&gt;#bpstudy&lt;/a&gt; 心:なぜGitを使うのか、技:コマンドを学ぶ、体:ひたすら練習をし、終わったら帰るイベント、懇親会はない&lt;/p&gt;&amp;mdash; ごしゅじんさん (@kk_Ataka) &lt;a href=&quot;https://twitter.com/kk_Ataka/status/185691196423798784&quot; data-datetime=&quot;2012-03-30T11:33:25+00:00&quot;&gt;3月 30, 2012&lt;/a&gt;&lt;/blockquote&gt;

よし！　もっとHeroku使う！

</body>
</day>
<day date="2012-04-02" title="">
<body>
*1333369857*[Subversion][備忘録]Subversionでファイルを分けてコミットする

**あらすじ
コマンドラインからファイルをたくさんコミットしたいんだけど、コミットログを分けたいので分割してコミットしたい。

**参考サイト
-[http://www.caldron.jp/~nabetaro/svn/svnbook-1.5-final/html-chunk/svn.ref.svn.c.changelist.html:title]
-[http://d.hatena.ne.jp/namutaka/20110125/1295964889:title]
-http://www-aos.eps.s.u-tokyo.ac.jp/~takagi/subversion.html#sec16
-[http://blog.cgfm.jp/garyu/archives/83:title]

**方法
なんかいっぱいファイルがあるとする。
&gt;||
$  ls
a001.html            a019.html            a037.html            a055.html            a073.html            a091.html
a002.html            a020.html            a038.html            a056.html            a074.html            a092.html
a003.html            a021.html            a039.html            a057.html            a075.html            a093.html
a004.html            a022.html            a040.html            a058.html            a076.html            a094.html
a005.html            a023.html            a041.html            a059.html            a077.html            a095.html
a006.html            a024.html            a042.html            a060.html            a078.html            a096.html
a007.html            a025.html            a043.html            a061.html            a079.html            a097.html
a008.html            a026.html            a044.html            a062.html            a080.html            a098.html
a009.html            a027.html            a045.html            a063.html            a081.html            a099.html
a010.html            a028.html            a046.html            a064.html            a082.html            index.html
a011.html            a029.html            a047.html            a065.html            a083.html            link.html
a012.html            a030.html            a048.html            a066.html            a084.html            menu.html
a013.html            a031.html            a049.html            a067.html            a085.html            product.html
a014.html            a032.html            a050.html            a068.html            a086.html
a015.html            a033.html            a051.html            a069.html            a087.html
a016.html            a034.html            a052.html            a070.html            a088.html
a017.html            a035.html            a053.html            a071.html            a089.html
a018.html            a036.html            a054.html            a072.html            a090.html
||&lt;
で、全部管理下。
&gt;||
$  svn  st
A              .
A              a048.html
A              a084.html
A              a076.html
A              a068.html
A              a096.html
A              product.html
A              a088.html
略
||&lt;
順番としては、index,  link,  menu,  productを一回目にコミット、その後はaxxx.htmlファイルを20個ずつコミットしていく全6回のコミット作業をしたい。

毎回
&gt;||
$  svn  commit  a001.html  a002.html  a003.html  ...  
||&lt;
とするのはめんどうくさいしミスもしそうなのでこれを上手くコミットしたい。いろいろありそうだけど、とりあえずいけそうだと思ったのはchangelist(cl)コマンドを使ってコミット毎にグループを作り、グループ単位で作業していくという戦法。
***Changelist作成
changelist(cl)コマンドで特定のファイルをグループにできる。
&gt;||
$  svn  cl  CHANGE_LIST_NAME  FILE1  FILE2  ...  
||&lt;
&gt;||
$  svn  cl  mainpage  index.html  link.html  menu.html  product.html
パス  'index.html'  は変更リスト  'mainpage'  に属しています。
パス  'link.html'  は変更リスト  'mainpage'  に属しています。
パス  'menu.html'  は変更リスト  'mainpage'  に属しています。
パス  'product.html'  は変更リスト  'mainpage'  に属しています。
||&lt;
これでindex,  link,  menu,  productはmainpageというグループに所属した。うーん。ここのファイル指定が手作業になっちゃうとあまり意味がないような気もするが……。ステータスを見るとちゃんと他のファイルｔ区別されている。
&gt;||
$  svn  st
A              .
A              a048.html
略
A              a092.html

---  変更リスト  'mainpage':
A              product.html
A              menu.html
A              link.html
A              index.html
||&lt;
以後、index.htmlたちはchangelist  mainpageとして指定する事ができる。今回は連番なので一括で指定もできるがファイル名に統一性がない場合は一個ずつ指定するしかないかな。
&gt;||
$  svn  cl  a021-40  a0{21..40}.html
パス  'a021.html'  は変更リスト  'a021-40'  に属しています。
パス  'a022.html'  は変更リスト  'a021-40'  に属しています。
パス  'a023.html'  は変更リスト  'a021-40'  に属しています。
略
||&lt;
略。でchangelistが6つできた。
&gt;||
$  svn  st
---  変更リスト  'a001-20':
A              a001.html
略
---  変更リスト  'mainpage':
A              product.html
略
---  変更リスト  'a021-40':
A              a021.html
略
---  変更リスト  'a081-100':
A              a084.html
略
---  変更リスト  'a041-60':
A              a048.html
略
---  変更リスト  'a061-80':
A              a076.html
略
||&lt;
***Commit
commitコマンドに--changelistオプションを指定。
&gt;||
$  svn  commit  --changelist  CHECK_LIST_NAME
||&lt;
changelistを指定すると……
&gt;||
$  svn  commit  --changelist  mainpage
          1
          2    --  この行以下は無視されます  --
          3
          4    A        checklistdir/product.html
          5    A        checklistdir/menu.html
          6    A        checklistdir/link.html
          7    A        checklistdir/index.html
||&lt;
そのグループのファイルだけが選択される。一回コミットするとchangelistはなくなるが、--keep-changelistsオプションを使えば残したままにできる。
&gt;||
$  svn  commit  --cl  mainpage  --keep-changelists
||&lt;
ステータスを見ると残っている！　ただし、ファイルの変更はないのでAとかMとかはついていない。
&gt;||
$  svn  st
略
---  変更リスト  'mainpage':
                product.html
                menu.html
                link.html
                index.html
||&lt;
とりあえずこんな感じか。

</body>
</day>
<day date="2012-04-05" title="">
<body>
*1333553936*[Vim][備忘録]VimでBundler(プラグイン管理)するvundleインストール手順

**前回までのあらすじ
-[http://d.hatena.ne.jp/kk_Ataka/20111218/1324219740:title]
普通に使っているだけだった。プラグインとかも使ってみたい、入れ方メモる。

**参考サイト
-[http://vim-users.jp/2011/04/hack215/:title]
-[https://github.com/vim-jp/vimdoc-ja/:title]

**環境
-WindowsXP
-Vim 7.3 香り屋版
-msysGit

**プラグイン管理
プラグインを入れようと思った矢先、どうもプラグイン管理をするプラグイン？　がある模様。名前がvundleといって、RubyのGem管理に使われているBundlerに影響を受けたものみたい。Bundlerなら使ったことあるし、それなら入れやすいかも。

***vundleインストール
[http://github.com/gmarik/vundle.git:title=Github]にリポジトリがあるのでgitでホームの.vimディレクトリにcloneする。
&gt;||
$ git clone http://github.com/gmarik/vundle.git ~/.vim/vundle.git
Cloning into %USERPROFILE%/.vim/vundle.git...
remote: Counting objects: 2239, done.
remote: Compressing objects: 100% (1464/1464), done.
remote: Total 2239 (delta 736), reused 2183 (delta 685)
Receiving objects: 100% (2239/2239), 269.48 KiB | 66 KiB/s, done.
Resolving deltas: 100% (736/736), done.
||&lt;

***設定
_vimrcまたは.vimrcを開き、まず以下の設定を記載。
&gt;||
&quot; vundle
set nocompatible
filetype off
set rtp+=~/.vim/vundle.git
call vundle#rc()

filetype plugin indent on
||&lt;
一行目のnocompatible……。
&gt;&gt;
NOTE: Viコンパチブルとは全てのオプションがグローバルであることを意味するので、
ファイル形式識別と'compatible'は同時に使うことはできない。既に'compatible'を設
定している場合には、それを解除する必要がある。
&lt;&lt;

という事でファイル形式の検出と競合するので無効にされている模様。で、ファイル形式の検出はfiletypeコマンドで設定される。vimはファイル編集の際に必ずファイルタイプを検出し、いい感じのタイプを選んでくれるらしい。大きく分けて下記の3つの設定がある。
-検出自体をするかどうか
--プラグインを検出するかどうか
--インデントファイルを検出するかどうか
検出自体するかどうかが一番強く、これが無効になると残りも自動的に無効になるようだ。

上記の.vimrcではこのように変化している。
|*コマンド|*検出|*プラグイン|*インデント|
|:filetype off|無効|変化なし|変化なし|
|:filetype plugin indent on|有効|有効|有効|

また、:filetypeコマンドで現在の状態を確認する事ができる。
&gt;||
filetype detection:ON  plugin:ON  indent:OFF
||&lt;

rtpがなんなのかわからないけど、とりあえずこれにvundle.gitのパスを追加？　した後vundle#rcを呼んでる。vundle#rcメソッドはvundle.git/autoload/vundle.vimにあった。
&gt;||
func! vundle#rc(...) abort
  let g:bundle_dir = len(a:000) &gt; 0 ? expand(a:1    , 1) : expand('$HOME/.vim/bundle', 1)
  let g:vundle_log = []
  call vundle#config#init()
endf
||&lt;
vundleの初期化を行っているようだ。

***プラグインの指定
実際にインストールするプラグインはvundle#rc()とfiletypeの間に記載していく。プラグインの指定方法は三つあり、書き方で自動判別してくれる？
-GitHubのリポジトリを指定する場合…ユーザIDとリポジトリ名
&gt;||
Bundle 'user_name/repository_name'
||&lt;
-それ以外のGitリポジトリを指定…URLをフルパスで
&gt;||
Bundle 'git://repository_url'
||&lt;
-[http://vim-scripts.org/vim/tools.html:title=vim-scripts]のリポジトリを指定…plugin名
&gt;||
Bundle 'plugin_name'
||&lt;

今回は補完を行うneocomplecacheというプラグインをインストールしてみる。[https://github.com/Shougo/neocomplcache:title] GitHubにあるので……。
&gt;||
&quot; vundle
set nocompatible
filetype off
set rtp+=~/.vim/vundle.git
call vundle#rc()

Bundle 'Shougo/neocomplcache'

filetype plugin indent on
||&lt;
こうなる。これで:BundleInstallをすればいいんだけどその前に！

***Windows環境で必須なもの
[https://github.com/gmarik/vundle/wiki/Vundle-for-Windows:title]
Gitとcurlが必要だったようで。Gitは入っていたがcurlが入っていなかったので入れる。

……というか、msysGitの中にcurlコマンドがあるのでそれを使えた。もしくは上記のページにあるcmdファイルを作成する。

***httpで落としたい
Git://とかhttps;//が使えない場合、http://で落としたいんだけど、GitHub指定方法だとhttps://でgit cloneしようとしてうまくいかない。

じゃあフルパス指定したらいけるかなと思ってこうしてみた。
&gt;||
Bundle 'http://github.com/Shougo/neocomplcache'
||&lt;
これでもhttps://でcloneされてしまう。困ったのでソースを見てみたら案外早く解決方法見つかった。.vim/vundle.git/autoload/vundle/config.vimの44行目くらいにプロトコルを指定しているところが。
&gt;||
 let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_gi
 t_proto : 'https'
||&lt;
これをhttpにしてみたらDone!になった！　.vim/bundle/の下にプラグインが！

**neocomplcache
.vim\bundle\neocomplcache\doc\neocomplcache.txtのEXAMPLES *neocomplcache-examples*より下を.vimrcにコピー。で、viを再起動したら補完が！

</body>
</day>
<day date="2012-04-10" title="">
<body>
*1334058674*[Git][備忘録][Windows]Pro Gitと入門Gitと入門gitでGitの復習 HEADのキャレットとかチルダとか補講編

**前回までのあらすじ
-[http://d.hatena.ne.jp/kk_Ataka/20120305/1330951640:title]
-[http://d.hatena.ne.jp/kk_Ataka/20120311/1331472478:title]
-[http://d.hatena.ne.jp/kk_Ataka/20120315/1331816663:title]

GitHubで他の人の.gitconfigとかを見たりすると、HEAD^とかHEAD~~とかにエイリアスが貼ってあるけど、これってなんなの？
今の認識: 書いた分だけリビジョンが戻ってくれる程度

**参考
-[http://progit.org/:title]
-入門Git &lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;New !!&lt;/span&gt;
-入門git

**調査
入門Git P87 コミットの祖先の指定によると、
|*記法|*意味|
|^|指定したコミットの1番目の親|
|^番号|指定したコミットのN番目の親|
|~|指定したコミットの1世代前の親|
|~世代|指定したコミットのN世代前の親|
という事らしい……が、番目と世代は何が違うんだろう？　とりあえずこんな歴史があるとして、masterから戻ってみる。
***確認
&gt;||
 * b467307 2012-04-05 kk_Ataka  (HEAD, origin/master, master) Add get_sheetname.rb(convert exe file b
 | * b025b6b 2012-04-05 kk_Ataka  (1.0stable, fileignore) Ignore docx files
 * |   90aaa1c 2012-04-04 kk_Ataka  Merge branch 'studyissue'
 |\ \
 * | | 2d387ba 2012-04-04 kk_Ataka  (concat) Add concat function (test pending...)
 * | | 68ac3d9 2012-04-04 kk_Ataka  Add csv concat
 * | | 9a4ed9b 2012-04-04 kk_Ataka  Move input cell(ex:B2) downcase(b2) in cell_reg_check and cell_to
 | * | 670d891 2012-04-04 kk_Ataka  (studyissue) Move comment, source to readme
 |/ /
 * | d0f2b58 2012-04-04 kk_Ataka  Refactoring now
 |/
 * 0563594 2012-04-04 kk_Ataka  1.0stable
 * 3d2f6bb 2012-04-04 kk_Ataka  First commit
||&lt;
まず一番目の親を指定……。
&gt;||
$ git checkout HEAD^
...
HEAD is now at 90aaa1c... Merge branch 'studyissue'
||&lt;
うん、指定できてる。んじゃ一旦masterに戻って、次はキャレット連発で。二つ前を指定できるはず。
&gt;||
$ git checkout HEAD^^
...
HEAD is now at 2d387ba... Add concat function (test pending...)
||&lt;
読み通り。じゃあ次は^NでN番目の親を指定してみる。
&gt;||
$ git checkout HEAD^2
error: pathspec 'HEAD^2' did not match any file(s) known to git.
||&lt;
あ、あれ？
&gt;||
$ git checkout HEAD^3
error: pathspec 'HEAD^3' did not match any file(s) known to git.
||&lt;
ん？
&gt;||
$ git checkout HEAD^1
...
HEAD is now at 90aaa1c... Merge branch 'studyissue'
||&lt;
これはできるの？　ふーむ。


(以下略)


結局こうなった。
&gt;||
 * b467307       master(HEAD)
 | * b025b6b   
 * |   90aaa1c   HEAD^     HEAD^1 HEAD~     HEAD~1
 |\ \  
 * | | 2d387ba   HEAD^^           HEAD~~    HEAD~2
 * | | 68ac3d9   HEAD^^^          HEAD~~~   HEAD~3
 * | | 9a4ed9b   HEAD^^^^         HEAD~~~~  HEAD~4
 | * | 670d891          
 |/ /                   
 * | d0f2b58     HEAD^^^^^        HEAD~~~~~ HEAD~5
 |/
 * 0563594 
 * 3d2f6bb 
||&lt;
うーむ。戻れるのはわかったけど、2つわからんとこが残る。。。
-番目と世代前の違い
-^^と^2の違い

***本に戻ってみる
入門Gitを少し読み進める。
&gt;&gt;
大多数のコミットには親が1つしかありませんが、マージコミットには
親が複数あります。
&lt;&lt;
&gt;&gt;
マージする以前のホームマシンの作業リポジトリの先頭のコミットがHEAD^、
一方、マージしたコミットはHEAD^2ということになります。
&lt;&lt;
……入門gitでは
&gt;&gt;
^:キャレットはマイナス1の意味だ。18f822e^は18f822eに
マッチするリビジョンの前にあるリビジョンとして解釈される。
&lt;&lt;
&gt;&gt;
~N:チルダと数字Nは、そのコミット名からNだけ前に戻る。前の例だと
18f822e~1は18f822eの前のリビジョン、18f822e~2は18f822eの2つ前の
リビジョンだ。
&lt;&lt;
親が複数ある状況を作らないといけないという事かな。
***再度チャレンジ
少し適当にコミットしてマージして親が2つある状況を作った。
&gt;||
 *   8dc8247 2012-04-10 kk_Ataka  (HEAD, master) Merge branch 'mergedbranch'
 |\
 * | ca6b93d 2012-04-10 kk_Ataka  (mergedbranch2) temp
 * | 7819449 2012-04-10 kk_Ataka  temp
 | * 074c658 2012-04-10 kk_Ataka  (mergedbranch) temp
 * | b467307 2012-04-05 kk_Ataka  (origin/master) Add get_sheetname.rb(convert exe file by ocra
 |/
 | * b025b6b 2012-04-05 kk_Ataka  (1.0stable, fileignore) Ignore docx files
 * |   90aaa1c 2012-04-04 kk_Ataka  Merge branch 'studyissue'
||&lt;
&gt;||
$ git ch HEAD^
...
HEAD is now at ca6b93d... temp
||&lt;
これはできると。んで、問題の^2は……
&gt;||
$ git ch HEAD^2
...
HEAD is now at 074c658... temp
||&lt;
できた！　ってことは、二つのブランチしかマージしていないから、^3はエラーになるはず……。
&gt;||
$ git ch HEAD^3
error: pathspec 'HEAD^3' did not match any file(s) known to git.
||&lt;
おー。
&gt;||
 *   8dc8247     master(HEAD)
 |\
 * | ca6b93d     HEAD^    HEAD^1  HEAD~    HEAD~1
 * | 7819449     HEAD^^           HEAD~~   HEAD~2
 | * 074c658              HEAD^2
 * | b467307     HEAD^^^          HEAD~~~  HEAD~3
 |/            
 | * b025b6b   
 * |   90aaa1c   HEAD^^^^ HEAD^2^ HEAD~~~~ HEAD~4
 
                   (ERROR:HEAD^3)
||&lt;
んん？　^Nはわかったけど、^^と^2の違いが余計わからなくなった……。

あ！　HEAD^2^という合わせ技ができたって事はもしかして……。

**まとめ
|*コマンド|*意味|*備考|
|HEAD^  |指定したコミットの1番目の親|※1|
|HEAD^^ |指定したコミットの1番目の親…&lt;span class=&quot;deco&quot; style=&quot;font-weight:bold;&quot;&gt;の1番目の親&lt;/span&gt;|※2|
|HEAD^^^|指定したコミットの1番目の親…&lt;span class=&quot;deco&quot; style=&quot;font-weight:bold;&quot;&gt;の1番目の親&lt;/span&gt;…&lt;span class=&quot;deco&quot; style=&quot;font-weight:bold;&quot;&gt;の1番目の親&lt;/span&gt;|※3|
|HEAD^2 |指定したコミットの2番目の親| |
|HEAD^2^|指定したコミットの2番目の親…の1番目の親| |
|HEAD~  |指定したコミットの1世代前の親|※1|
|HEAD~~ |指定したコミットの1世代前の親…の1世代前の親|※2|
|HEAD~~~|指定したコミットの1世代前の親…の1世代前の親…の1世代前の親|※3|
|HEAD~1 |指定したコミットの1世代前の親|※1|
|HEAD~2 |指定したコミットの2世代前の親|※2|
|HEAD~3 |指定したコミットの3世代前の親|※3|
※1 ※2 ※3 は同じリビジョン

こういう事かな。あっているならチェックアウトの挙動と一致するのだけど！

</body>
</day>
<day date="2012-04-17" title="">
<body>
*1334669770*[Solaris][備忘録][Subversion]Subversionで2ヶ所のリポジトリの同期を取るメモ

**前回のあらすじ
-[http://d.hatena.ne.jp/kk_Ataka/20120115/1326624864:title]

**参考サイト
-[http://www.asahi-net.or.jp/~iu9m-tcym/svndoc/svn_backup.html:title]
-[http://www.ilovex.co.jp/blog/system/other/subversion.html:title]
-[http://www.02.246.ne.jp/~torutk/subversion/intro.html:title]
-[http://d.hatena.ne.jp/pasela/20090206/svn_backup:title]
-[http://terai.xrea.jp/Subversion.html:title]

**前提
-以下の二つのサーバがある
--Aサーバ:開発を進んでいるリポジトリがある(r222)
--Bサーバ:これからAサーバのリポジトリと同期をとりたいリポジトリがある(r111)

**差分のdumpとってload(失敗)
***Aサーバ
-進んでいる分のダンプを取る。
--rオプションでダンプを取るリビジョンを指定できる。一つだけだとそのリビジョンだけ。(222ならリビジョン222)範囲指定する場合はAAA:BBBとする
&gt;||
$ svnadmin dump リポジトリパス(/home/xxx/yyyなど) -r 111:222 --incremental &gt; repo.dump
||&lt;
-これをなんらかの方法でBサーバへ移動する(ftpでもUSBでも)

***Bサーバ
-svnadmin loadコマンドで差分ダンプファイルを流しこむ。
--リビジョンがかぶっているとエラー(リビジョン111未満のもの)
&gt;||
$ svnadmin load リポジトリパス(/home/xxx/yyyなど) &lt; repo.dump
&lt;&lt;&lt; オリジナルのリビジョン 111 に基づき、新しいトランザクションを開始しました
     * パスを追加しています : trunk/xxx ...svnadmin: ファイルが既に存在します: ファイルシステム 'リポジトリパス', トランザクション xxx-xx, パス 'trunk/xxx'
||&lt;
--112からダンプしたファイルをloadする…とうまくいく予定だったのだが、なんかファイルのチェックサムが違うといわれた……。
&gt;||
$ svnadmin load リポジトリパス(/home/xxx/yyyなど) &lt; repo.dump
&lt;&lt;&lt; オリジナルのリビジョン 112 に基づき、新しいトランザクションを開始しました
     * パスを編集しています : trunk/xxx/a.sh ... 完了しました。

------- 新しいリビジョン xxx を (オリジナルのリビジョン xxx からロードして) コミットしました &gt;&gt;&gt;

&lt;&lt;&lt; オリジナルのリビジョン 113 に基づき、新しいトランザクションを開始しました
     * パスを編集しています : trunk/xxx/b.sh ... 完了しました。
     * パスを編集しています : trunk/xxx/c.sh ...
     svnadmin: ファイル '/trunk/xxx/c.sh' のチェックサムが一致しませんでした:
   期待:  f566e489511cea2fd1e6 ...
   実際:  0f76ab4f5d0625e9de9c ...
||&lt;
フルダンプをとる =&gt; 新しくリポジトリを作成 =&gt; loadでも同じファイル(リビジョンは違った)でコケたので別の方法を考える……。

**hotcopy(成功)
&gt;http://www.caldron.jp/~nabetaro/svn/svnbook-1.4-final/svn.ref.svnadmin.c.hotcopy.html&gt;
このサブコマンドは、すべてのフック、設定ファイル、そしてもちろんデータベースファイルを含む、リポジトリの完全な「ホット」バックアップを作成します。
&lt;&lt;
ただし可搬性に乏しいとの事。今回は同マシン、OS、Subversionバージョンなので大丈夫だと思う。まずAサーバでコピー。
&gt;||
$ svnadmin hotcopy リポジトリパス(/home/xxx/yyyなど) コピー先のリポジトリパス
a /home/xxx/yyy OK
a /home/xxx/yyy/hooks OK
a /home/xxx/yyy/hooks/start-commit.tmpl 3K
...
a /home/xxx/yyy/format 1K
||&lt;
これをBサーバへ持ってくるだけ。フルバックアップしかできないのでこれしか方法はない？

とりあえず一時しのぎはできたけど、チェックサム解消法も考えないといけないな。 

-[http://d.hatena.ne.jp/replication/20120405/1333548839:title]
-[http://rack990.sakura.ne.jp/archives/entry-184.html:title]
-[http://d.hatena.ne.jp/espresso3389/20090208:title]
-[http://web.archive.org/web/20101221154224/http://nonn-et-twk.net/twk/svn-checksum-mismatch:title]
-[http://glob.bushi.net.nz/glob/2007/02/14/subversion-checksum-mismatch-easy-workaround/:title]
-[http://weekbuild.blog39.fc2.com/?mode=m&amp;no=30:title]
-[http://www.caldron.jp/~nabetaro/svn/svnbook-1.4-final/svn.ref.svnadmin.c.hotcopy.html:title] 

</body>
<comments>
<comment>
<username>kk_Ataka</username>
<body>うーん、同じリポジトリ間で再び同期とったらいけたなー&lt;br&gt;違う点はdumpファイルも絶対パスにしてたくらいだけど&lt;br&gt;関係ないよなぁ</body>
<timestamp>1347359483</timestamp>
</comment>
</comments>
</day>
<day date="2012-04-20" title="">
<body>
*1334933158*[Ruby][Windows][備忘録]ZenTestで実行したRSpecの結果をGrowlで通知してくれるようにした

**前回までのあらすじ
-[http://d.hatena.ne.jp/kk_Ataka/20111207/1323291938:title]
前回は、ファイル編集する -&gt; alt+tabでウィンドウ切り替える -&gt; プロンプトでrspecコマンドうつ…の繰り返しを改善することができた。
今回は、コード修正、保存 -&gt; 違うターミナル切り替え -&gt; ZenTestで自動実行された結果を見る…の繰り返しを改善する。テスト結果通知にGrowlを使用する事でいけそう。

**参考サイト
-[http://d.hatena.ne.jp/gan2/20080413/1208081539:title]
-[http://www.edit.ne.jp/~koic/?date=20070731:title]
-[http://d.hatena.ne.jp/amacou/20090606/1244260607:title]
-[https://github.com/rspec/rspec/wiki/autotest:title]
-[http://blog.masashi-fujiwara.net/2010/11/script-test.html:title]
-[https://github.com/karl/autotest-growl:title]
-[http://rubyist.g.hatena.ne.jp/rochefort/20100414/p1:title]
-[http://d.hatena.ne.jp/zariganitosh/20080312/1205305079:title]
-[http://blog.champierre.com/774:title]

**環境
-Windows XP
-Ruby 1.9.3
--Rubygems 1.8.11
--Bundler 1.0.21
--ZenTest 4.6.2
--autotest-growl 0.2.16(だったか？)
--rspec 2.8.0
-Growl for Windows 2.0.9
Macに置き換えてもいけるかは後で確認。

**手順
***Growls for Windowsインストール
-[http://www.growlforwindows.com/gfw/displays.aspx:title] ここから落とす。

***Gem入手
-Gemfileファイルを作って以下のgemファイルを記載
&gt;||
gem 'ZenTest'
gem 'autotest-growl'
||&lt;
-bundle install

***.autotest
-前回何も記載しなかった.autotestファイルに以下を追記。
&gt;||
require 'autotest/growl'
||&lt;

***実行
&gt;||
$ bubdle exec autotest
loading autotest/rspec2


--------------------------------------------------------------------------------

[2J[fC:\rubies\Ruby-193-p0\bin\ruby -rrubygems -S C:/WINDOWS/my/project/sha1/vendor/bundle/ruby/1.9.1/gems/rspec-core-2.8.0/exe/rspec --tty 'C:/WINDOWS/my/project/sha1/spec/sha1_spec.rb'
.......

Finished in 0.03125 seconds
7 examples, 0 failures
||&lt;
と同時にGrowlポップアップきたこれ！　意外とすぐだった！

**以下いろいろと失敗の試行錯誤Log

=====

***Windows用でないとダメみたい？
-[http://rubyist.g.hatena.ne.jp/rochefort/20100414/p1:title] autotest-growlをWindows用に修正したgemが。Gemfileのautotest-growlは削除してkarl-autotest-growlとDL先のsourceを追加。
&gt;||
+ 3 source &quot;http://gems.github.com&quot;
  8 gem 'ZenTest'
- 9 gem 'autotest-growl'
+ 9 gem 'karl-autotest-growl'
||&lt;
-bundle install
-bubdle exec autotest

***ZenTest実行されなくなった…
&gt;||
- 8 gem 'ZenTest'
+ 9 gem 'autotest'
+10 gem 'autotest-growl'
+11 gem 'autotest-fsevent'
||&lt;
fseventをインストールするにはDevelopment kitが必要らしい。[http://d.hatena.ne.jp/kk_Ataka/20120228/1330436604:title] インストール方法。

で、.autotestに追加。
&gt;||
+ require 'autotest/fsevent'
||&lt; 

</body>
</day>
<day date="2012-04-22" title="">
<body>
*1335108555*[Git][イベント] Git道場#1に参加しました と、pullとpull --rebase備忘録 #gitdojo

**概要
-[http://git-dojo.doorkeeper.jp/events/979-git%E9%81%93%E5%A0%B4:title]
対象者が
&gt;&gt;
merge / rebaseにちょっと自信がない
conflictが怖い
&lt;&lt;
まさにそんな状況だったので、打破するために参加しました。

**心「Git総論、心構え」
-@[https://twitter.com/#!/iwamatsu:title=iwamatsu]さんの講義
***Gitにはリモートリポジトリ、ローカルリポジトリがある
-集中型のリポジトリにはリモートリポジトリとローカルリポジトリの区別がない
--皆のリポジトリなので履歴参照などはすべてリポジトリを見にいかなければならない
-分散型では、主な作業はローカルで行い、データを管理できる
-ローカルリポジトリからリモートリポジトリに反映(プッシュ)する事で他人と共有
-ローカルリポジトリは俺のもの、リモートリポジトリは皆のもの
***Gitは頑健である
***Gitは時間的な変遷を管理する
-昨日のこの時間何してたかな？
-testブランチを消してもコミットは残っている
-作業履歴が残っているのでreflogで参照できる
--reflogで救済できる期間は90日以内、またはgit gc が実行されるまで
***他(質疑応答の回答など)
-ブランチを削除してもコミットは残っている。git branch -D
-GitHub重い……
--イントラにbareリポジトリ用意して毎朝GitHubから持ってくるなど

**技「本日の課題、テクニックの解説」
-@[https://twitter.com/#!/conceal_rs:title=conceal_rs]さんの講義
***課題
-今日はチームで一つのファイルを編集
-pull, rebaseを怖がらずに
--コンフリクトが起こった時の対処法を学ぶ
-pullとの違いを理解する
--≒mergeとrebaseの違いでいいのかな？
***ルール
-1-10までのNumbersファイルの後ろに記号を追加削除していく
-コミットメッセージだけで語る
-チーム間ではコミットメッセージのみを介して会話する
-「好きにやっていいので、ぐちゃぐちゃを楽しんでください」
-今回は@[https://twitter.com/#!/myfinder:title=myfinder]さん、@[https://twitter.com/#!/umiyosh:title=umiyosh]さん、@[https://twitter.com/#!/nysalor:title=nysalor]さんと黙々と。

...みっちり数時間。

-(グラフが)とても…カオスです

***実習後
-再び講義。その後、同じNumbersファイルを(まっさらにしてから)やり直し
-さっきはpullでリポジトリから取得していたと思うけど、今回は必ずpull --rebaseする事
--コミットを直列にならべる事が目的
&gt;||
git pull --rebase
git add 
git rebase --continue
||&lt;
-rebaseとは
--(ざっくりと)コミットをかぶせる
---リモートの最新コミットにローカルの共通コミットから先のコミットが被せられる(onto)
---まっすぐになるので誰が何コミットしたかわかりやすい
---コンフリクトした場合、無名ブランチがチェックアウトされた状態になる
-一方でmergeは
--コミットを統合する(基本的にマージコミットが生まれる=見た感じ複雑)
---リモートに新しいコミットがあると失敗する
---変更履歴が残るので、後で調査がしやすい
-どちらがいいかは状況次第
--他人がコミットしている事を意識する
--ローカルブランチでは作業履歴を残すためmergeの方がいいかも

***アンチパターン？
-git add . 
--全部追加するとかありえない
--statusで確認してね
-無名ブランチでコミット
--困った場合は --abortで中断する
--git rebase --skipでスキップする事ができる
-git config user.nameとか設定して

という感じで13:00から18:00までadd,commit,push,pull(pull --rebase), コンフリクト解消を繰り返していました。個人的にはチューターの方にも丁寧に説明していただき、rebaseもかなり腹に落ちた感じで参加してよかった。後はこの感覚があるうちに本で復習してみる。

会場を提供して下さったフューチャーアーキテクトさんとGit道場師範の皆さんありがとうございました。門下生の皆さんお疲れ様でした。(終わった時にはほぼ全員ぐったりしていた)

**pull、pull --rebaseまとめ
糞長いので先にまとめ。
***pull
以下のふたつのリポジトリがあったとき
&gt;||
A
(FIRST)---(NUMBERADD)
          origin/master
||&lt;
&gt;||
B
(FIRST)---(hello world)---(hello git)---(bye svn)
origin/master
||&lt;
Bがpullするとこういう歴史が出来る。
&gt;||
          (NUMBERADD)----------------------------(merge)
         /                                       /
(FIRST)---(hello world)---(hello git)---(bye svn)
||&lt;
***pull --rebase
同じく。
&gt;||
A
(FIRST)---(NUMBERADD)
          origin/master
||&lt;
&gt;||
B
(FIRST)---(hello world)---(hello git)---(bye svn)
origin/master
||&lt;
Bがpull --rebaseするとこういう歴史ができる。
&gt;||
          (NUMBERADD)---(hello world merge)
         /              no branch
(FIRST)---(hello world)---(hello git)---(bye svn)
||&lt;
&gt;||
          (NUMBERADD)---(hello world merge)---(hello git merge)
         /                                    no branch
(FIRST)---(hello world)---(hello git)---(bye svn)
||&lt;
&gt;||
          (NUMBERADD)---(hello world merge)---(hello git merge)---(bye svn merge)
         /                                                        no branch
(FIRST)---(hello world)---(hello git)---(bye svn)
||&lt;
&gt;||
          (NUMBERADD)---(hello world merge)---(hello git merge)---(bye svn merge)
         /                                                        master
(FIRST)--
||&lt;
整形して、
&gt;||
(FIRST)---(NUMBERADD)---(hello world merge)---(hello git merge)---(bye svn merge)
                                                                  master
||&lt;
以下に実際にやってみたログ。

**pull
dojo1さんとdojo2さんでdojo.gitリポジトリに書き込んでいく。空のnumファイルをfirst commit後……。
***dojo1
dojo1さんが準備。
&gt;||
$ cat num
 1
 2
 3
 4
 5
$ git coa -m &quot;1から5までnumberふり&quot;
[master 27734d8] 1から5までnumberふり
 1 files changed, 5 insertions(+), 0 deletions(-)
||&lt;
グラフはこんな感じ。
&gt;||
$ git g
 * 27734d8 2012-04-22 kk_Ataka  (HEAD, master) 1から5までnumberふり
 * 9f20959 2012-04-22 kk_Ataka  (origin/master) first commit
||&lt;
***dojo2
dojo2さん。cloneしたときはこんなグラフ。
&gt;||
$ git g
 * 9f20959 2012-04-22 kk_Ataka  (HEAD, origin/master, origin/HEAD) first commit
||&lt;
ここに27734d8をプルする前にローカルで色々育てる。
&gt;||
$ vim num
$ git coa -m &quot;hello world追加&quot;
$ vim num
$ git coa -m &quot;hello git追加&quot;
$ vim num
$ git coa -m &quot;bye svn追加&quot;
||&lt;
グラフはこう。
&gt;||
$ git g
 * 817be9c 2012-04-22 kk_Ataka  (HEAD, master) bye svn追加
 * 66d89ab 2012-04-22 kk_Ataka  hello git追加
 * cb71f84 2012-04-22 kk_Ataka  hello world追加
 * 9f20959 2012-04-22 kk_Ataka  (origin/master, origin/HEAD) first commit
||&lt;
この状態でプルすると…
&gt;||
$ git pull
remote: Counting objects: 5, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From /home/kk_Ataka/github/dojo
   9f20959..27734d8  master     -&gt; origin/master
Auto-merging num
CONFLICT (content): Merge conflict in num
Automatic merge failed; fix conflicts and then commit the result.
[22:54:45 kk_Ataka@www15203u (master *+|MERGING&lt;&gt;)~/github/dojo2]
$ git g
 * 817be9c 2012-04-22 kk_Ataka  (HEAD, dojo2/master, master) bye svn追加
 * 66d89ab 2012-04-22 kk_Ataka  hello git追加
 * cb71f84 2012-04-22 kk_Ataka  hello world追加
 | * 27734d8 2012-04-22 kk_Ataka  (origin/master, origin/HEAD) 1から5までnumberふり
 |/
 * 9f20959 2012-04-22 kk_Ataka  first commit
||&lt;
first commit以降のブランチがdojo1さんが編集したものと自分が育てたものに分岐。これを解消してやり、コミット。
&gt;||
 git coa -m &quot;コンフリクトを解消し、メッセージにnumberをふった&quot;
[master d21349d] コンフリクトを解消し、メッセージにnumberをふった
[22:57:18 kk_Ataka@www15203u (master&gt;)~/github/dojo2]
$ git g
 *   d21349d 2012-04-22 kk_Ataka  (HEAD, master) コンフリクトを解消し、メッセージにnumberをふ
 |\
 * | 817be9c 2012-04-22 kk_Ataka  (dojo2/master) bye svn追加
 * | 66d89ab 2012-04-22 kk_Ataka  hello git追加
 * | cb71f84 2012-04-22 kk_Ataka  hello world追加
 | * 27734d8 2012-04-22 kk_Ataka  (origin/master, origin/HEAD) 1から5までnumberふり
 |/
 * 9f20959 2012-04-22 kk_Ataka  first commit
||&lt;

***dojo1に戻り
dojo1に戻りプルして一行追加しコミット&amp;プッシュ。
&gt;||
$ git pull
remote: Counting objects: 16, done.
remote: Compressing objects: 100% (4/4), done.
remote: Total 12 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (12/12), done.
From /home/kk_Ataka/github/./dojo
   27734d8..d21349d  master     -&gt; origin/master
Updating 27734d8..d21349d
Fast-forward
 num |    6 +++---
 1 files changed, 3 insertions(+), 3 deletions(-)
$ git g
 *   d21349d 2012-04-22 kk_Ataka  (HEAD, origin/master, master) コンフリクトを解消し、メッセ
 |\
 * | 817be9c 2012-04-22 kk_Ataka  bye svn追加
 * | 66d89ab 2012-04-22 kk_Ataka  hello git追加
 * | cb71f84 2012-04-22 kk_Ataka  hello world追加
 | * 27734d8 2012-04-22 kk_Ataka  (dojo1/master) 1から5までnumberふり
 |/
 * 9f20959 2012-04-22 kk_Ataka  first commit
$ vim num
$ git coa -m &quot;number6を追加&quot;
[master eeeab6f] number6を追加
 1 files changed, 1 insertions(+), 0 deletions(-)
$ git push
Counting objects: 5, done.
Writing objects: 100% (3/3), 294 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
To /home/kk_Ataka/github/./dojo.git/
   d21349d..eeeab6f  master -&gt; master
||&lt;

***同じ頃dojo2では
その隙にdojo2は少しローカルで育て中。(ただし、今度はコンフリクトさせないように)
&gt;||
$ vi num
$ git coa -m &quot;bye svnは削除&quot;
||&lt;
そしてさっきのdojo1の更新をプル。
&gt;||
$ git pull
remote: Counting objects: 5, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From /home/kk_Ataka/github/dojo
   d21349d..eeeab6f  master     -&gt; origin/master
Auto-merging num
Merge made by recursive.
 num |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)
[23:06:42 kk_Ataka@www15203u (master&gt;)~/github/dojo2]
$ git g
 *   5ba127c 2012-04-22 kk_Ataka  (HEAD, master) Merge branch 'master' of /home/kk_Ataka/gith
 |\
 * | 252d4b5 2012-04-22 kk_Ataka  bye svnは削除
 | * eeeab6f 2012-04-22 kk_Ataka  (origin/master, origin/HEAD) number6を追加
 |/
 *   d21349d 2012-04-22 kk_Ataka  コンフリクトを解消し、メッセージにnumberをふった
 |\
 * | 817be9c 2012-04-22 kk_Ataka  (dojo2/master) bye svn追加
 * | 66d89ab 2012-04-22 kk_Ataka  hello git追加
 * | cb71f84 2012-04-22 kk_Ataka  hello world追加
 | * 27734d8 2012-04-22 kk_Ataka  1から5までnumberふり
 |/
 * 9f20959 2012-04-22 kk_Ataka  first commit
||&lt;
こうなる。なので基本的にプルはマージの履歴が残る。
**pull --rebase
pull --rebaseではどうか。下記の状態まで戻る。
***dojo1
&gt;||
$ git g
 * 49622c6 2012-04-22 kk_Ataka  (HEAD, origin/master, master) 1から5までnumberふり
 * ec12cb5 2012-04-22 kk_Ataka  first commit
||&lt;
***dojo2
&gt;||
$ git  g
 * 3a940bc 2012-04-22 kk_Ataka  (HEAD, master) bye svn追加
 * 763cbaa 2012-04-22 kk_Ataka  hello git追加
 * d6c6c98 2012-04-22 kk_Ataka  hello world追加
 * ec12cb5 2012-04-22 kk_Ataka  (origin/master, origin/HEAD) first commit
||&lt;
ここでpull --rebaseを使う。
&gt;||
$ git pull --rebase
remote: Counting objects: 5, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From /home/kk_Ataka/github/dojo
   ec12cb5..49622c6  master     -&gt; origin/master
First, rewinding head to replay your work on top of it...
Applying: hello world追加
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
Auto-merging num
CONFLICT (content): Merge conflict in num
Failed to merge in the changes.
Patch failed at 0001 hello world追加

When you have resolved this problem run &quot;git rebase --continue&quot;.
If you would prefer to skip this patch, instead run &quot;git rebase --skip&quot;.
To restore the original branch and stop rebasing run &quot;git rebase --abort&quot;.

||&lt;
盛大にコンフリクトする。改めて見るとrebase --continue, --skip, --abortを使いなさいって書いてあるな。

で、今のrebaseが始まったとき、ブランチはどこにいるのかというと……。
&gt;||
$ git br
 * (no branch) 49622c6 1から5までnumberふり
   master      3a940bc [ahead 3, behind 1] bye svn追加
||&lt;
ここ。無名ブランチ。この496...はどこかというと……。
&gt;||
$ git g
 * 3a940bc 2012-04-22 kk_Ataka  (master) bye svn追加
 * 763cbaa 2012-04-22 kk_Ataka  hello git追加
 * d6c6c98 2012-04-22 kk_Ataka  hello world追加
 | * 49622c6 2012-04-22 kk_Ataka  (HEAD, origin/master, origin/HEAD) 1から5までnumberふり
 |/
 * ec12cb5 2012-04-22 kk_Ataka  first commit
||&lt;
dojo1さんがプッシュしていた所。なにはともあれまず、リポジトリにプッシュされていたものを優先する。このdojo1さんの変更に対して、d6c6c98、763cbaa、3a940bcとひとつずつrebaseしていく。問題を解決したらrebase --continue。無名ブランチにいるのでコミットしちゃダメ。
&gt;||
$ vim num
競合解消…
$ git add num
$ git rebase --continue
Applying: hello world追加
Applying: hello git追加
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
Auto-merging num
CONFLICT (content): Merge conflict in num
Failed to merge in the changes.
Patch failed at 0002 hello git追加
||&lt;
ひとつ解消したらふたつ目でまたコンフリクトした。今どこにいるかというと……。
&gt;||
$ git br
 * (no branch) 781c723 hello world追加
   master      3a940bc [ahead 3, behind 1] bye svn追加
$ git g
 * 781c723 2012-04-22 kk_Ataka  (HEAD) hello world追加
 | * 3a940bc 2012-04-22 kk_Ataka  (master) bye svn追加
 | * 763cbaa 2012-04-22 kk_Ataka  hello git追加
 | * d6c6c98 2012-04-22 kk_Ataka  hello world追加
 * | 49622c6 2012-04-22 kk_Ataka  (origin/master, origin/HEAD) 1から5までnumberふり
 |/
 * ec12cb5 2012-04-22 kk_Ataka  first commit
||&lt;
コンフリクトを解消しつつ無名ブランチで突き進んでいる。
&gt;||
$ vim num
競合解消…
$ git add num
$ git rebase --continue
Applying: hello git追加
Applying: bye svn追加
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
Auto-merging num
CONFLICT (content): Merge conflict in num
Failed to merge in the changes.
Patch failed at 0003 bye svn追加
||&lt;

どんどん無名ブランチを進めていく。
&gt;||
$ git br
 * (no branch) 8fb0d5e hello git追加
   master      3a940bc [ahead 3, behind 1] bye svn追加
$ git g
 * 8fb0d5e 2012-04-22 kk_Ataka  (HEAD) hello git追加
 * 781c723 2012-04-22 kk_Ataka  hello world追加
 | * 3a940bc 2012-04-22 kk_Ataka  (master) bye svn追加
 | * 763cbaa 2012-04-22 kk_Ataka  hello git追加
 | * d6c6c98 2012-04-22 kk_Ataka  hello world追加
 * | 49622c6 2012-04-22 kk_Ataka  (origin/master, origin/HEAD) 1から5までnumberふり
 |/
 * ec12cb5 2012-04-22 kk_Ataka  first commit
||&lt;
解消。
&gt;||
$ vim num
競合解消…
$ git add num
$ git rebase --continue
Applying: bye svn追加
||&lt;
これで全てのコミットの変更がdojo1さんの変更の上に適用された。で、今どこにいるかというと。
&gt;||
$ git br
 * master 96897da [ahead 3] bye svn追加
$ git g
 * 96897da 2012-04-22 kk_Ataka  (HEAD, master) bye svn追加
 * 8fb0d5e 2012-04-22 kk_Ataka  hello git追加
 * 781c723 2012-04-22 kk_Ataka  hello world追加
 * 49622c6 2012-04-22 kk_Ataka  (origin/master, origin/HEAD) 1から5までnumberふり
 * ec12cb5 2012-04-22 kk_Ataka  first commit
||&lt;
無名ブランチからmasterブランチに。自分で作っていたコミットはなくなりあたらしくdojo1さんが作ったコミットの先に移動している。(SHA1が違う)

</body>
</day>
<day date="2012-04-23" title="">
<body>
*1335185906*[Git][備忘録][Windows]Pro Gitと入門Gitと入門gitと実用GitとGit道場#1でGitの復習 rebase編

**前回までのあらすじ
-[http://d.hatena.ne.jp/kk_Ataka/20120305/1330951640:title]
-[http://d.hatena.ne.jp/kk_Ataka/20120311/1331472478:title]
-[http://d.hatena.ne.jp/kk_Ataka/20120315/1331816663:title]
-[http://d.hatena.ne.jp/kk_Ataka/20120410/1334058674:title]

-[http://d.hatena.ne.jp/kk_Ataka/20120422/1335108555:title]

**参考
-[http://progit.org/:title]
-入門Git
-入門git
-実用Git &lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;New !!&lt;/span&gt;
-Git道場#1 講義 http://speakerdeck.com/u/ogawa/p/git &lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;New !!&lt;/span&gt;

**rebaseとは
&gt;&gt;
入門git P126
土台の置き換え(リベース)にはgit rebaseコマンドを使う。
&lt;&lt;
&gt;&gt;
実用Git P176
一連のコミットのもととなるもの(基点)を変更する際に使います。
&lt;&lt;
&gt;&gt;
Git道場 講義
コミットをかぶせる事((Git道場で実施したのはpull --rebaseだけど基本は同じはず))
&lt;&lt;
コミットの基を変更すると。

***パターン1 一般的な？場合(前方移植(forward-port))
Git道場で繰り返したパターンに近いかな。こういうブランチを作る。
&gt;||
       1---2---3(topic)
      /
A---B---C---D(master)
||&lt;
まずは1-5行目にそれぞれ1-5と入力したファイルを用意。
&gt;||
$ touch num
$ git add num
$ git commit -am&quot;first commit&quot;
[master (root-commit) fa9eabc] first commit
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 num

$ vi num
$ cat num
$ git commit -am &quot;Add line number&quot;
[master 15f636f] Add line number
 1 files changed, 5 insertions(+), 0 deletions(-)

$ git g
 * 15f636f  (HEAD, master) Add line number
 * fa9eabc  first commit
||&lt;
次にtopicブランチを作成しを育てる。
&gt;||
$ vi num
$ cat num
1 git add
2
3
4
5
$ git commit -am &quot;Add message line 1&quot;
[topic 29d901e] Add message line 1
 1 files changed, 1 insertions(+), 1 deletions(-)

$ vi num
$ cat num
1 git add
2 git commit
3
4
5
$ git commit -am &quot;Add message line 2&quot;
[topic 0b89cc2] Add message line 2
 1 files changed, 1 insertions(+), 1 deletions(-)

$ vi num
$ cat num
1 git add
2 git commit
3 git rebase
4
5
$ git commit -am &quot;Add message line 3&quot;
[topic 2588a24] Add message line 3
 1 files changed, 1 insertions(+), 1 deletions(-)


$ git g
 * 2588a24  (HEAD, topic) Add message line 3
 * 0b89cc2  Add message line 2
 * 29d901e  Add message line 1
 * 15f636f  (master) Add line number
 * fa9eabc  first commit
||&lt;
masterに戻り、同じくファイルを編集。
&gt;||
$ git chm
Switched to branch 'master'

$ vi num
$ cat num
1
2
3
4
5 git add from_master
$ git commit -am &quot;Add message line 5&quot;
[master 0b91a9f] Add message line 5
 1 files changed, 1 insertions(+), 1 deletions(-)

$ vi num
$ cat num
1
2
3
4 git commit from_master
5 git add from_master
$ git commit -am &quot;Add message line 4&quot;
[master 93b8e52] Add message line 4
 1 files changed, 1 insertions(+), 1 deletions(-)

$ git g
D  * 93b8e52  (HEAD, master) Add message line 4
C  * 0b91a9f  Add message line 5
 3 | * 2588a24  (topic) Add message line 3
 2 | * 0b89cc2  Add message line 2
 1 | * 29d901e  Add message line 1
   |/
B  * 15f636f  Add line number
A  * fa9eabc  first commit
||&lt;
各コミットをABCD123とすると、こう。
&gt;||
       1---2---3(topic)
      /
A---B---C---D(master)
||&lt;
そして、topicブランチの変更をmasterブランチへ&quot;かぶせる&quot;
&gt;||
$ git ch topic
Switched to branch 'topic'

$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: Add message line 1
Using index info to reconstruct a base tree...
&lt;stdin&gt;:11: trailing whitespace.
1 git add
warning: 1 line adds whitespace errors.
Falling back to patching base and 3-way merge...
Auto-merging num
Applying: Add message line 2
Using index info to reconstruct a base tree...
&lt;stdin&gt;:12: trailing whitespace.
2 git commit
warning: 1 line adds whitespace errors.
Falling back to patching base and 3-way merge...
Auto-merging num
Applying: Add message line 3
Using index info to reconstruct a base tree...
&lt;stdin&gt;:13: trailing whitespace.
3 git rebase
warning: 1 line adds whitespace errors.
Falling back to patching base and 3-way merge...
Auto-merging num
CONFLICT (content): Merge conflict in num
Failed to merge in the changes.
Patch failed at 0003 Add message line 3

When you have resolved this problem run &quot;git rebase --continue&quot;.
If you would prefer to skip this patch, instead run &quot;git rebase --skip&quot;.
To restore the original branch and stop rebasing run &quot;git rebase --abort&quot;.
||&lt;
途中でコンフリクトしたけど、内部ではこうなっている。HEADは今ここ。
-topicブランチの一つ目の変更をmasterブランチに適用
&gt;||
       1---2---3(topic)
      /
A---B---C---D(master)---1'(HEAD)
||&lt;
-topicブランチの二つ目の変更をmasterブランチに適用
&gt;||
       1---2---3(topic)
      /
A---B---C---D(master)---1'---2'(HEAD)
||&lt;
-topicブランチの三つ目の変更をmasterブランチに適用しようとしてコンフリクト
&gt;||
       1---2---3(topic)
      /
A---B---C---D(master)---1'---2'---3'(HEAD)
||&lt;
コンフリクト発生時、グラフはこうなっている。
&gt;||
$ git g
 * cf6c3d6  (HEAD) Add message line 2
 * 38f8aff  Add message line 1
 * 93b8e52  (master) Add message line 4
 * 0b91a9f  Add message line 5
 | * 2588a24  (topic) Add message line 3
 | * 0b89cc2  Add message line 2
 | * 29d901e  Add message line 1
 |/
 * 15f636f  Add line number
 * fa9eabc  first commit
||&lt;
Add message line 1と2がmasterブランチから生えてる、イコールmasterブランチにtopicブランチの変更(二つ)がコミットされている。一個ずつ変更を適用してコミットとしているので、もとのtopicブランチとSHA1値が変わっている。

最後の変更をコミットしようとしたらコンフリクトしたので、直す。
&gt;||
$ vi num
$ git add num
$ git rebase --continue
Applying: Add message line 3
||&lt;
rebaseが無事終了。グラフを見てみると…。
&gt;||
$ git g
 * 7ab5db8  (HEAD, topic) Add message line 3
 * cf6c3d6  Add message line 2
 * 38f8aff  Add message line 1
 * 93b8e52  (master) Add message line 4
 * 0b91a9f  Add message line 5
 * 15f636f  Add line number
 * fa9eabc  first commit
||&lt;
masterブランチとtopicブランチが一直線になった。旧topicブランチは変更が適用されたという事で削除されている。最終的にはこうなる。
&gt;||
A---B---C---D(master)---1'---2'---3'(HEAD, topic)
||&lt;

一連の流れのreflogはこんな感じ。
&gt;||
7ab5db8 HEAD@{0}: rebase: Add message line 3           # 一つずつ変更を適用
cf6c3d6 HEAD@{1}: rebase: Add message line 2           # 一つずつ変更を適用
38f8aff HEAD@{2}: rebase: Add message line 1           # 一つずつ変更を適用
93b8e52 HEAD@{3}: checkout: moving from topic to 93b8e52... # rebaseが勝手に無名ブランチ(masterの所)へcheckout
2588a24 HEAD@{4}: checkout: moving from master to topic     # rebaseのため自力でcheckoutした
||&lt;

***パターン2 rebaseしたいブランチに依存しているブランチがある場合
これを見てまたrebase怖いと思ってしまった。内容を見てみる。
&gt;||
           x---y(subdev)
          /
   1---2---3(dev)
  /
A---B---C(master)
||&lt;
こういうブランチがあった時に、devをrebaseするとどうなるかという事。なるかどうかは別にして、git rebase master devで下記のようになってくれるとうれしい。
&gt;||
                             x'---y'(subdev)
                            /
A---B---C(master)---1'---2'---3'(dev)
||&lt;
だが、実態はそうではない。以下で試してみる。まず準備。
&gt;||
#devブランチを作成
$ git chb dev
$ touch newfeature
$ git add newfeature
$ git commit -am&quot;Add newfeature&quot;
$ echo &quot;feature is ...&quot; &gt;&gt; newfeature
$ git commit -am &quot;Add message line 1&quot;
#devブランチにサブのブランチを作成し育てる
$ git chb subdev
$ echo &quot;sub module now&quot; &gt;&gt; newfeature
$ git commit -am &quot;Add message line 2(sub module)&quot;
$ echo &quot;sub module now 2&quot; &gt;&gt; newfeature
$ git commit -am &quot;Add message line 3(sub module)&quot;
#devブランチに戻り育てる
$ git ch dev
$ echo &quot;new feature end&quot; &gt;&gt; newfeature
$ git commit -am &quot;Add message line 2&quot;
#masterブランチに戻り育てる
$ git chm
$ echo &quot;feature add&quot; &gt;&gt; num
$ git commit -am &quot;Modify num&quot;
$ echo &quot;feature add 2&quot; &gt;&gt; num
$ git commit -am &quot;Modify num 2&quot;
||&lt;
で、今のグラフ。
&gt;||
$ git g
  y * ebdc7e7  (subdev) Add message line 3(sub module)
C   | * 18ac45f  (HEAD, master) Modify num 2
B   | * a43a699  Modify num
 3  | | * a3f65de  (dev) Add message line 2
  x * | | f473f19  Add message line 2(sub module)
    | |/
    |/|
 2  * | cf36abe  Add message line 1
 1  * | 43b3504  Add newfeature
    |/
A   * 3aec83c  (nobra) Add message nobra
||&lt;
rebase開始。
&gt;||
$ git rebase master dev
First, rewinding head to replay your work on top of it...
Applying: Add newfeature
Applying: Add message line 1
Applying: Add message line 2
||&lt;
グラフはこうなる。
&gt;||
$ git g
 3'  * 948e1a4  (HEAD, dev) Add message line 2
 2'  * 0bc3e36  Add message line 1
 1'  * ae15a29  Add newfeature
   y | * ebdc7e7  (subdev) Add message line 3(sub module)
C    * | 18ac45f  (master) Modify num 2
B    * | a43a699  Modify num
   x | * f473f19  Add message line 2(sub module)
 2   | * cf36abe  Add message line 1
 1   | * 43b3504  Add newfeature
     |/
A    * 3aec83c  (nobra) Add message nobra
||&lt;
(ブランチが)すごく…多いです。こうなった。
&gt;||
           x---y(subdev)
          /
   1---2--
  /
A---B---C(master)---1'---2'---3'(dev)
||&lt;
dev(1,2,3)はきちんと適用された。が、subdev(x,y)は適用されていない。ので1,2,x,yは残っている。(3はdevをrebaseし、subdevから到達できないのでいつもどおり削除されている)

むむむ。しかし、修正内容さえ分かっていればコンフリクトしても冷静に直せばきちんとrebaseできるか。dev(3')にsubdev(y)をrebaseする。
&gt;||
$ git rebase dev subdev
First, rewinding head to replay your work on top of it...
Applying: Add message line 2(sub module)
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
Auto-merging newfeature
CONFLICT (content): Merge conflict in newfeature
Failed to merge in the changes.
Patch failed at 0001 Add message line 2(sub module)

When you have resolved this problem run &quot;git rebase --continue&quot;.
If you would prefer to skip this patch, instead run &quot;git rebase --skip&quot;.
To restore the original branch and stop rebasing run &quot;git rebase --abort&quot;.

$ vi newfeature
$ git add newfeature
$ git rebase --continue
Applying: Add message line 2(sub module)
Applying: Add message line 3(sub module)
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
Auto-merging newfeature

$ git g
 * 0fe8a57  (HEAD, subdev) Add message line 3(sub module)
 * 71f976a  Add message line 2(sub module)
 * 948e1a4  (dev) Add message line 2
 * 0bc3e36  Add message line 1
 * ae15a29  Add newfeature
 * 18ac45f  (master) Modify num 2
 * a43a699  Modify num
 * 3aec83c  (nobra) Add message nobra
||&lt;

**rebase対merge
-1人1リポジトリとかで作業している場合は、あまり意識せずに自由にやってもいい
--mergeの方が何をしていたかの履歴が残るので良いかもしれない
-rebaseを使う時の問題は、複数人複数リポジトリで作業している場合
--rebaseすると新しいコミットになる(SHA1も変わる)
--公開した(pushした)後にrebaseするのはまずい
-上記のようにrebaseしたいブランチに依存しているブランチがある場合も注意かもしれない
--うまくrebaseしていかないとグラフがどうなっているのかわからなくなりそう…
--マージを含むブランチがある場合のrebaseも同様

</body>
</day>
<day date="2012-04-24" title="">
<body>
*1335270486*[Git][Windows][備忘録]Pro Gitと入門Gitと入門gitと実用GitでGitの復習 無名ブランチ(detached HEAD)からの復活編

**前回までのあらすじ
-[http://d.hatena.ne.jp/kk_Ataka/20120305/1330951640:title]
-[http://d.hatena.ne.jp/kk_Ataka/20120311/1331472478:title]
-[http://d.hatena.ne.jp/kk_Ataka/20120315/1331816663:title]
-[http://d.hatena.ne.jp/kk_Ataka/20120410/1334058674:title]
-[http://d.hatena.ne.jp/kk_Ataka/20120423/1335185906:title]

**参考
-[http://progit.org/:title]
-入門Git
-入門git
-実用Git 

**無名ブランチ(detached HEAD)とは
要約すると&lt;span class=&quot;deco&quot; style=&quot;font-weight:bold;&quot;&gt;「過去のコミットの状態を眺めるための&quot;便利機能&quot;なのでここに永続的な変更をするなんてとんでもない！」&lt;/span&gt;という事らしい。

***無名ブランチ状態で作業するとどうなるか
ちょっと「ブランチにいると思いこんだまま無名ブランチで作業し、さーてmasterブランチに戻ってmergeするかぁ……はぁ！？」な状況を作り出してみる。

まずは無名ブランチの準備としてnobraブランチを作る。(これ以降の作業は、本当はnobraブランチでやっていきたいと思っている)
&gt;||
$ git checkout -b nobra
Switched to a new branch 'nobra'

$ touch nobra
$ git add nobra
$ git commit -m &quot;Add nobra&quot;
[nobra d62e4cb] Add nobra
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 nobra

$ git g
 * d62e4cb  (HEAD, nobra, master) Add nobra
 * 7ab5db8  (topic) Add message line 3
 * cf6c3d6  Add message line 2
 * 38f8aff  Add message line 1
 * 93b8e52  Add message line 4
 * 0b91a9f  Add message line 5
 * 15f636f  Add line number
 * fa9eabc  first commit

$ git br
   master d62e4cb Add nobra
 * nobra  d62e4cb Add nobra
   topic  7ab5db8 Add message line 3
||&lt;
次に、このnobraブランチのSHA1を指定してcheckoutする。
&gt;||
$ git ch d62e4cb
Note: checking out 'd62e4cb'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at d62e4cb... Add nobra
||&lt;
detached HEAD状態だよと教えてくれているようだ。このリビジョンのファイル一覧？　を見渡したり、実験的な変更やコミットができる。チェックアウトすれば他のブランチに影響を与えすにこの状態を作れる。変更を保持するために新しいブランチを作りたいなら、checkoutコマンドに-bつけて実行すればいいよ……って感じなのかな。ブランチはno branchと表示される。
&gt;||
$ git br
 * (no branch) d62e4cb Add nobra
   master      d62e4cb Add nobra
   nobra       d62e4cb Add nobra
   topic       7ab5db8 Add message line 3
||&lt;
この無名ブランチに対し変更をコミット。
&gt;||
$ echo &quot;no branch&quot; &gt;&gt; nobra
$ git add nobra
$ git com &quot;Add message nobra&quot;
[detached HEAD e45c786] Add message nobra
 1 files changed, 1 insertions(+), 0 deletions(-)
 
$ echo &quot;detached HEAD&quot; &gt;&gt; nobra
$ git add nobra
$ git com &quot;Add message nobra&quot;
[detached HEAD 3aec83c] Add message nobra
 1 files changed, 1 insertions(+), 0 deletions(-)
||&lt;
グラフで見るとe45c786, 3aec83cがもくもくと作られている。
&gt;||
$ git g
 * 3aec83c  (HEAD) Add message nobra
 * e45c786  Add message nobra
 * d62e4cb  (nobra, master) Add nobra
 * 7ab5db8  (topic) Add message line 3
 * cf6c3d6  Add message line 2
 * 38f8aff  Add message line 1
 * 93b8e52  Add message line 4
 * 0b91a9f  Add message line 5
 * 15f636f  Add line number
 * fa9eabc  first commit
||&lt;
さーて、masterにもどって変更をmergeするかー。((このPrevious HEAD position was ...というメッセージは無名ブランチからチェックアウトしないと表示されないようだ))
&gt;||
$ git checkout master
Previous HEAD position was 3aec83c... Add message nobra
Switched to branch 'master'
||&lt;
グラフを確認するとd62e4cb(masterブランチ)が先頭になっている……だと……。
&gt;||
$ git g
 * d62e4cb  (HEAD, nobra, master) Add nobra
 * 7ab5db8  (topic) Add message line 3
 * cf6c3d6  Add message line 2
 * 38f8aff  Add message line 1
 * 93b8e52  Add message line 4
 * 0b91a9f  Add message line 5
 * 15f636f  Add line number
 * fa9eabc  first commit
||&lt;
さっきの変更どこいったんだ！　

***無名ブランチの救出
コンソールを上へ上へ辿って行けばもしかしたら作業ログが残っていて、そこから無名ブランチになってしまったコミットを特定できるかもしれないけど、ここではgit reflogを使って救済してみる。
&gt;||
$ git reflog
...
d62e4cb HEAD@{6}: checkout: moving from 3aec83cdbfea0b1e96cf3c48937ab84eae1f4ec0 to nobra
3aec83c HEAD@{7}: commit: Add message nobra
e45c786 HEAD@{8}: commit: Add message nobra
...
||&lt;
見えなくなってしまったコミットは(今は)HEAD@{7}にあった！(checkoutしたりcommitすれば1ずつログがずれるから)　という事で、この変更が必要だった場合は、ここからトピックブランチでも作成して救出してやればよい。
&gt;||
$ git g
 * d62e4cb  (HEAD, nobra, master) Add nobra
 * 7ab5db8  (topic) Add message line 3
 * cf6c3d6  Add message line 2
 * 38f8aff  Add message line 1
 * 93b8e52  Add message line 4
 * 0b91a9f  Add message line 5
 * 15f636f  Add line number
 * fa9eabc  first commit
||&lt;
reflogで消えたコミットを確認する。
&gt;||
$ git reflog
...
d62e4cb HEAD@{8}: checkout: moving from 3aec83cdbfea0b1e96cf3c48937ab84eae1f4ec0 to nobra
3aec83c HEAD@{9}: commit: Add message nobra
e45c786 HEAD@{10}: commit: Add message nobra
d62e4cb HEAD@{11}: checkout: moving from nobra to d62e4cb
||&lt;
今はHEAD@{9}になっている。nobraブランチをうつしちゃおう。(新しいブランチを作成してもよい)
&gt;||
$ git branch --f nobra HEAD@{9}

$ git g
 * 3aec83c  (nobra) Add message nobra
 * e45c786  Add message nobra
 * d62e4cb  (HEAD, master) Add nobra
 * 7ab5db8  (topic) Add message line 3
 * cf6c3d6  Add message line 2
 * 38f8aff  Add message line 1
 * 93b8e52  Add message line 4
 * 0b91a9f  Add message line 5
 * 15f636f  Add line number
 * fa9eabc  first commit
||&lt;
3aec..が見えるようになった！　で、merge。
&gt;||
$ git merge nobra
Updating d62e4cb..3aec83c
Fast-forward
 nobra |    2 ++
 1 files changed, 2 insertions(+), 0 deletions(-)

$ git g
 * 3aec83c  (HEAD, nobra, master) Add message nobra
 * e45c786  Add message nobra
 * d62e4cb  Add nobra
 * 7ab5db8  (topic) Add message line 3
 * cf6c3d6  Add message line 2
 * 38f8aff  Add message line 1
 * 93b8e52  Add message line 4
 * 0b91a9f  Add message line 5
 * 15f636f  Add line number
 * fa9eabc  first commit
||&lt;
救出完了！

</body>
</day>
<day date="2012-04-28" title="">
<body>
*1335575351*[Jenkins][Sphinx][イベント]BPStudy#57に参加しました #bpstudy
**詳細: [http://connpass.com/event/365/:title]
-例の特許庁最適化計画プロジェクトを通してITビジネスの仕方を変えよう
というなかなかに興味深い内容だったので参加。

**第一部 新たな価値観へのITビジネス視点での転換 萩本順三さん
-政治的な話は無し
-私が技術顧問として最適化計画を見た時、「古いな～」と思った
--問題があるプロジェクトに入り込んで、どうするかというのが仕事
---火を吹いた時に入り込んでいく =&gt; はじめにオフィスへ入り込んで資料を見た時「これやめないんですか？」と聞いたほど
-かなりはじめの段階からダメと周りの人にも言っていたが……

***何が問題か？
-技術を特許庁の業務にどう活かすかの具体性がない
--xml使ったからどうなんの？
-業務モデルを1000名で書いてどうすんの？
-むしろ主役は特許庁なのでは？ =&gt; 放り投げ主義
-業務モデルは発注者の理解と覚悟の元作成するはずなのに！

***根底の問題は？
-IT業界の負のビジネス慣習
--ユーザ、開発両者のスキル不足
---お客さんに教えながらモデル化をしていくものなのに
-コスト配分が開発者寄りになり、たとえいいものを作ったとしてもユーザさんが使いこなせない
-うまく要件を引き出せないと、正しくないシステムができてしまう
-是正しなければ

***意識改革 コタツモデル
-ユーザから話を聞いてシステム開発に入るが、ユーザは必ず正しいのか
-以下の3つから&quot;将来&quot;の価値を取りに行く視点を持つ
--戦略的視点(偉い人)
--業務問題解決の視点(業務担当の偉い人)
--IT活用の視点(開発の出来る人)
-しかし、偉い人は現在の価値を取りに行きがちだし、業務担当の偉い人は業務問題解決の視点しか持っていないことが多い
-戦略的視点から業務解決、IT活用をしていくと、偉い人も「あ、俺業務知らなかったな」と感じで同じコタツに入ってくれる =&gt; 要求が収束する
-Howの手探り
--ビジネス戦略から
-Howの突き上げ
--テクノロジーを使うともしかしたら業務がいらなくなるかもしれない =&gt; 戦略に結びつける
-最適化
--切ってつなげて並行でスピーディに走らせる
-常に価値で問う
--設計ドキュメントなどは誰に対して価値があるのかを問う。説明できなければいらないじゃない？(ただし、技術的に説明できない場合もある)
-自分が持っている知識をお客さんに魅力的に見えるものとする
-自分のやりたいこと(How)を実現していこう(What)
--自動車メーカ、ファッション業界ではできているのになぜソフトウェア業界でできない
--システム要求の牢屋に閉じ込められていたらできっこない

***5年後のIT業界
-巨大システムの開発(一枚岩)からアクセサリ化に
--コーディネート化する必要がある
--開発者が一番強い。なぜならHowを握っているから
-ピラミッド型組織から分散自立型組織に
--優秀な人は残して優秀じゃない人は返す、返された人は価値に敏感になれるように
-学び、勇気を持って行動してください

**第二部 執筆プロジェクトの継続的ビルド [https://twitter.com/#!/shimizukawa:title=@shimizukawa]さん、[https://twitter.com/#!/cactusman:title=@cactusman]さん

***この本はSphinxで書きました
-執筆はreST
-社内レビューはhtml
-社外レビューはpdf
--見た目を自由に変えられる
--見た目を変えると誤記などに気づける

***編集さんに提出
-執筆者から編集さん(秀和システム)に渡すときに、秀和システムさんのフォーマットに合わせる必要がある
--Sphinxで要求されたフォーマットでビルドする(作るのに2日かかったが使いまわせるかなと思ったのでまあいいかな？)
-が、結局お蔵入りに

***まとめ
-提出現行の明確な仕様を決めておけばよかった
-編集と差分管理しやすいテキストで
-レビュは別のビューで
-環境は自動化で

***Jenkins
-Jenkinsのプラグインで文中のTODOを拾える
--TODOの状態がグラフでわかる！

**■■のススメ [https://twitter.com/#!/urasoko:title=@urasoko]さん
-以前高橋メソッドを使いLTで10分、今回は5分を切る
-SIer(大規模)につとめ、普段は調整等のお仕事をしていた……が、4/末日に「選職」しました
--「小さなチーム、大きな仕事」に感銘を受けた
--社会に何を求めるか、どうありたいか、何を成したいか
--会社の上でではなく、社会の上で選び続ける
--作りたいのは技術集団なのか、役人集団なのか
-結局LTは10分近く……

懇親会で萩本さんから、「御社の偉い人にも今回と同じような話する機会があったよ、結構感銘を受けてた(意訳)」と聞き衝撃を受けた。多分ホントにエライ人しかしらないんじゃないかなぁ。

ともあれ、萩本さんがFacebookで要求開発アライアンスの資料も公開([http://www.slideshare.net/kent4989/ss-12710218:title])されています。BPStudyの資料もアップされるとの事だった。これ読んで下から突き上げてみようかなぁ。
</body>
</day>
<day date="2012-05-21" title="">
<body>
*1337605575*[SlideShare][Heroku][Ruby][API]SlideShareのAPIを叩いてスライドをDLするRubyスクリプトをHerokuにデプロイした
**あらすじ
slideshareを社内から閲覧する事を禁じられているので、ワンクッションおいてスライドのpptを落とせるようにしたい

**参考サイト
-[http://www.slideshare.net/developers/documentation#get_slideshow:title]
とりあえず公式サイトを抑えておけばいけそう。

**流れ
***API申請
-slideshare -&gt; Developer &amp; APIのページからApply for API keyに移動
-ログイン or 新規アカウント作成
-Name、E-Mail、How do you want to use the API?を入力し送信。頑張って英文書く。
&gt;||
I want to get slideshare's slide from API.
||&lt;
-送信されたメールに貼られている&lt;span class=&quot;deco&quot; style=&quot;font-weight:bold;&quot;&gt;API Key&lt;/span&gt;と&lt;span class=&quot;deco&quot; style=&quot;font-weight:bold;&quot;&gt;Shared Secret&lt;/span&gt;を控える

***パラメータ
-slideshare -&gt; Documentationを見ながら必要なパラメータを調べる
|*api_key|さっきのAPI Key|
|*ts|タイムスタンプ((Set this to the current time in Unix TimeStamp format, to the nearest second(?).))|
|*hash|さっきのShared Secretとこれから取得するtsでハッシュを作る((Set this to the SHA1 hash of the concatenation of the shared secret and the timestamp (ts). i.e. SHA1 (sharedsecret + timestamp). The order of the terms in the concatenation is important.))|
|*(username)|登録ID|
|*(password)|パスワード|
全然関係ないけど、Documentationのページ内にあるi.e.って単語を初めて見たのでググってみた。[http://www.masahiko.info/life/archives/000799.html:title] that is ... すなわちとかそういう意味らしい。e.g.で例えば、for example的な。

**ソース
ソースはこんな感じ。
&gt;|ruby|
require 'openssl'
require 'uri'
require 'net/http'

url = 'http://www.slideshare.net/api/2/get_slideshow'
param = Hash.new
param[&quot;slideshow_url&quot;] = 'http://www.slideshare.net/gishi/wicket-presentation'
param[&quot;api_key&quot;] = 'XXXXXXXX'
param[&quot;sharedsecret&quot;] = 'XXXXXXXX'
# ts
param[&quot;ts&quot;] = Time.now.to_i.to_s
# hash
param[&quot;hash&quot;] = Digest::SHA1.hexdigest(param[&quot;sharedsecret&quot;]+param[&quot;ts&quot;])

uri = URI.parse(url)
Net::HTTP.new(uri.host).start do |http|
#Net::HTTP.new(uri.host, 80, ENV[&quot;PROXY&quot;], 8080).start do |http|
  uri_param = param.sort.map {|i|i.join('=')}.join('&amp;')
  
  res = http.get(uri.path + '?' + uri_param)
  puts res.body
end
||&lt;
成功するとこんな感じの内容が返ってくる。
&gt;|xml|
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;Slideshow&gt;
  &lt;ID&gt;579496&lt;/ID&gt;
  &lt;Title&gt;Wicket&amp;#20307;&amp;#39443;&amp;#35527;&lt;/Title&gt;
  &lt;Description&gt;&amp;#31532;1&amp;#22238;Wicket&amp;#21193;&amp;#24375;&amp;#20250;&amp;#12398;&amp;#12521;&amp;#12452;&amp;#12488;&amp;#12491;&amp;#12531;&amp;#12464;&amp;#12488;&amp;#12540;&amp;#12463;&amp;#30330;&amp;#34920;&amp;#36039;&amp;#26009;&lt;/Description&gt;
  &lt;Status&gt;2&lt;/Status&gt;
  &lt;Username&gt;gishi&lt;/Username&gt;
  &lt;URL&gt;http://www.slideshare.net/gishi/wicket-presentation&lt;/URL&gt;
  &lt;ThumbnailURL&gt;http://cdn.slidesharecdn.com/wicket-1220375587470160-8-thumbnail&lt;/ThumbnailURL&gt;
  &lt;ThumbnailSmallURL&gt;http://cdn.slidesharecdn.com/wicket-1220375587470160-8-thumbnail-2&lt;/ThumbnailSmallURL&gt;
  &lt;Embed&gt;&amp;lt;div style=&amp;quot;width:425px&amp;quot; id=&amp;quot;__ss_579496&amp;quot;&amp;gt;&amp;lt;strong style=&amp;quot;display:block;margin:12px 0 4px&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://www.slideshare.net/gishi/wicket-presentation&amp;quot; title=&amp;quot;Wicket&amp;#20307;&amp;#39443;&amp;#35527;&amp;quot;&amp;gt;Wicket&amp;#20307;&amp;#39443;&amp;#35527;&amp;lt;/a&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;object id=&amp;quot;__sse579496&amp;quot; width=&amp;quot;425&amp;quot; height=&amp;quot;355&amp;quot;&amp;gt;&amp;lt;param name=&amp;quot;movie&amp;quot; value=&amp;quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=wicket-1220375587470160-8&amp;amp;stripped_title=wicket-presentation&amp;amp;userName=gishi&amp;quot; /&amp;gt;&amp;lt;param name=&amp;quot;allowFullScreen&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&amp;lt;param name=&amp;quot;allowScriptAccess&amp;quot; value=&amp;quot;always&amp;quot;/&amp;gt;&amp;lt;param name=&amp;quot;wmode&amp;quot; value=&amp;quot;transparent&amp;quot;/&amp;gt;&amp;lt;embed name=&amp;quot;__sse579496&amp;quot; src=&amp;quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=wicket-1220375587470160-8&amp;amp;stripped_title=wicket-presentation&amp;amp;userName=gishi&amp;quot; type=&amp;quot;application/x-shockwave-flash&amp;quot; allowscriptaccess=&amp;quot;always&amp;quot; allowfullscreen=&amp;quot;true&amp;quot; wmode=&amp;quot;transparent&amp;quot; width=&amp;quot;425&amp;quot; height=&amp;quot;355&amp;quot;&amp;gt;&amp;lt;/embed&amp;gt;&amp;lt;/object&amp;gt;&amp;lt;div style=&amp;quot;padding:5px 0 12px&amp;quot;&amp;gt;View more &amp;lt;a href=&amp;quot;http://www.slideshare.net/&amp;quot;&amp;gt;presentations&amp;lt;/a&amp;gt; from &amp;lt;a href=&amp;quot;http://www.slideshare.net/gishi&amp;quot;&amp;gt;Hiroto Yamakawa&amp;lt;/a&amp;gt;.&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&lt;/Embed&gt;
  &lt;Created&gt;Tue Sep 02 10:14:12 -0500 2008&lt;/Created&gt;
  &lt;Updated&gt;Tue Sep 02 10:16:15 -0500 2008&lt;/Updated&gt;
  &lt;Language&gt;ja&lt;/Language&gt;
  &lt;Format&gt;ppt&lt;/Format&gt;
  &lt;Download&gt;1&lt;/Download&gt;
  &lt;DownloadUrl&gt;http://s3.amazonaws.com/ppt-download/wicket-1220375587470160-8.ppt?response-content-disposition=attachment&amp;amp;Signature=ABs151smgWZ9213%2FyFq81fnMc6A%3D&amp;amp;Expires=1328606581&amp;amp;AWSAccessKeyId=AKIAJLJT267DEGKZDHEQ&lt;/DownloadUrl&gt;
  &lt;SlideshowType&gt;0&lt;/SlideshowType&gt;
  &lt;InContest&gt;0&lt;/InContest&gt;
&lt;/Slideshow&gt;
||&lt;
おー取れた。んで、xmlの中のDownloadUrlからpptをゲットできた！　これをSinatraでWebアプリケーションにしてHerokuにデプロイすれば職場から行けるかな！？

→いけた！　自分の中ではお役立ち。[http://tycoon-slidedown.heroku.com/:title]
</body>
</day>
<day date="2012-05-28" title="">
<body>
*1338209339*[Ruby][イベント][Jenkins][Redmine]Jenkins,Redmine使いこなし勉強会に参加しました と、ちょっとプラグイン作ってみた #jen_red

**概要
-[http://connpass.com/event/500/:title]
前半は発表のメモ。後半は実際にプラグイン作ったりインストールしたりのメモ。

**Redmineプラグイン活用入門 - @[http://twitter.com/Kokawa_Takashi:title]さん
&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;注意:Redmine開発環境が安定していないので、すぐ陳腐化してしまう事がある！&lt;/span&gt;

***Redmineにおける問題
-Redmineの設定で解決
-運用で解決
-ツール自体を拡張して解決
--プラグインの探し方・おすすめ
--REST APIを使って外部から
--プラグインを作る

***プラグインの探し方・おすすめ
-[http://www.r-labs.org/projects/r-labs/wiki/Redmine%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E9%9B%86:title]
-[http://www.redmine.org/plugins:title]
-一つだけおすすめを… Wiki Extensions Plugin
--オートプレビュー
--任意のページをメニューに
--任意のページを埋め込み 等々…
-他のおすすめ
--CodeRevirew
--Backlogs
--TimeTracker

***REST API
-自動でチケットを作ったりできる
-チケット一覧を取得できたり
-この一連の流れができたらJenkinsに任せる事ができる
--期日が間近のチケットのメール通知などもできる

***プラグインを作る
-Redmine1.4 or 2.0が対象(Ruby1.9,Bundler対応している/これ以前はしていない)
-プラグイン開発環境構築がつらいので

***Ruby環境
-WindowsならRubyInstaller + DevKit
-MacならRVM
--自分でも少しまとめている [http://d.hatena.ne.jp/kk_Ataka/20111204/1323009249:title]

***Redmineインストール
-公式を参考に
--自分でも少しまとめている [http://d.hatena.ne.jp/kk_Ataka/20110501/1304204171:title]
--同じく [http://d.hatena.ne.jp/kk_Ataka/20110907/1315401886:title]
-rmagickを除外する
&gt;||
bundle install -without development test rmagick -path vendor/bundle
||&lt;

***Rubyデバッグ環境
-ruby-debug-ide…だがこの環境ではうまく動かなくなってしまった
-ruby-debug-base19が必要らしいが、そのまま落としてきても動かない
--preオプションを入れる
&gt;|?|
gem install ruby-debug-base19 --pre
gem install ruby-debug-ide --pre
||&lt;

***NetBeans
-ただし、公式サポートは6.9.1が最終

***一つだけシンプルなプラグインを
-Redmineのメニューからヘルプを消す
-スケルトンを作ってinit.rbに一文足すだけ
--最後に試してみるよ

**Jenkinsプラグイン活用入門- @[http://twitter.com/cactusman:title]さん
***Jenkinsとは
-高性能Cron

***プラグインの探し方
-探す前に…
-shやbatなどをうまく組み合わせられないかなどをまず考える
-Jenkins自体の昨日もうまく使う
-プラグイン自体は本家に登録されている
-Jenkins Plugin Hub
--ソフト、ツール名などでとりあえず引っ掛けてみる

***プラグインの使い方
-すごくメンテされているものとほったらかされているものでまちまち
-コミットやDL数を見てみる
-TackScanerPlugin
--キーワードを拾う(TODOなど)
--最後に入れてみる
-DickUsagePlugin
--Jenkinsのディスク使用量を見る
-JobConfigHistoryPlugin
--設定ファイルのバックアップ、差分表示

***プラグインのハック
-エクステンションポイントを継承する
--Notifierを継承すれば通知系の事ができる
-mvnにおまじないを追加する
-Jenkinsの公式Pluginが参考になる

**実際にやってみる(Redmine)
メニューの一部を消してみる。

***環境
-Windows XP
-Ruby 1.8.7
-Redmine 1.0.0.stable (SQLite)

***手順
-はじめにRedmine Pluginのスケルトンを作成する。名前はdelete_menuとした
&gt;||
$ cd REDMINE_ROOT
$ ruby script\generate redmine_plugin delete_menu
./script/../config/../vendor/rails/railties/lib/rails/gem_dependency.rb:119:Warning: Gem::Dependency#version_requirements is deprecated and will be removed on or after August 2010.  Use #requirement
      create  vendor/plugins/redmine_delete_menu/app/controllers
      create  vendor/plugins/redmine_delete_menu/app/helpers
      create  vendor/plugins/redmine_delete_menu/app/models
      create  vendor/plugins/redmine_delete_menu/app/views
      create  vendor/plugins/redmine_delete_menu/db/migrate
      create  vendor/plugins/redmine_delete_menu/lib/tasks
      create  vendor/plugins/redmine_delete_menu/assets/images
      create  vendor/plugins/redmine_delete_menu/assets/javascripts
      create  vendor/plugins/redmine_delete_menu/assets/stylesheets
      create  vendor/plugins/redmine_delete_menu/lang
      create  vendor/plugins/redmine_delete_menu/config/locales
      create  vendor/plugins/redmine_delete_menu/test
      create  vendor/plugins/redmine_delete_menu/README.rdoc
      create  vendor/plugins/redmine_delete_menu/init.rb
      create  vendor/plugins/redmine_delete_menu/lang/en.yml
      create  vendor/plugins/redmine_delete_menu/config/locales/en.yml
      create  vendor/plugins/redmine_delete_menu/test/test_helper.rb
||&lt;
-vendor/pluginにredmine_delete_menuというフォルダができている
&gt;||
$ ls
...
redmine_delete_menu/
...
$ cd redmine_delete_menu
$ ls
README.rdoc assets/     db/         lang/       test/
app/        config/     init.rb*    lib/
||&lt;
-init.rbに例の一文を挿入
&gt;|ruby|
 Redmine::Plugin.register :redmine_delete_menu do
   ...
   
+  delete_menu_item :top_menu, :help
 end
||&lt;
-そして起動
&gt;||
$ cd REDMINE_ROOT
$ ruby script\server -e production
=&gt; Booting WEBrick
=&gt; Rails 2.3.5 application starting on http://0.0.0.0:3000
./script/../config/../vendor/rails/railties/lib/rails/gem_dependency.rb:119:Warning: Gem::Dependency#version_requirements is deprecated and will be removed on or after August 2010.  Use #requirement
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2012-05-28 19:15:50] INFO  WEBrick 1.3.1
[2012-05-28 19:15:50] INFO  ruby 1.8.7 (2010-12-23) [i386-mswin32]
[2012-05-28 19:15:50] INFO  WEBrick::HTTPServer#start: pid=4640 port=3000
||&lt;
-http://localhost:3000 にアクセスすると…おお！　消えてる！

***環境その2
Ruby1.9、Redmine1.4でもやってみるかー。
-Windows XP
-Ruby 1.9.3
-Redmine 1.4.0.stable (SQLite)

***手順その2
-いきなりgenerateしようとしたらbundle installしろと言われた
&gt;||
$ ruby script\generate redmine_plugin delete_menu
Some gems may need to be installed or updated.
Please run `bundle install --without development test`.
||&lt;
-なのでbundle install
&gt;||
$ bundle install --without development test --path ./vendor/bundle
Fetching source index for http://rubygems.org/
Installing rake (0.9.2.2)
Installing activesupport (2.3.14)
Installing rack (1.1.3)
Installing actionpack (2.3.14)
Installing actionmailer (2.3.14)
Installing activerecord (2.3.14)
Installing activeresource (2.3.14)
Installing coderay (1.0.6)
Installing i18n (0.4.2)
Installing mysql2 (0.2.18)
Installing net-ldap (0.3.1)
Installing pg (0.13.2)
Installing rails (2.3.14)
Installing rmagick (2.13.1) with native extensions
||&lt;
-rmagickが入らず止まりっぱなし……そういえば、rmagickは使わなければwithoutしてしまってもいいです的な事を言われていた気がするのでそれをプラス
&gt;||
$ bundle install --without development test rmagick --path ./vendor/bundle
Fetching source index for http://rubygems.org/
Using rake (0.9.2.2)
Using activesupport (2.3.14)
Using rack (1.1.3)
Using actionpack (2.3.14)
Using actionmailer (2.3.14)
Using activerecord (2.3.14)
Using activeresource (2.3.14)
Using coderay (1.0.6)
Using i18n (0.4.2)
Using mysql2 (0.2.18)
Using net-ldap (0.3.1)
Using pg (0.13.2)
Using rails (2.3.14)
Installing ruby-openid (2.1.8)
Installing sqlite3 (1.3.6)
Installing tzinfo (0.3.33)
Using bundler (1.0.21)
Your bundle is complete! It was installed into ./vendor/bundle
||&lt;
-再度。先ほどbundlerを使ったのでbundle exec
&gt;||
$ bundle exec ruby script\generate redmine_plugin delete_menu
C:/redmine-1.4.0/vendor/bundle/ruby/1.9.1/gems/activesupport-2.3.14/lib/active_support/inflector.rb:3:in `&lt;top (required)&gt;': iconv will be deprecated in the future, use String#encode instead.
NOTE: Gem.source_index is deprecated, use Specification. It will be removed on or after 2011-11-01.
Gem.source_index called from C:/redmine-1.4.0/vendor/bundle/ruby/1.9.1/gems/rails-2.3.14/lib/rails/gem_dependency.rb:21.
NOTE: Dependency.new w/ a regexp is deprecated.
Dependency.new called from C:/redmine-1.4.0/vendor/bundle/ruby/1.9.1/gems/rails-2.3.14/lib/rails_generator/lookup.rb:211
NOTE: Gem.cache is deprecated, use Gem::source_index. It will be removed on or after 2011-08-01.
Gem.cache called from C:/redmine-1.4.0/vendor/bundle/ruby/1.9.1/gems/rails-2.3.14/lib/rails_generator/lookup.rb:212.
NOTE: Gem.source_index is deprecated, use Specification. It will be removed on or after 2011-11-01.
Gem.source_index called from C:/rubies/Ruby-193-p0/lib/ruby/1.9.1/rubygems.rb:1154.
NOTE: Gem::SourceIndex#search is deprecated with no replacement. It will be removed on or after 2011-11-01.
Gem::SourceIndex#search called from C:/redmine-1.4.0/vendor/bundle/ruby/1.9.1/gems/rails-2.3.14/lib/rails/vendor_gem_source_index.rb:119.
NOTE: Gem::SourceIndex#search is deprecated with no replacement. It will be removed on or after 2011-11-01.
Gem::SourceIndex#search called from C:/redmine-1.4.0/vendor/bundle/ruby/1.9.1/gems/rails-2.3.14/lib/rails/vendor_gem_source_index.rb:119.
NOTE: Gem.cache is deprecated, use Gem::source_index. It will be removed on or after 2011-08-01.
Gem.cache called from C:/redmine-1.4.0/vendor/bundle/ruby/1.9.1/gems/rails-2.3.14/lib/rails_generator/lookup.rb:234.
NOTE: Gem.source_index is deprecated, use Specification. It will be removed on or after 2011-11-01.
Gem.source_index called from C:/rubies/Ruby-193-p0/lib/ruby/1.9.1/rubygems.rb:1154.
NOTE: Gem::SourceIndex#each is deprecated with no replacement. It will be removed on or after 2011-11-01.
Gem::SourceIndex#each called from C:/redmine-1.4.0/vendor/bundle/ruby/1.9.1/gems/rails-2.3.14/lib/rails/vendor_gem_source_index.rb:123.
NOTE: Gem::SourceIndex#each is deprecated with no replacement. It will be removed on or after 2011-11-01.
Gem::SourceIndex#each called from C:/redmine-1.4.0/vendor/bundle/ruby/1.9.1/gems/rails-2.3.14/lib/rails/vendor_gem_source_index.rb:124.
      create  vendor/plugins/redmine_delete_menu/app/controllers
      create  vendor/plugins/redmine_delete_menu/app/helpers
      create  vendor/plugins/redmine_delete_menu/app/models
      create  vendor/plugins/redmine_delete_menu/app/views
      create  vendor/plugins/redmine_delete_menu/db/migrate
      create  vendor/plugins/redmine_delete_menu/lib/tasks
      create  vendor/plugins/redmine_delete_menu/assets/images
      create  vendor/plugins/redmine_delete_menu/assets/javascripts
      create  vendor/plugins/redmine_delete_menu/assets/stylesheets
      create  vendor/plugins/redmine_delete_menu/lang
      create  vendor/plugins/redmine_delete_menu/config/locales
      create  vendor/plugins/redmine_delete_menu/test
      create  vendor/plugins/redmine_delete_menu/README.rdoc
      create  vendor/plugins/redmine_delete_menu/init.rb
      create  vendor/plugins/redmine_delete_menu/config/locales/en.yml
      create  vendor/plugins/redmine_delete_menu/test/test_helper.rb
||&lt;
-deprecateがやまほど出たけど、一応スケルトンは作れたみたい。で、init.rbを編集。ここは同じ
&gt;|ruby|
 Redmine::Plugin.register :redmine_delete_menu do
   ...
   
+  delete_menu_item :top_menu, :help
 end
||&lt;
-で、起動。ここでもbundle exec
&gt;||
$ bundle exec ruby script\server -e production
C:/redmine-1.4.0/vendor/bundle/ruby/1.9.1/gems/activesupport-2.3.14/lib/active_support/inflector.rb:3:in `&lt;top (required)&gt;': iconv will be deprecated in the future, use String#encode instead.
=&gt; Booting WEBrick
=&gt; Rails 2.3.14 application starting on http://0.0.0.0:3000
NOTE: Gem.source_index is deprecated, use Specification. It will be removed on or after 2011-11-01.
Gem.source_index called from C:/redmine-1.4.0/vendor/bundle/ruby/1.9.1/gems/rails-2.3.14/lib/rails/gem_dependency.rb:21.
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2012-05-28 20:03:32] INFO  WEBrick 1.3.1
[2012-05-28 20:03:32] INFO  ruby 1.9.3 (2011-10-30) [i386-mingw32]
[2012-05-28 20:03:32] INFO  WEBrick::HTTPServer#start: pid=3248 port=3000
||&lt;
1.4台でもいけた！

**実際にプラグインを入れてみる(Jenkins)
Task Scanner Pluginを入れてみよう。

***環境
-Windows XP
-Jenkins 1.450

***手順
-Jenkinsの管理 =&gt; プラグインの管理 =&gt; 利用可能タブ =&gt; Task Scanner Pluginをチェックしインストール
--Static Code Analysis Plug-insも同時にDLされるみたい
-再起動
-Jenkinsプロジェクト =&gt; 設定 =&gt; ビルド後の処理 =&gt; 未解決タスクの集計((ローカライズされてた))にチェック
--集計対象: source/*.rst
---今回はSphinxのドキュメントソース内のTODOを拾うので
--集計対象外: source/*.py
---conf.pyなどは除外する
--タスクタグ 優先度 Normal: //TODO
---ドキュメント内の//TODOを探してもらう。優先度は適当
--高度な設定を開きデフォルトのエンコーディング: UTF-8
-保存してビルド
-一度ビルドするとJenkinsプロジェクトのメニューに【未解決タスク】のリンクが表示される
--今回設定した//TODOがまとめられてる！
--後、//TODO hogehogeとキーワードの後ろに何か書いておくとメッセージとしてどんなTODOなのかも表示される！ 

</body>
</day>
<day date="2012-06-03" title="">
<body>
*1338724924*[TDD][RSpec][Ruby][イベント]TDD Boot Camp 大阪 1.0( #tddbc ) に参加しました
**概要
-[http://atnd.org/events/28762:title]
-なかなかスケジュールの都合がつかず、近場で開催されても参加できないことが多かったので、「次こそは！」と思った矢先の大阪開催だったので参加しました

**まとめ
-楽天カフェテリア＠大阪、非常に素晴らしい会場でした。&lt;span class=&quot;deco&quot; style=&quot;font-weight:bold;&quot;&gt;素晴らしい会場でした！&lt;/span&gt;
--カフェテリアは木製の椅子のため、半日近いイベントの場合腰が悪い人は座布団を持って行ったほうがいいですね
-TDDとペアプロに関しての経験をつむことができた
--よしおかさん、関さん、和田さんを独占していたRubyのテーブル…
---その中でも恐れ多くも関さんと和田さんを独占してしまった。会場撮影されていた様子^^; [http://via.me/-1nhb1te:title]
--成果物はStep3のはじめまで[https://github.com/gosyujin/tddbc:title=GitHub]にあげました
-他の言語でどう書くか、書き方などを見て、自分のメイン言語のテスティングフレームワークでも出来るかな？　と調べる事が大事
-[http://twitpic.com/9rz6w1:title=ねんがんのグリーンバンドを手に入れたぞ！]
-TDDは一人でも出来るので、どんどん書いて量を質に転化させていく！
-主催の@[https://twitter.com//bufferings:title] さん、TAの皆さん、スピーカーである@[https://twitter.com/t_wada:title] さん、@[https://twitter.com//hyoshiok:title] さん、@[https://twitter.com//m_seki:title] さん、Ruby島の皆さんお疲れ様でした！

以下、時系列にそったまとめ


**TDDのこころ @[https://twitter.com//t_wada:title] さん
***BootCampとは
-新兵に教官が優しく教える
-しかしスライドの画像((ビリーズブートキャンプ))は2012年現在もはや厳しい…

***今日やること
-ペアプログラミングを体験してみる
-コードレビュー大会
--同じコードを同僚と解くという機会はほぼない
--同じお題を他の人はどう考えるのか、他の言語ではどうなるのか

***ふりかえり
-KPT形式でフィードバック

***ソフトウェア開発の三本柱
-バージョン管理、テスティング、自動化
--&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;RPGのノーセーブクリア＝バージョン管理なしの開発&lt;/span&gt;
--今コードが動いているのか動いていないのか＝テスティング
--人間が手作業でやっているものをシェル化、Jenkinsで回したりで機械に任せる＝自働化、自動化
---機械がうまくいってない時だけ教えてくれる

***「テスト」とは
-誰が、なんのためにテストをするのかで簡単に分類
--Developer Testing
---開発者が開発促進のため
--Customer Testing
---顧客が進捗管理のため(受入テストとか)
--QA Testing
---品質保証担当者が品質保証のため

***「TDD」とは
-テスト駆動開発入門 ケント・ベック
-動く、きれいなコードへ
--そこに至るための道へは？
---きれいな設計をして、それを実装して、それが動作する…きれいな設計とは？
-&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;動かすことで初めてわかることがソフトウェア開発にはとても多い&lt;/span&gt;
--なら早く超えよう(ただしここで止まると技術的負債になる)

***TDDのサイクル
-テストを書き
-テストを実行して失敗させ(Red)
-目的のコードを書き
-テストを成功させ(Green)
-そのテスト通るまま中を綺麗にしていく(Refactor)
-これを繰り返す

***TDDのやり方
-大きな問題は切り分けて1つずつ
-たくさんの問題も1つずつ
-何をテストすればよいのか
--開発を進めにくくする要因→何かわからないもの、不安

***TDDをすることにより
-即座にフィードバックを得る
-書いたコードへの自信持つ
-これから書くコードに自信を持つ

***TDDの真の目的
-不安の克服
-&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;健康&lt;/span&gt;
--コードの健康=仕様変更に対応できる
--チームの健康=仕様変更に備える事ができる

**ペアプロ デモ(FizzBuzz)
-ゴールから書く！
--Fizzの場合
---何がゴール？
---Fizzが返る
---どうなった時Fizz？
---…としていく
-テストコードのテストってどうするの？
--テストコードと実装コードを互いにテストしあう！
---そのタイミングは実装する前にやってしまう、仮実装してしまう
-実際にペアプロのデモを第三者視点で見て、以下のようなことを思った
--文化の違いをどう解決していくか
---エディタ、キーバインド、などなど
--細かなTipsが共有されていく
---「xxはyyっていうショートカットで出せますよ」「知らんかった…」
--ナビゲータって一人で仕事をしているときはやる事がないので結構難しそう…

**ペアプロ
-Ruby島は4人でした
--@[https://twitter.com//urimaro:title] さん、@[https://twitter.com//gnnk:title] さん、@[https://twitter.com//koko_u:title] さんと
-お題はこれ。結構複雑 [http://devtesting.jp/tddbc/?TDDBC%E5%A4%A7%E9%98%AA:title]
-テーブルにバリバリ使ってるぜ！　という人がいなかったのでどう組もうかー相談していたら、なんとよしおかさんと関さんが「Ruby席に混ぜて」という状況に
--恐れ多くも関さんとペアプロさせて頂く事態に((((;゜Д゜)))
-RSpecでどうテスト書こうかというところで、どういう単位でテストを作るかのような話になり、色んな書き方があるのだなと感じました。
--僕は「小さい自前のスクリプトに対してのテスト」くらいの使い方しかしていなかったから一個一個の振る舞いに対して1つずつit &quot;～できる、it &quot;～する&quot;と実装していこうと考えていた
--対して、関さんは一つのテストをシナリオで考えていたので、はじめにこうしてこうやって最後にこうという感じ

**昼休み
-楽天デリバリによるお弁当サービス
--結構種類が豊富だった

**昼休み2 実際の事例(和田さんの午前セッションの続き)
-TDDを採用したときのTDDを採用していない類似プロジェクトと比較
--例えばIBM、15%~20%くらいテストコードのための実装時間が増えたが、4割くらい欠陥が減った
--Visual Studioがすごい！欠陥密度0.09
-&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;テストコードを書く時間は増えるが、軽微なミスが減るため、デバッグの工数は減る→トータルで開発工数を減らす事ができると考えられる&lt;/span&gt;

**昼休み3 LT
-@[https://twitter.com//gab_km:title]さん、@[https://twitter.com//irof:title]さん のLT

**午後の部開始 QA
-テストメソッドの名前はどうやって考えているか
--日本語で書いている、英語の場合はxx is … when …
-テスト名のテストの中身が重複していたらDRY的にはどう？
--&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;RSpecの場合構造だけでテストの意味がわかるようにしている&lt;/span&gt;
--入れ子構造で意味がわかるようにするのが最近のテストのトレンド
--状況は詳しく書くけど何をの部分はサッパリと書く
--enclosed
-プライベートメソッドのテストをしたい…
--プライベートメソッドはパブリックメソッド経由でテストできるはずなので、プライベートメソッドをテストしたいといっている時点で設計がおかしい

**開発者の皆さん、テストを書こう よしおかさん
***事例 Oracle8の開発現場
-95年~2000年
-Sun Workstation～
-ファイルの仮想化、一人で複数のブランチを持てる
-開発プロセス
--開発者は要求を自分で定義する
---リファレンスマニュアルのベース
--設計する
--実装する
--デイリービルド、リグレッションテスト
--安定化プロセス
--コードフリーズ(重大なバグ以外変更しない)
-プログラマ
--設計者が実装者でテスタ
---一つの機能に関して世界で一番知ってる
-デイリービルド
-リグレッションテスト
-安定化プロセス
--バグ修正だけ
--バグや不具合はリリースノートに
-学んだこと
--デイリービルドによって常に動作が確認できる

***事例2 DEC Rdb
-米国で開発されたソフトウェアを日本語へ
-ソフトウェア国際化のあるべき姿の議論

***事例3 日本語COBOL
-チェックインの数やバグの数、修正済みバグの数を手書きで書いていた
-新人(よしおかさん)のしつけ
--「プログラム書きました」「チェックインした？」「あ、してません」「」など
-&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;デバッグの仕方、質問の仕方も教わった&lt;/span&gt;

***Samba3.0国際対応
-2.xから3.0での日本語の問題
-&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;テストをどんどん作ってバグを登録しまくり、コミュニティに入り込んでいった&lt;/span&gt;
-小さいパッチをちょこちょこと
-OSSでもテストファーストで出来た

**ペアプロ午後の部
-後ほど発表があるということで関さん離脱。ありがとうございました
--なんとバトンタッチは和田さん((((;゜Д゜)))
-和田さんが午前中に書いていたテストをガンガン洗練させていく！
--黄金の回転で一番難しいと思っているRefactorの部分を間近で見ているのでマジでためになる！
-今回教えて頂いたのは&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;itの中は簡潔になるように心がける&lt;/span&gt;というもの
--テストのための準備をbeforeで書く！
--contextでは「この時、これを確認、これを確認」レベルで済ませるように書く。
---contextの中身はlet, its, itsで！
-という事らしい。確かに見やすい
-これで、他の状態の時にこうあるべきというのも一行追加でいける
&gt;|ruby|
describe &quot;投入金額に注目&quot; do
    before do
      @vending = Vending.new
      @change = @vending.enter(input)
    end
    subject { @vending }

    context &quot;だめな硬貨だけのとき&quot; do
      let(:input) { [1,5,2000] }
      it { @change.should == [1,5,2000] }
      its(:show) { should == 0 }
    end

    context &quot;1000円札を入れたとき&quot; do
      let(:input) { [1000] }
      it { @change.should == [] }
+     its(:show) { should == 1000 } ＃この状態の時にも
    end
||&lt;

**レビュー
-C++, C#, Groovyのチーム
--他の言語でこうやってますとあったものがRSpecで出来るか

**TDDとは 関さん@[https://twitter.com//m_seki:title]
-XP10年
-The dRuby Book
-Legendary Japanese Ruby hacker

***TDDのおさらい
-今日楽しかった？

***TDDのサイクル
-次の目標を考える
-その目標を示す
-黄金の回転…
--これを繰り返す

***TDDはなんだっけ
-テストによって導かれた開発の事
-今日のは実装例の一つかも

***TDDの変形
-何かを引く
--xUnitを引いてみる、どうなるか
---すぐに準備出来ない複雑なUIなど
--顧客テストをxUnitなしで
---JaSST'04
---毎日増えるテストを毎日飛び越える(忍者の修行)
-何かをたす

***&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;もうひとつのテスト&lt;/span&gt;
-Checking
--既知の情報の確認
-Testing
--新しい情報、未知の情報を探す

***ご提案
-Red Green Refactor
--ちょっとずつ仮設の上に仮設を重ねる
-&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;Destroy&lt;/span&gt;
--この実装ならバグが出るだろみたいなのを
--たまに破壊的な思考を持ち込む

**QA
-assertなんとかの効率的な探し方
--Javadoc見れ
-レガシーコードに対するTDD
--レガシーコード改善ガイドおすすめ
--外側から攻める。Sambaの時はそうやった(よしおかさん)
-荒い粒度のテストとは
--画面に近いところ、とか入出力とか
--単体テストやりにくいテスト(レガシーコード)にたいしてやりやすい表面から攻めていく
-テストの期待値を作るのに困ったこと
--input, outputのリストを書く
--ソフトウェアテスト技法ドリル読む
-TDDの文化がないところでどう根付かせるか
--毎日テストが僕らを守ってくれると提唱した
--まずは自分から、自信をつけてから広めよう

***KPT
-会場よかった
-会場盛り上がってた
-TDD体験できてよかった
-ペアプロも体験できてよかった
-TAがたくさんいて聞きやすかった
-Groovy
-知らない言語のテストコード、フレームワークを見れてよかった
-社内に広める自信がついた＞Groovy？
-Groovy楽しかった
-Vimに詳しくなった
-Groovyいいよ
--などなど
Groovy人気がすごい。

**終わりに 和田さん
-ペアプログラミングをやってテストのサイクルを回す
-コードレビュー大会
--「あの言語でこんな事出来るんだ」発見→「俺の言語でもできんじゃん！」
-黄金の回転
--&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;各象限を越えるときの心持ち&lt;/span&gt;
-本をたどる
-2人目がいないので広めるのに心が折れちゃう
--まず一人でやって見せて背中を見せる
-量は質に転化する

**そして懇親会へ…
-ピザが一瞬でとけた

</body>
</day>
<day date="2012-06-19" title="">
<body>
*1340106125*[Jenkins][備忘録]JenkinsでAdmin権限を持つユーザのパスワードを全て忘れた時の復旧方法

**あらすじ
-ローカルで動かしているJenkinsでAdministrator権限を持っているユーザ、およびそのパスワードを忘れたので、色々な事ができなくなった
-また、Administrator権限を持つユーザがいない = Jenkinsの管理画面が開けなくなった事で権限復旧もできなくなった

**環境
-Windows XP
-Jenkins 1.470
--ユーザ情報: Jenkinsのユーザデータベース
--権限管理: 行列による権限設定
--ローカルで運用している
--JenkinsはWindowsサービスに登録している

**原因と解決手順
***気づき
-プラグインを入れようと思ったら、なんでかJenkinsの管理リンクが見当たらなくなった
-管理画面のアドレスは /manage なので直にアクセスしてみる
-Firefoxだとこんなエラーが出た((なので、はじめは格納しているデータが壊れちゃったのかと思った))
&gt;||
！　内容符号化 (Content-Encoding) に問題があります
　　不正または不明な形式で圧縮されているため、ページを表示できません。

　・この問題を Web サイトの管理者に報告してください。
　[再試行]
||&lt;
-試しにChromeでもやってみたがこう
&gt;||
このウェブページにアクセスできません

http://localhost:8080/manage のウェブページは一時的に停止しているか、
新しい http://localhost:8080/manage に移動した可能性があります。

エラー 330 (net::ERR_CONTENT_DECODING_FAILED): 不明なエラーです。
||&lt;
-まさかのIE6。ログイン画面からレイアウト崩れてて(さすがにサポートしてないよなぁ)とか思いつつアクセスすると…
&gt;||
アクセスできません
kk_Ataka には、Administer パーミッションがありません。
||&lt;
&lt;span class=&quot;deco&quot; style=&quot;font-weight:bold;&quot;&gt;なんだと！？&lt;/span&gt;　…でも管理画面にいけないんだから、権限も振れないよ。どうしよう。

***解決策
-とりあえず、Jenkinsのディレクトリをユーザ名(kk_Atakaなど)で検索してみた…((権限設定などを記載しているファイルがある可能性を願って。))
-すると引っかかったのはJenkinsのルートにある &lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;config.xml&lt;/span&gt; と大量の build.xml
--build.xml は実行したユーザを情報として持っているらしい。が、今回は関係ない
-config.xml を見てみる
--&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;authorizationStrategy&lt;/span&gt; タグの中に permission タグがあり、ここに &lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;hudson.model.Computer.Configure:kk_Ataka&lt;/span&gt; みたいに権限を設定してそうな箇所を発見！
--同じ設定(ユーザ情報、権限管理など)で安定稼動している他のJenkinsのconfig.xmlと目grepをかけてみる
--いかにもAdministrator権限を司っていそうな設定を発見！　そして、これが書かれていなかった！
&gt;||
&lt;permission&gt;hudson.model.Hudson.Administer:USER&lt;/permission&gt;
||&lt;
-念のため、サービスからJenkinsをいったん停止し、上記タグを追加後、起動
-アクセスできた！

***最後に
-上述の権限管理の所、全体のAdministratorを全てチェック空にすると今回の状況が再現できるらしい(イメージはプロジェクト単位の権限設定)
f:id:kk_Ataka:20120619203011j:image
-Administrator権限を持つユーザが0のJenkinsって運用的には有りなんだろうか
--プラグイン増やさない、アップグレードしない場合とかなら有り？
-今回の復旧手段はかなり荒業っぽいなぁ
--第三者がひょいひょい己にAdministrator権限付加できて良い？
---Unixとかならファイルのパーミッションとかきちんと設定できるから大丈夫？
---ローカルならでは？ 

</body>
</day>
<day date="2012-07-12" title="">
<body>
*1342098141*[Fluentd][備忘録][Ruby]Fluentdというログ収集ツールを使ってApacheのログを取得するまで

**あらすじ
-Twitterで@[https://twitter.com/tosikawa:title=tosikawa]さんにこんなツールあるよ、と教えてもらった
-…が、未見だったためすぐググる
-とりあえずどんなものか動かしてみる事に

***Fluentdとは
&gt;http://fluentd.org/&gt;
Log everything in JSON
&lt;&lt;
Oh...シンプルイズベスト…。
&gt;&gt;
Fluentd is a log collector daemon written in Ruby. Fluentd receives logs as JSON streams, buffers them, and sends them to other systems like MySQL, MongoDB, or even other instances of Fluentd.
&lt;&lt;
Rubyで作られたログ収集ツール。ただし、JSONで……？

**参考サイト
-[http://fluentd.org/:title]
--公式のDocumentationがSphinx
-[http://d.hatena.ne.jp/viver/20110929:title]
-[http://d.hatena.ne.jp/wyukawa/20120207/1328625443:title]
-[http://d.hatena.ne.jp/zakihaya/20120616/1339856226:title]
-[http://d.hatena.ne.jp/fat47/20120426/1335428063:title]
-[http://shinobra.com/2012/02/sawanoboly/gluent_getting_start:title]

**環境
-CentOS 6.2
-Ruby 1.9.3
-RubyGems 1.8.21

**手順
とりあえずbundlerで動かしてみるためにGemfileを作成。
&gt;||
$ cat Gemfile
source :rubygems
source &quot;http://rubygems.org&quot;

gem 'fluentd'
||&lt;
インストール。
&gt;||
$ bundle install --path ./vendor/bundle
Fetching gem metadata from http://rubygems.org/....
Fetching gem metadata from http://rubygems.org/....
Installing iobuffer (1.1.2) with native extensions
Installing cool.io (1.1.0) with native extensions
Installing http_parser.rb (0.5.3) with native extensions
Installing json (1.7.3) with native extensions
Installing msgpack (0.4.7) with native extensions
Installing yajl-ruby (1.1.0) with native extensions
Installing fluentd (0.10.24)
Using bundler (1.1.3)
Your bundle is complete! It was installed into ./vendor/bundle
||&lt;
OK。((CentOSはこれでよかったんだけど、はじめにWindowsで挑戦したらエラッタ。。))

**実行
[http://fluentd.org/doc/install.html#confirm-installation:title] を参考に。
-設定ファイルなどのテンプレートを指定先に作ってくれる。
&gt;||
$ bundle exec fluentd --setup ./fluent
Installed ./fluent/fluent.conf.
||&lt;

-コンフィグファイル指定+traceモードで起動
&gt;||
$ bundle exec fluentd -c ./fluent/fluent.conf -vv &amp;
[1] 12973
2012-07-10 21:37:47 +0900: fluent/supervisor.rb:153:supervise: starting fluentd-0.10.24
2012-07-10 21:37:47 +0900: fluent/supervisor.rb:235:read_config: reading config file path=&quot;./fluent/fluent.conf&quot;
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered buffer plugin 'file'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered buffer plugin 'memory'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered input plugin 'exec'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered input plugin 'forward'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered input plugin 'gc_stat'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered input plugin 'http'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered input plugin 'object_space'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered input plugin 'status'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered input plugin 'tcp'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered input plugin 'unix'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered input plugin 'syslog'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered input plugin 'tail'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered output plugin 'copy'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered output plugin 'exec'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered output plugin 'exec_filter'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered output plugin 'file'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered output plugin 'forward'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered output plugin 'null'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered output plugin 'roundrobin'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered output plugin 'stdout'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered output plugin 'tcp'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered output plugin 'unix'
2012-07-10 21:37:47 +0900: fluent/plugin.rb:85:register_impl: registered output plugin 'test'
2012-07-10 21:37:47 +0900: fluent/engine.rb:63:block in configure: adding source type=&quot;forward&quot;
2012-07-10 21:37:47 +0900: fluent/engine.rb:63:block in configure: adding source type=&quot;http&quot;
2012-07-10 21:37:47 +0900: fluent/engine.rb:79:block in configure: adding match pattern=&quot;debug.**&quot; type=&quot;stdout&quot;
2012-07-10 21:37:47 +0900: plugin/in_forward.rb:60:listen: listening fluent socket on 0.0.0.0:24224
2012-07-10 21:37:47 +0900: plugin/in_http.rb:74:start: listening http on 0.0.0.0:8888
||&lt;

-ログを送ってみる
&gt;||
$ echo '{&quot;json&quot;:&quot;message&quot;}' | bundle exec fluent-cat debug.test
2012-07-10 21:40:02 +0900: plugin/in_forward.rb:139:initialize: accepted fluent socket object_id=14145560
2012-07-10 21:40:02 +0900 debug.test: {&quot;json&quot;:&quot;message&quot;}
2012-07-10 21:40:02 +0900: plugin/in_forward.rb:180:on_close: closed fluent socket object_id=14145560
||&lt;


**Apacheのログを集めてみる
集めるログ……自鯖のApacheのログをfluentdで集めてみよう。
-コンフィグファイルにはじめからコメントアウトされている設定があったので、これを利用
&gt;||
## File input                                                                                                                                 
## read apache logs with tag=apache.access                                                                                                    
&lt;source&gt;
  type tail
  format apache
  path /var/log/httpd-access.log
  tag apache.access
&lt;/source&gt;
||&lt;

-typeにはInput Pluginを指定するらしい。種類はhttp, tail, forward, execなど
--[http://fluentd.org/doc/plugin.html#input-plugins:title]
-format(必須)はLogのフォーマットを指定。今回はApacheのログなのでapache
-path(必須)はLogのパスかな
-tag(必須)はfluentd内で使うタグ？ myapp.accessみたいにドットで分けるらしい
上記の条件にマッチしたものを、今度はmatchタグに従ってoutputしている……のかな？
&gt;||
## match tag=apache.access and write to file                                                                                                  
&lt;match apache.access&gt;
  type file
  path /home/kk_Ataka/log
&lt;/match&gt;
||&lt;

では動かしてみよう。
&gt;||
$ sudo bundle exec fluentd -c fluent/fluent.conf
||&lt;

Apacheへアクセス。(Redmineがいるので、Redmineホームにアクセスしてみる)

…。

…。

**結果
***Apacheの方でいつもどおり作られたログ
&gt;||
xxx.xxx.xxx.xxx - - [10/Jul/2012:22:20:30 +0900] &quot;GET / HTTP/1.1&quot; 200 4371
xxx.xxx.xxx.xxx - - [10/Jul/2012:22:20:30 +0900] &quot;GET /themes/alternate/stylesheets/application.css?1339785657 HTTP/1.1&quot; 304 -
xxx.xxx.xxx.xxx - - [10/Jul/2012:22:20:30 +0900] &quot;GET /javascripts/controls.js?1339785657 HTTP/1.1&quot; 304 -
xxx.xxx.xxx.xxx - - [10/Jul/2012:22:20:30 +0900] &quot;GET /javascripts/effects.js?1339785657 HTTP/1.1&quot; 304 -
xxx.xxx.xxx.xxx - - [10/Jul/2012:22:20:30 +0900] &quot;GET /javascripts/prototype.js?1339785657 HTTP/1.1&quot; 304 -
xxx.xxx.xxx.xxx - - [10/Jul/2012:22:20:30 +0900] &quot;GET /javascripts/dragdrop.js?1339785657 HTTP/1.1&quot; 304 -
xxx.xxx.xxx.xxx - - [10/Jul/2012:22:20:30 +0900] &quot;GET /javascripts/application.js?1339785657 HTTP/1.1&quot; 304 -
xxx.xxx.xxx.xxx - - [10/Jul/2012:22:20:30 +0900] &quot;GET /stylesheets/scm.css?1339785657 HTTP/1.1&quot; 304 -
::1 - - [10/Jul/2012:22:20:36 +0900] &quot;OPTIONS * HTTP/1.0&quot; 200 -
||&lt;
見慣れたもんが出ました。

***fluentdで作られたログ
&gt;||
2012-07-10T22:20:30+09:00       apache.access   {&quot;host&quot;:&quot;xxx.xxx.xxx.xxx&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;path&quot;:&quot;/&quot;,&quot;code&quot;:&quot;200&quot;,&quot;size&quot;:&quot;4371&quot;}
2012-07-10T22:20:30+09:00       apache.access   {&quot;host&quot;:&quot;xxx.xxx.xxx.xxx&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;path&quot;:&quot;/themes/alternate/stylesheets/application.css?1339785657&quot;,&quot;code&quot;:&quot;304&quot;,&quot;size&quot;:&quot;-&quot;}
2012-07-10T22:20:30+09:00       apache.access   {&quot;host&quot;:&quot;xxx.xxx.xxx.xxx&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;path&quot;:&quot;/javascripts/controls.js?1339785657&quot;,&quot;code&quot;:&quot;304&quot;,&quot;size&quot;:&quot;-&quot;}
2012-07-10T22:20:30+09:00       apache.access   {&quot;host&quot;:&quot;xxx.xxx.xxx.xxx&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;path&quot;:&quot;/javascripts/effects.js?1339785657&quot;,&quot;code&quot;:&quot;304&quot;,&quot;size&quot;:&quot;-&quot;}
2012-07-10T22:20:30+09:00       apache.access   {&quot;host&quot;:&quot;xxx.xxx.xxx.xxx&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;path&quot;:&quot;/javascripts/prototype.js?1339785657&quot;,&quot;code&quot;:&quot;304&quot;,&quot;size&quot;:&quot;-&quot;}
2012-07-10T22:20:30+09:00       apache.access   {&quot;host&quot;:&quot;xxx.xxx.xxx.xxx&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;path&quot;:&quot;/javascripts/dragdrop.js?1339785657&quot;,&quot;code&quot;:&quot;304&quot;,&quot;size&quot;:&quot;-&quot;}
2012-07-10T22:20:30+09:00       apache.access   {&quot;host&quot;:&quot;xxx.xxx.xxx.xxx&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;path&quot;:&quot;/javascripts/application.js?1339785657&quot;,&quot;code&quot;:&quot;304&quot;,&quot;size&quot;:&quot;-&quot;}
2012-07-10T22:20:30+09:00       apache.access   {&quot;host&quot;:&quot;xxx.xxx.xxx.xxx&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;path&quot;:&quot;/stylesheets/scm.css?1339785657&quot;,&quot;code&quot;:&quot;304&quot;,&quot;size&quot;:&quot;-&quot;}
2012-07-10T22:20:36+09:00       apache.access   {&quot;host&quot;:&quot;::1&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;OPTIONS&quot;,&quot;path&quot;:&quot;*&quot;,&quot;code&quot;:&quot;200&quot;,&quot;size&quot;:&quot;-&quot;}
||&lt;
自動で全部jsonにparseされている！　さすがLog everything in JSONと公式に書いているだけの事はある！

こうなってくると、MongoDBとかの知識も必要になってくるな。

</body>
</day>
<day date="2012-07-17" title="">
<body>
*1342535044*[Ruby][備忘録][Windows][Redmine]Windows版Redmineをサービスに登録してブート時に起動させる(宿題あり)

**あらすじ
タイトル通り、サービスに登録してよろしく起動してほしい。mongrelを使えばサービスから起動できる……らしいが、名前は聞いたことあるけど、mongrelが何かは知らない……。
&gt;http://d.hatena.ne.jp/keyword/mongrel&gt;
Ruby + C(拡張ライブラリ) で書かれた httpd。
&lt;&lt;
なるほど。

**環境
-Windows XP
-Ruby 1.9.3
--Bundler 1.0.21
--Mongrel 1.2.0.pre2
-Redmine 1.4

**手順
***前提
-Redmineの環境構築が完了している事
--bundle exec ruby script/server -e production で起動できる事

***インストールから起動まで
-まずはRedmineデフォルトのGemfileにmongrelを追加し、bundle install
&gt;||
gem &quot;mongrel&quot;
||&lt;
&gt;||
$ bundle install
Fetching source index for http://rubygems.org/
Using rake (0.9.2.2)
Using activesupport (2.3.14)
Using rack (1.1.3)
Using actionpack (2.3.14)
Using actionmailer (2.3.14)
Using activerecord (2.3.14)
Using activeresource (2.3.14)
Installing cgi_multipart_eof_fix (2.5.0)
Using coderay (1.0.6)
Installing gem_plugin (0.2.3)
Using i18n (0.4.2)
Installing mongrel (1.1.5)
Using mysql2 (0.2.18)
Using net-ldap (0.3.1)
Using pg (0.13.2)
Using rails (2.3.14)
Using ruby-openid (2.1.8)
Using sqlite3 (1.3.6)
Using tzinfo (0.3.33)
Using bundler (1.0.21)
Your bundle is complete! It was installed into ./vendor/bundle
||&lt;
-bundle exec ruby ...で起動…しようとするとエラー
&gt;||
msvcrt-ruby18.dll が見つからなかったため、このアプリケーションを開始できませんでした。アプリケーションをインストールし直すとこの問題は解決される場合があります。
||&lt;
-[http://gururan.com/20100820/002808:title] という事らしいので、jsonを消してみることに……ただ、バージョンが違うんだよなあ。
&gt;||
$ gem list
...
json (1.5.4)
...
||&lt;
&gt;||
$ gem uninstall json
Successfully uninstalled json-1.5.4
||&lt;
-で、再起動……だめだった！！
-[http://simultechnology.blendmix.jp/blog/archives/1248:title] によると、さっきいれてた&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;mongrel 1.1.5 はRuby 1.8のモジュールを使っている&lt;/span&gt;という事らしい
-&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;新しいバージョン(今はプレリリース版)を入れることで解決できる。&lt;/span&gt;Gemfileを修正しbundle install
&gt;||
-gem &quot;mongrel&quot;
+gem &quot;mongrel&quot;, &quot;&gt;= 1.2.0.pre2&quot;
||&lt;
&gt;||
$ bundle install
...
Installing mongrel (1.2.0.pre2)
||&lt;
-起動！　起動した！　WEBrickで起動していたのがMongrelに変わった！
&gt;||
=&gt; Booting WEBrick
||&lt;
&gt;||
=&gt; Booting Mongrel
||&lt;
に変わった！

**サービスに登録
-mongrel_serviceをGemfileに登録
&gt;||
gem &quot;mongrel_service&quot;
||&lt;
-インストールできたらmongrel_railsというコマンドが追加される(今回はbundlerでインストールしたので、Redmineのrootまで行ってbundle exec mongrel_rails)
&gt;||
[C:\redmine-1.4.0]
$ be mongrel_rails
Usage: mongrel_rails &lt;command&gt; [options]
Available commands are:

 - restart
 - start
 - stop
 - service::install
 - service::remove
||&lt;
-Serviceに追加
|*オプション|*意味|
|-N|サービス名|
|-c|Redmineのルート|
|-p|起動ポート|
|-e|Railsの起動モード|
&gt;||
$ be mongrel_rails service::install -N &quot;Redmine&quot; -c C:\redmine-1.4.0 -p 3000 -e production
** Copying native mongrel_service executable...
Redmine service created.
||&lt;
-登録に成功したのでWin+rからservices.mscを呼び出して確認……
-あった！
--スタートアップの種類が手動になっていたので自動に変更
-マシン再起動！

&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;起動しない……だと……？&lt;/span&gt;

***サービスから起動できなかった
-Redmineフォルダ内のlogにmongrel.logがあるので見てみると
&gt;||
C:\RUBY_ROOT\bin\ruby.exe: No such file or directory -- C:/RUBY_ROOT/bin/mongrel_rails (LoadError)
||&lt;
うーん。RUBY_ROOTのbin下にmongrel_railsを探しに行ってる？　……でも今回はbundlerで入れたからREDMINE_ROOT/vendor/bundle下を見に行ってほしいんだけどなぁ。

ちょっと試しにbundlerからmongrel, mongrel_serviceをはずして、gemで直接Mongrelをインストールしてみる。
&gt;||
$ gem install mongrel --pre
$ gem install mongrel_service
||&lt;
これで
-REDMINE_ROOTのvendor/bundleにMongrelはなくなった
--つまり、REDMINE_ROOTでbundle exec ruby ...したらWEBRickで起動するようになった
-RUBY_ROOTにmongrelが入った
ということになり、RUBY_ROOTにMongrelがあるので、再起動すればサービスから起動してくれるはず……。

再々起動…&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;起動した！&lt;/span&gt;

***まとめ
-一応、サービスから起動させる事はできた
-ただし、直接gem installしたものに限る。サービスから起動させるとRUBY_ROOTを見にいってしまうようなのでbundlerで入れるとLoadErrorになってしまう

***宿題
mongrel_railsコマンドのオプションとかでbundlerから起動するように変えられないかな？

</body>
</day>
<day date="2012-08-16" title="">
<body>
*1345124098*[備忘録][reST][Sphinx]Sphinxの見出しについて学びなおし
**前回までのあらすじ
-[http://d.hatena.ne.jp/kk_Ataka/20111202/1322839748:title]で見出しの理解が間違っている事をSphinx 初心者 さんに教えてもらった
-もう一度ドキュメントを見なおしてみる事に

**参考サイト
-[http://sphinx.shibu.jp/rest.html#id9:title]
-[http://docutils.sourceforge.net/docs/user/rst/quickstart.html#sections:title]

**見出し周辺を読み直し
&gt;&gt;
セクションのヘッダは、セクションのタイトルを句読点などの記号の文字でアンダーラインを引くことで設定します。必要に応じてでオーバーラインも併用することができます。
&lt;&lt;
&gt;&gt;
使用していない種類のアンダーラインが出てくると、見出しのレベルが一段変わる、というルールになっています。
&lt;&lt;
&gt;&gt;
. These are a single line of text (one or more words) with adornment: an underline alone, or an underline and an overline together, in dashes &quot;-----&quot;, equals &quot;======&quot;, tildes &quot;~~~~~~&quot; or any of the non-alphanumeric characters = - ` : ' &quot; ~ ^ _ * + # &lt; &gt; that you feel comfortable with.
&lt;&lt;
つまり……
-英数字以外の記号でアンダーラインを引くとセクションヘッダ
--アンダーラインとオーバーラインで囲むのも別の定義として判断される
--己がしっくりくるものを選んでよい
-初めて出てきた順に見出しレベルが割り当てられる

**確認
Pythonドキュメント慣例にならってこういうソースを書くと、
&gt;||
##################
上下 # 部
##################

ここは上下 # で囲った部の文章。

下 # 部
##############

ここは下 # で囲った部の文章。

*******************
上下 * 章
*******************

ここは上下 * で囲った章の文章。

下 * 章
*******************

ここは下 * で囲った章の文章。

===========================
上下 = セクション
===========================

ここは上下 = で囲ったセクションの文章。

下 = セクション
===========================

ここは下 = で囲ったセクションの文章。

---------------------------
上下 - サブセクション
---------------------------

ここは上下 - で囲ったサブセクションの文章。

下 - サブセクション
---------------------------

ここは下 - で囲ったサブセクションの文章。

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
上下 ^ サブサブセクション
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

ここは上下 ^ で囲ったサブサブセクションの文章。

下 ^ サブサブセクション
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

ここは下 ^ で囲ったサブサブセクションの文章。

&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
上下 &quot; パラグラフ
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;

ここは上下 &quot; で囲ったパラグラフの文章。

下 &quot; パラグラフ
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;

ここは下 &quot; で囲ったパラグラフの文章。
||&lt;
htmlはこう生成される。
&gt;|html|
&lt;h1&gt;上下 # 部&lt;a class=&quot;headerlink&quot; href=&quot;#id1&quot; title=&quot;Permalink to this headline&quot;&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;ここは上下 # で囲った部の文章。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id2&quot;&gt;
&lt;h2&gt;下 # 部&lt;a class=&quot;headerlink&quot; href=&quot;#id2&quot; title=&quot;Permalink to this headline&quot;&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここは下 # で囲った部の文章。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id3&quot;&gt;
&lt;h3&gt;上下 * 章&lt;a class=&quot;headerlink&quot; href=&quot;#id3&quot; title=&quot;Permalink to this headline&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ここは上下 * で囲った章の文章。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id4&quot;&gt;
&lt;h4&gt;下 * 章&lt;a class=&quot;headerlink&quot; href=&quot;#id4&quot; title=&quot;Permalink to this headline&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;ここは下 * で囲った章の文章。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id5&quot;&gt;
&lt;h5&gt;上下 = セクション&lt;a class=&quot;headerlink&quot; href=&quot;#id5&quot; title=&quot;Permalink to this headline&quot;&gt;¶&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;ここは上下 = で囲ったセクションの文章。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id6&quot;&gt;
&lt;h6&gt;下 = セクション&lt;a class=&quot;headerlink&quot; href=&quot;#id6&quot; title=&quot;Permalink to this headline&quot;&gt;¶&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;ここは下 = で囲ったセクションの文章。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id7&quot;&gt;
&lt;h7&gt;上下 - サブセクション&lt;a class=&quot;headerlink&quot; href=&quot;#id7&quot; title=&quot;Permalink to this headline&quot;&gt;¶&lt;/a&gt;&lt;/h7&gt;
&lt;p&gt;ここは上下 - で囲ったサブセクションの文章。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id8&quot;&gt;
&lt;h8&gt;下 - サブセクション&lt;a class=&quot;headerlink&quot; href=&quot;#id8&quot; title=&quot;Permalink to this headline&quot;&gt;¶&lt;/a&gt;&lt;/h8&gt;
&lt;p&gt;ここは下 - で囲ったサブセクションの文章。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id9&quot;&gt;
&lt;h9&gt;上下 ^ サブサブセクション&lt;a class=&quot;headerlink&quot; href=&quot;#id9&quot; title=&quot;Permalink to this headline&quot;&gt;¶&lt;/a&gt;&lt;/h9&gt;
&lt;p&gt;ここは上下 ^ で囲ったサブサブセクションの文章。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id10&quot;&gt;
&lt;h10&gt;下 ^ サブサブセクション&lt;a class=&quot;headerlink&quot; href=&quot;#id10&quot; title=&quot;Permalink to this headline&quot;&gt;¶&lt;/a&gt;&lt;/h10&gt;
&lt;p&gt;ここは下 ^ で囲ったサブサブセクションの文章。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id11&quot;&gt;
&lt;h11&gt;上下 &amp;#8221; パラグラフ&lt;a class=&quot;headerlink&quot; href=&quot;#id11&quot; title=&quot;Permalink to this headline&quot;&gt;¶&lt;/a&gt;&lt;/h11&gt;
&lt;p&gt;ここは上下 &amp;#8221; で囲ったパラグラフの文章。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id12&quot;&gt;
&lt;h12&gt;下 &amp;#8221; パラグラフ&lt;a class=&quot;headerlink&quot; href=&quot;#id12&quot; title=&quot;Permalink to this headline&quot;&gt;¶&lt;/a&gt;&lt;/h12&gt;
&lt;p&gt;ここは下 &amp;#8221; で囲ったパラグラフの文章。&lt;/p&gt;
||&lt;
まあ、h12まであるページとか見たことないんだけど、新しいものを定義し続けるとどんどん深くなる。

ここでソースを以下のように編集。がっつりカットしつつ、適当に数個残し。あと&lt;&lt;&lt;で新しいセクションを定義してみた。
&gt;||
  # 部
##############

ここは下 # で囲った部の文章。

*******************
上下 * 章
*******************

ここは上下 * で囲った章の文章。

下 - サブセクション
---------------------------

ここは下 - で囲ったサブセクションの文章。

&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
新しく作った
&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

&lt;&lt;&lt;&lt;&lt;で新しくセクションを作ってみた。
||&lt;
htmlはこう生成される。
&gt;|html|
&lt;h1&gt;下 # 部&lt;a class=&quot;headerlink&quot; href=&quot;#id1&quot; title=&quot;Permalink to this headline&quot;&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;ここは下 # で囲った部の文章。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id2&quot;&gt;
&lt;h2&gt;上下 * 章&lt;a class=&quot;headerlink&quot; href=&quot;#id2&quot; title=&quot;Permalink to this headline&quot;&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここは上下 * で囲った章の文章。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id3&quot;&gt;
&lt;h3&gt;下 - サブセクション&lt;a class=&quot;headerlink&quot; href=&quot;#id3&quot; title=&quot;Permalink to this headline&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ここは下 - で囲ったサブセクションの文章。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id4&quot;&gt;
&lt;h4&gt;新しく作った&lt;a class=&quot;headerlink&quot; href=&quot;#id4&quot; title=&quot;Permalink to this headline&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;で新しくセクションを作ってみた。&lt;/p&gt;
||&lt;
うーんなるほど。

ちゃんとドキュメント読まず、他の記法と同じノリでこれはこの見出しって決めつけてしまっていた！
</body>
</day>
<day date="2012-08-17" title="">
<body>
*1345209899*[Fluentd][備忘録][Ruby]Fluentdのプラグインを作成してみる(練習用)

**前回までのあらすじ
[http://d.hatena.ne.jp/kk_Ataka/20120712/1342098141:title] で、confファイルのコメントアウトを外してとりあえず動くっていうところまではいけた。今度は簡単なプラグインを作ってみる。

**参考サイト
-[http://fluentd.org/doc/:title]
-[http://d.hatena.ne.jp/erukiti/20120205/1328452455:title]
-[http://d.hatena.ne.jp/tagomoris/20120221/1329815126:title]

**ひたすら何かを吐き続けるプラグイン
***Inputプラグインの場合
Fluent::Inputクラスを継承する。
&gt;|ruby|
class SimpleInput &lt; Fluent::Input
  # 第一引数がプラグインの名前、&lt;source&gt; typeに指定される
  Fluent::Plugin.register_input(&quot;simple_in&quot;, self)

  def start
    @thread = Thread.new(&amp;method(:run))
  end

  def run
    loop do
      # emitメソッドの第一引数が &lt;match **.**&gt; の**に該当すればその形式で出力される
      # fluent.confでdebug.**はstdoutで出力すると定義されている
      Fluent::Engine.emit(&quot;debug.debug&quot;, Fluent::Engine.now, {&quot;simple&quot; =&gt; &quot;debudebu&quot;})
      # fluent.confに&lt;match simple.output&gt; type simple_outを定義したので、以下のOutput形式で出力される
      Fluent::Engine.emit(&quot;simple.output&quot;, Fluent::Engine.now, {&quot;simple&quot; =&gt; &quot;simout&quot;})
      sleep(1)
    end
  end
end
||&lt;
上のソースには書かれていないけど、他にもメソッドがいくつか。(公式サイトより)
-configure メソッド
--スタート前に呼び出される
--confハッシュにパラメータを入れられる？
--エラーはFluent::ConfigErrorを投げる
-start メソッド
--スタート時に呼ばれる
--ここでスレッドを作ったりファイルをオープンしたり
-shutdown メソッド
--シャットダウン時に呼ばれる
--スレッドやファイルのクローズはここで。
-イベントをsubmitするためにはFluent::Engine.emit(tag, time, record)メソッドを使う
--tagはString、timeはUnixTime、recordはハッシュ。

***Outputプラグインの場合
まず種類がいろいろ。
-Buffered output plugins Fluent::BufferedOutputクラスを継承
-Time sliced output plugins Fluent::TimeSlicedOutputクラスを継承/Buffered output pluginを継承したプラグイン？
-Non-buffered output plugins Fluent::Outputクラスを継承
今回はFluent::Outputを使った。
&gt;|ruby|
class SimpleOutput &lt; Fluent::Output
  # 第一引数がプラグインの名前、&lt;match&gt; の typeに指定される
  Fluent::Plugin.register_output(&quot;simple_out&quot;, self)

  def emit(tag, es, chain)
    chain.next
    es.each do |time, record|
      # 出力内容
      puts &quot;simple_out: #{time} - #{record}&quot;
    end
  end
end
||&lt;
-configure, start, shutdown はInputプラグイン同様にある
-emit メソッドはイベントに到達した場合呼ばれる
--esはFluent::EventStreamオブジェクト(イベントが入ってる？)
---eachで回すとイベントを検索できる。
--chainはトランザクションメッセージのオブジェクト。
---適切なポイントでchain.nextを呼ぶとエラーを吐いたときにrollbackしてくれる。

***プラグインをデバッグしたい場合
-fluentdコマンド実行するときに-vvオプションを指定する事でデバッグメッセージが表示できる。
-デバッグにはstdoutかcopyが役に立つ
--stdoutはマッチしたイベントをコンソールに出力する
--copyはマッチしたイベントを複数のプラグインにコピーできる
---stdoutと一緒に使う事ができる

**Configファイル
&gt;|?|
# Inputプラグイン指定
&lt;source&gt;
  type simple_in
&lt;/source&gt;

# Fluent::Engine.emit(&quot;simple.output&quot;, Fluent::Engine.now, {&quot;simple&quot; =&gt; &quot;simout&quot;})
# simple.outputタグ指定した方はsimple_output(Outputプラグイン)出力にマッチする
&lt;match simple.output&gt;
  type simple_out
&lt;/match&gt;

#
## match tag=debug.** and dump to console
# Fluent::Engine.emit(&quot;debug.debug&quot;, Fluent::Engine.now, {&quot;simple&quot; =&gt; &quot;debudebu&quot;})  
# debug.debugタグ指定した方はstdout出力にマッチする
&lt;match debug.**&gt;
  type stdout
&lt;/match&gt;
||&lt;

これを実行すると…。
&gt;|?|
$ bundle exec fluentd -c /home/kk_Ataka/fluentd/fluent.conf -p /home/kk_Ataka/fluentd/plugin/
2012-08-17 22:19:41 +0900: starting fluentd-0.10.24
2012-08-17 22:19:41 +0900: reading config file path=&quot;/home/kk_Ataka/fluentd/fluent.conf&quot;
(略)
2012-08-17 22:19:41 +0900: following tail of /usr/local/apache2/logs/access_log
2012-08-17 22:19:41 +0900: following tail of /usr/local/apache2/logs/error_log
2012-08-17 22:19:41 +0900 debug.debug: {&quot;simple&quot;:&quot;debudebu&quot;}
simple_out: 1345209581 - {&quot;simple&quot;=&gt;&quot;simout&quot;}
2012-08-17 22:19:42 +0900 debug.debug: {&quot;simple&quot;:&quot;debudebu&quot;}
simple_out: 1345209582 - {&quot;simple&quot;=&gt;&quot;simout&quot;}
2012-08-17 22:19:43 +0900 debug.debug: {&quot;simple&quot;:&quot;debudebu&quot;}
simple_out: 1345209583 - {&quot;simple&quot;=&gt;&quot;simout&quot;}
2012-08-17 22:19:44 +0900 debug.debug: {&quot;simple&quot;:&quot;debudebu&quot;}
simple_out: 1345209584 - {&quot;simple&quot;=&gt;&quot;simout&quot;}
2012-08-17 22:19:45 +0900 debug.debug: {&quot;simple&quot;:&quot;debudebu&quot;}
simple_out: 1345209585 - {&quot;simple&quot;=&gt;&quot;simout&quot;}
2012-08-17 22:19:46 +0900 debug.debug: {&quot;simple&quot;:&quot;debudebu&quot;}
simple_out: 1345209586 - {&quot;simple&quot;=&gt;&quot;simout&quot;}
||&lt;
1秒刻みでプラグインに記述した内容が出力される。こっちが標準のstdout出力。
&gt;|?|
2012-08-17 22:19:46 +0900 debug.debug: {&quot;simple&quot;:&quot;debudebu&quot;}
||&lt;
こっちが自分で記述したOutputプラグイン書式の出力。
&gt;|?|
simple_out: 1345209586 - {&quot;simple&quot;=&gt;&quot;simout&quot;}
||&lt;

</body>
</day>
<day date="2012-08-29" title="">
<body>
*1346242547*[Git][備忘録]Git add, commitをした時、中でどんな事が起こっているのか

**あらすじ
いまだにファイルがどういうタイミングでリポジトリ、インデックス、ワーキングエリア間を行き来しているのかわからんので色々調べてみることに。

**参考資料、サイト
-実用Git
-[http://www8.atwiki.jp/git_jp/pub/Documentation.ja/tutorial-2.html:title]
-[http://keijinsonyaban.blogspot.jp/2011/05/git.html:title]
-[http://git-scm.com/book/ja/Git%E3%81%AE%E5%86%85%E5%81%B4-Git%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88:title]

**やってみる
まずは、空のREADMEファイルを作ってFirst commit。
&gt;||
$ git init
Initialized empty Git repository in /tmp/repos/.git/
$ touch README
$ git add README
$ git commit -m &quot;first commit&quot;
[master (root-commit) b0d99b3] first commit
 0 files changed
 create mode 100644 README
$ git log --graph --date-order --all --date=short -C -M --pretty=format:&quot;%h&quot;\ %t\ %ad\ %Cblue%cn%Creset\ %Cgreen%d%Creset\ %s
 * b0d99b3 543b9be 2012-08-29 kk_Ataka  (HEAD, master) first commit
||&lt;
***色々確認
※確認スクリプト
&lt;script src=&quot;https://gist.github.com/3510904.js?file=git-kakunin&quot;&gt;&lt;/script&gt;
[f:id:kk_Ataka:20120829192353j:image]
-rev-parse コマンドはタグとかブランチとかHEAD、HEAD^^など指定したらそのコミットのSHA1が返ってくる
--最初のコミットオブジェクトは &lt;span class=&quot;deco&quot; style=&quot;color:#0000FF;&quot;&gt;b0d99b3&lt;/span&gt;
-cat-file コマンドでコミットオブジェクトの内容を確認できる
--コミットオブジェクトに関連付いているツリーオブジェクトは &lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;543b9be&lt;/span&gt;
-ls-tree コマンドで上のツリーオブジェクトにぶら下がっているツリーオブジェクト、ブロブオブジェクトを確認できる
--今は直下にREADMEファイルしかないから &lt;span class=&quot;deco&quot; style=&quot;color:#00FF00;&quot;&gt;e69de29&lt;/span&gt;
-コミットすると.git/objects/の下に3つファイルが作られる
--SHA1の先頭2桁でディレクトリを作り、その下に残りのSHA1でファイル作成
***ゆっくり
READMEを編集してみる。
&gt;||
$ echo &quot;このリポジトリはテスト用です&quot; &gt; README 
$ git status
# On branch master
# Changes not staged for commit:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#	modified:   README
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
||&lt;
で、色々確認。まだ作業エリア(ワーキングツリー)内での変更しかしてない(git addしてない)ので特に変わらず。
[f:id:kk_Ataka:20120829192354j:image]
***addしたとき
ここでREADMEファイルをadd。
&gt;||
$ git add README
$ git status
# On branch master
# Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#	modified:   README
#
||&lt;
再度、色々確認。
[f:id:kk_Ataka:20120829192355j:image]
&lt;span class=&quot;deco&quot; style=&quot;color:#00FF00;&quot;&gt;リポジトリにコミットされているREADME e69de29&lt;/span&gt; の他に&lt;span class=&quot;deco&quot; style=&quot;color:#666600;&quot;&gt;de7e855 というオブジェクトがステージされている&lt;/span&gt;。おまけに.git/objectsの下にも。
-addした時点で、gitリポジトリの中に入れ込まれている？
-リセットしても.git/objectsの下からは消えない(ただ、この状態でほったらかしておくとどこからも参照されないからいずれgcされて死ぬ？)
&gt;||
$ git reset HEAD README
Unstaged changes after reset:
M	README
$ git status
# On branch master
# Changes not staged for commit:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#	modified:   README
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
$ find .git/objects
.git/objects/de/7e8558a365886d75f9c1ac6861693be19bdc53
.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391
.git/objects/54/3b9bebdc6bd5c4b22136034a95dd097a57d3dd
.git/objects/b0/d99b34f1e2497a78619de4fde08b62f2d851f7
$ git cat-file -p de7e8558
このリポジトリはテスト用です
||&lt;
***commitしたとき
もう一回addして今度はコミット。
&gt;||
$ git add README
$ git commit -m &quot;README追記&quot;
[master 30eab42] README追記
 1 file changed, 1 insertion(+)
||&lt;
すごい見づらいけど、.git/objectsの下に2つファイルが増えている。追ってみると&lt;span class=&quot;deco&quot; style=&quot;color:#00FFFF;&quot;&gt;今回のコミットオブジェクト 30eab42 &lt;/span&gt;と &lt;span class=&quot;deco&quot; style=&quot;color:#FF00FF;&quot;&gt;ツリーオブジェクト 9dd7dd4 &lt;/span&gt;…の下にさっきaddした時にできていた&lt;span class=&quot;deco&quot; style=&quot;color:#666600;&quot;&gt;README(de7e855)&lt;/span&gt;。
[f:id:kk_Ataka:20120829192357j:image]

**まとめ
以上の事から
-addした時、既にリポジトリにファイルは追加されている。また、インデックスの参照先も更新されている
***初期状態
[f:id:kk_Ataka:20120829203645p:image:w360]
***addした後
[f:id:kk_Ataka:20120829203647p:image:w360]
-commitした時、インデックスがそのまま次のコミットのツリーオブジェクトになる。そのツリーオブジェクトを取りまとめるコミットオブジェクトを作成し、tree情報とparent情報を持たせる
-で、ブランチの参照先を更新してやる
***commitした後
[f:id:kk_Ataka:20120829203648p:image:w360]

でいいのかなあ。

</body>
</day>
<day date="2012-09-13" title="">
<body>
*1347508570*[Ruby][備忘録][Fluentd]Fluentdの自作プラグインがロードできないのでソースの中身を追ってみる…
**あらすじ
[http://d.hatena.ne.jp/kk_Ataka/20120817/1345209899:title=前回]までに簡単なプラグインを作成する事はできた。
次はプラグインをGem化しようかなと思って色々いじってたら、実行時になんかうまくプラグインが読めない……。なんで？

**参考サイト
-[https://github.com/fluent/fluentd:title]
-[http://d.hatena.ne.jp/tagomoris/20120715/1342368392:title]
-[http://blog.ksauzz.com/?p=37:title]

**今できてる事とできてない事
BundlerでFluentdをインストールし、
&gt;||
$ bundle exec fluentd -c /hoge/fluent.conf -p /hoge/plugin 
||&lt;
を実行した時……

-gem installで入れたfluentdのプラグインはちゃんとロードできる
--Gemにしちゃえばロードできる
-プラグインディレクトリ直下(-p /hoge/plugin)にササッと作ってみたプラグインもロードでき、動いた
--直下に放り込めばロードできる
&gt;||
/hoge/plugin
└in_hoge.rb              # これはロードできる
||&lt;
-&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;gem未満、ササッと作った以上のプラグインがロードできない&lt;/span&gt;
--fluent-pluginっぽいディレクトリ構成にした程度のもの。まだローカルに置いてあるだけでgemには成り切れていない
&gt;||
/hoge/plugin
├in_hoge.rb              # これはロードできる
└fluent-plugin-hogehoge
　├lib
　│└fluent
　│　└plugin
　│　　└in_hogehoge.rb  # これがロードできない
　├fluent-plugin-hogehoge.gemspec
　└他
||&lt;

**調査結果と(暫定)解決策
***fluentdのプラグインロード順番
fluentdコマンドを実行すると、 &lt;span class=&quot;deco&quot; style=&quot;font-weight:bold;&quot;&gt;なんやかんやあって&lt;/span&gt; プラグインをロードしにいく。ソースは$FLUENTD_HOME/lib/fluent/plugin.rb
+$FLUENTD_HOME/lib/fluent/plugin/直下のrbファイルをロードする
--in_exec.rbとか
+gem_pluginをロードする
--これは今回空だった
+/etc/fluent/plugin/直下のrbファイルをロードする
--デフォルトのプラグイン置き場
--デフォルトの設定は$FLUENTD_HOME/lib/fluent/env.rbに定義されている
+オプションで-p /hoge/pluginを指定していた場合、/hoge/plugin直下のrbファイルもロードする
--また、&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;-pオプションは複数指定できる&lt;/span&gt;
+fluent.confに定義されている&lt;source&gt; type hogeが今までロードしたファイルにあるか確認。あった場合はそのままロードできる
-なかった場合はもう少し色々な場所の探索にチャレンジする
--&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;$LOAD_PATHと、gem installしたディレクトリ直下のどこかにlib/fluent/plugin/&lt;type&gt;_&lt;name&gt;.rb&lt;/span&gt;が存在するか

**解決策
+fluentd自体の$LOAD_PATHに追加
--本体に毎回修正かけるの？
+in_hogehoge.rbをロードしてくれる場所へコピー(デフォルトプラグイン(/etc/fluent/plugin)など)
--コピペ？
+さっさと作ってgem installできるようにもっていく
--うーん…
+オプション-pを複数指定する
--上の場合は -p /hoge/plugin -p /hoge/plugin/fluent-plugin-hogehoge/lib/fluent/plugin としてやればよい
---fluentd本体でわざわざlib/fluent/plugin下を探すようにコーディングされてるのにこんな指定の仕方するものかな？　何か違う気がする……下みたいに未完成のプラグインが増えていくとオプションガンガン長くなっていく？
&gt;||
/hoge/plugin
├in_hoge.rb
├fluent-plugin-hogehoge
│└lib
│　└fluent
│　　└plugin
│　　　└in_hogehoge.rb
├fluent-plugin-hogehoge2
│└lib
│　└fluent
│　　└plugin
│　　　└in_hogehoge2.rb
└fluent-plugin-hogehoge3
　└lib
　　└fluent
　　　└plugin
　　　　└in_hogehoge3.rb
||&lt;

以下、調査ログ。

**調査ログ
セットアップをすると指定したディレクトリにconfigファイルとpluginディレクトリができる。
&gt;||
$ fluentd -s fluentd-hoge
Installed fluentd-hoge/fluent.conf.
$ ls fluentd-hoge/
fluent.conf  plugin
||&lt;
pluginディレクトリにそのままプラグイン(rbファイル)を入れておくと、起動時に読み込まれる。

**bundle gemコマンドを使ってプラグインを作っていく
&gt;||
$ cd plugin # プラグインを作るからとりあえずpluginディレクトリに移動する
$ bundle gem fluent-plugin-hogehoge
      create  fluent-plugin-hogehoge/Gemfile
      create  fluent-plugin-hogehoge/Rakefile
      create  fluent-plugin-hogehoge/LICENSE
      create  fluent-plugin-hogehoge/README.md
      create  fluent-plugin-hogehoge/.gitignore
      create  fluent-plugin-hogehoge/fluent-plugin-hogehoge.gemspec
      create  fluent-plugin-hogehoge/lib/fluent-plugin-hogehoge.rb
      create  fluent-plugin-hogehoge/lib/fluent-plugin-hogehoge/version.rb
Initializating git repo in /略/fluent-hoge/plugin/fluent-plugin-hogehoge
||&lt;
なんかいろいろ出来たがちょっとルールがあるようなので整形していく。公式サイトより
&gt;http://fluentd.org/doc/devel.html&gt;
Installing custom plugins

To install a plugin, put a ruby script to /etc/fluent/plugin directory.

Or you can create gem package that includes lib/fluent/plugin/&lt;TYPE&gt;_&lt;NAME&gt;.rb file.
TYPE is in for input plugins, out for output plugins and buf for buffer plugins.
It’s like lib/fluent/plugin/out_mail.rb.
The packaged gem can be distributed and installed using RubyGems.
See Searching plugins.
&lt;&lt;
-プラグインは/etc/fluent/pluginにインストールするといいよ
--また、-pオプションを指定すればfluent-hoge/plugin下も呼んでくれる
-Gem packageを作る場合はパッケージの下にlib/fluent/plugin/&lt;TYPE&gt;_&lt;NAME&gt;.rbって名前にしておいてね
--他の方が作ったプラグイン＠GitHubを見ていると確かにそうなっていた！
-&lt;TYPE&gt;はinputプラグインならin、outputプラグインならoutといったように
--このルールは後ほど効いてくる

ってわけでディレクトリはこんな構成に。
&gt;||
fluent-hoge/
├(略)
├fluent.conf
└plugin/　…　(1)
　└fluent-plugin-hogehoge
　　├Gemfile                      # この辺はほぼいじってない
　　├LICENSE                      # この辺はほぼいじってない
　　├README.md                    # この辺はほぼいじってない
　　├Rakefile                     # この辺はほぼいじってない
　　├fluent-plugin-inputs.gemspec # この辺はほぼいじってない
　　└lib/
　　　└fluent/
　　　　└plugin/
　　　　　└in_inputs.rb
||&lt;
プラグインも作成。ただ{&quot;plugin&quot;=&gt;&quot;yes&quot;}を出力しまくるだけのソース。
&gt;|ruby|
class FluPluGem &lt; Fluent::Input
  Fluent::Plugin.register_input(&quot;inputs&quot;, self)
  def initialize
    super
  end

  def configure(conf)
    super
  end

  def start
    puts &quot;a starts&quot;
    @thread = Thread.new(&amp;method(:run))
  end

  def run
    loop do
      Fluent::Engine.emit(&quot;debugx.debug&quot;, Fluent::Engine.now, {&quot;plugin&quot; =&gt; &quot;yes&quot;})
      sleep(2)
    end
  end
end
||&lt;
fluent.confにプラグインを追加。
&gt;|xml|
&lt;source&gt;
  type inputs
&lt;/source&gt;
||&lt;
この状態で起動！
&gt;||
/usr/local/bin/fluentd -c /略/fluent-hoge/fluent.conf -p /略/fluent-hoge/plugin/
2012-09-07 19:57:48 +0900: starting fluentd-0.10.25
2012-09-07 19:57:48 +0900: reading config file path=&quot;/略/fluent-hoge/fluent.conf&quot;
2012-09-07 19:57:48 +0900: adding source type=&quot;forward&quot;
2012-09-07 19:57:48 +0900: adding source type=&quot;inputs&quot;
2012-09-07 19:57:48 +0900: config error file=&quot;/略/fluent-hoge/fluent.conf&quot; error=&quot;Unknown input plugin 'inputs'. Run 'gem search -rd fluent-plugin' to find plugins&quot;
2012-09-07 19:57:48 +0900: process finished code=256
2012-09-07 19:57:48 +0900: process died within 1 second. exit.
||&lt;
失敗した…。inputsっていうプラグインなぞないって言われた。でも、プラグイン本体(in_inputs.rb)をplugin直下(ディレクトリ構成の(1)の部分)に持ってくると…
&gt;||
/usr/local/bin/fluentd -c /略/fluent-hoge/fluent.conf -p /略/fluent-hoge/plugin/
2012-09-07 20:02:28 +0900: starting fluentd-0.10.25
2012-09-07 20:02:28 +0900: reading config file path=&quot;/略/fluent-hoge/fluent.conf&quot;
2012-09-07 20:02:28 +0900: adding source type=&quot;forward&quot;
2012-09-07 20:02:28 +0900: adding source type=&quot;inputs&quot;
2012-09-07 20:02:28 +0900: adding source type=&quot;thread&quot;
2012-09-07 20:02:28 +0900: adding source type=&quot;tail&quot;
2012-09-07 20:02:28 +0900: 'pos_file PATH' parameter is not set to a 'tail' source.
2012-09-07 20:02:28 +0900: this parameter is highly recommended to save the position to resume tailing.
2012-09-07 20:02:28 +0900: adding match pattern=&quot;stdd.std&quot; type=&quot;file&quot;
2012-09-07 20:02:28 +0900: adding match pattern=&quot;devid.devid&quot; type=&quot;file&quot;
2012-09-07 20:02:28 +0900: adding match pattern=&quot;jenkins.**&quot; type=&quot;file&quot;
2012-09-07 20:02:28 +0900: adding match pattern=&quot;debug.**&quot; type=&quot;stdout&quot;
2012-09-07 20:02:28 +0900: listening fluent socket on 0.0.0.0:24224
||&lt;
起動した…。

&gt;&gt;
Or you can create gem package that includes lib/fluent/plugin/&lt;TYPE&gt;_&lt;NAME&gt;.rb file.
&lt;&lt;
この文の認識が間違ってるのかなー？

よくわからないので本丸を攻めてみる。pluginの処理を記述しているのはそのものplugin.rb、また、それを呼ぼうとしているはsupervisor.rb,engine.rbあたりっぽい。
-[https://github.com/fluent/fluentd/blob/master/lib/fluent/plugin.rb:title]
-[https://github.com/fluent/fluentd/blob/master/lib/fluent/engine.rb:title]
-[https://github.com/fluent/fluentd/blob/master/lib/fluent/supervisor.rb:title]

ロードしているのはplugin内だろうと思い、いろいろ出力してみる。
&gt;|ruby|
  def load_plugins
    dir = File.join(File.dirname(__FILE__), &quot;plugin&quot;)
puts &quot;!load_plugins:#{dir}&quot;
    load_plugin_dir(dir)
    load_gem_plugins
  end
||&lt;
&gt;|ruby|
  def load_plugin_dir(dir)
    dir = File.expand_path(dir)
puts &quot;!load_plugin_dir:#{dir}&quot;
    Dir.entries(dir).sort.each {|fname|
puts &quot;!load_plugin_dir:#{fname}&quot;
      if fname =~ /\.rb$/
        require File.join(dir, fname)
      end
    }
    nil
  end
||&lt;
&gt;|ruby|
  private
  def load_gem_plugins
    return unless defined? Gem
    plugins = Gem.find_files('fluent_plugin')
puts &quot;!load_gem_plugins:#{plugins}&quot;
    plugins.each {|plugin|
      begin
        load plugin
      rescue ::Exception =&gt; e
        msg = &quot;#{plugin.inspect}: #{e.message} (#{e.class})&quot;
        $log.warn &quot;Error loading Fluent plugin #{msg}&quot;
      end
    }
  end
||&lt;
&gt;|ruby|
  def try_load_plugin(name, type)
puts &quot;!try_load_plugin:#{name}, #{type}&quot;
    case name
    when 'input'
      path = &quot;fluent/plugin/in_#{type}&quot;
    when 'output'
      path = &quot;fluent/plugin/out_#{type}&quot;
    when 'buffer'
      path = &quot;fluent/plugin/buf_#{type}&quot;
    else
      return
    end

    # prefer LOAD_PATH than gems
    files = $LOAD_PATH.map {|lp|
puts &quot;!try_load_plugin:#{lp}&quot;
      lpath = File.join(lp, &quot;#{path}.rb&quot;)
      File.exist?(lpath) ? lpath : nil
    }.compact
    unless files.empty?
      # prefer newer version
      require files.sort.last
      return
    end

    # search gems
    if defined?(::Gem::Specification) &amp;&amp; ::Gem::Specification.respond_to?(:find_all)
      specs = Gem::Specification.find_all {|spec|
        spec.contains_requirable_file? path
      }

      # prefer newer version
      specs = specs.sort_by {|spec| spec.version }
      if spec = specs.last
        spec.require_paths.each {|lib|
          file = &quot;#{spec.full_gem_path}/#{lib}/#{path}&quot;
          require file
        }
      end
||&lt;
実行結果はこうなる。
&gt;||
$ /usr/local/bin/fluentd -c /略/fluent-hoge/fluent.conf -p /略/fluent-hoge/plugin/
2012-09-07 19:37:32 +0900: starting fluentd-0.10.25
2012-09-07 19:37:32 +0900: reading config file path=&quot;/略/fluent-hoge/fluent.conf&quot;
||&lt;
→はじめはfluent本体のpluginを呼んでる。
&gt;||
!load_plugins:/usr/local/lib/ruby/gems/1.9.1/gems/fluentd-0.10.25/lib/fluent/plugin
!load_plugin_dir:/usr/local/lib/ruby/gems/1.9.1/gems/fluentd-0.10.25/lib/fluent/plugin
!load_plugin_dir:.
!load_plugin_dir:..
!load_plugin_dir:buf_file.rb
!load_plugin_dir:buf_memory.rb
!load_plugin_dir:buf_zfile.rb
!load_plugin_dir:in_exec.rb
!load_plugin_dir:in_forward.rb
!load_plugin_dir:in_gc_stat.rb
!load_plugin_dir:in_http.rb
!load_plugin_dir:in_object_space.rb
!load_plugin_dir:in_status.rb
!load_plugin_dir:in_stream.rb
!load_plugin_dir:in_syslog.rb
!load_plugin_dir:in_tail.rb
!load_plugin_dir:out_copy.rb
!load_plugin_dir:out_exec.rb
!load_plugin_dir:out_exec_filter.rb
!load_plugin_dir:out_file.rb
!load_plugin_dir:out_forward.rb
!load_plugin_dir:out_null.rb
!load_plugin_dir:out_roundrobin.rb
!load_plugin_dir:out_stdout.rb
!load_plugin_dir:out_stream.rb
!load_plugin_dir:out_test.rb
||&lt;
→gemはない。
&gt;||
!load_gem_plugins:[]
||&lt;
→ここから他のpluginディレクトリ。まずは/etc/fluent/plugin。
&gt;||
!load_plugin_dir:/etc/fluent/plugin
!load_plugin_dir:.
!load_plugin_dir:..
||&lt;
→そして-pオプションで指定したディレクトリ。
&gt;||
!load_plugin_dir:/略/fluent-hoge/plugin
!load_plugin_dir:.
!load_plugin_dir:..
!load_plugin_dir:fluent-plugin-hogehoge
!load_plugin_dir:simple_thread_plugin.rb
||&lt;
&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;あれ？ディレクトリの上さらっと舐めるだけ？&lt;/span&gt;

ここからtypeがaddされている。みつかったものは特に何も表示されず次へ次へ……。
&gt;||
2012-09-07 20:16:24 +0900: adding source type=&quot;forward&quot;
2012-09-07 20:16:24 +0900: adding source type=&quot;thread&quot;
2012-09-07 20:16:24 +0900: adding source type=&quot;tail&quot;
2012-09-07 20:16:24 +0900: 'pos_file PATH' parameter is not set to a 'tail' source.
2012-09-07 20:16:24 +0900: this parameter is highly recommended to save the position to resume tailing.
||&lt;
で、今回見つかってないtypeが出てくると、try_load_pluginが呼ばれる。
&gt;||
2012-09-07 20:16:24 +0900: adding source type=&quot;inputs&quot;
!try_load_plugin:input, inputs
!try_load_plugin:/usr/local/lib/ruby/gems/1.9.1/gems/http_parser.rb-0.5.3/lib
!try_load_plugin:/usr/local/lib/ruby/gems/1.9.1/gems/msgpack-0.4.7/lib
!try_load_plugin:/usr/local/lib/ruby/gems/1.9.1/gems/yajl-ruby-1.1.0/lib
!try_load_plugin:/usr/local/lib/ruby/gems/1.9.1/gems/iobuffer-1.1.2/lib
!try_load_plugin:/usr/local/lib/ruby/gems/1.9.1/gems/cool.io-1.1.0/lib
!try_load_plugin:/usr/local/lib/ruby/gems/1.9.1/gems/http_parser.rb-0.5.3/lib
!try_load_plugin:/usr/local/lib/ruby/gems/1.9.1/gems/fluentd-0.10.25/lib
!try_load_plugin:/usr/local/lib/ruby/gems/1.9.1/gems/json-1.7.4/lib
!try_load_plugin:/usr/local/lib/ruby/site_ruby/1.9.1
!try_load_plugin:/usr/local/lib/ruby/site_ruby/1.9.1/i686-linux
!try_load_plugin:/usr/local/lib/ruby/site_ruby
!try_load_plugin:/usr/local/lib/ruby/vendor_ruby/1.9.1
!try_load_plugin:/usr/local/lib/ruby/vendor_ruby/1.9.1/i686-linux
!try_load_plugin:/usr/local/lib/ruby/vendor_ruby
!try_load_plugin:/usr/local/lib/ruby/1.9.1
!try_load_plugin:/usr/local/lib/ruby/1.9.1/i686-linux
!try_load_plugin:/usr/local/lib/ruby/gems/1.9.1/gems/fluentd-0.10.25/lib
2012-09-07 20:16:24 +0900: config error file=&quot;/略/fluent-hoge/fluent.conf&quot; error=&quot;Unknown input plugin 'inputs'. Run 'gem search -rd fluent-plugin' to find plugins&quot;
2012-09-07 20:16:24 +0900: process finished code=256
2012-09-07 20:16:24 +0900: process died within 1 second. exit.
||&lt;
まずプラグインの種類によって読み込まれるパスとファイル名が決まるみたい。
&gt;|ruby|
    case name
    when 'input'
      path = &quot;fluent/plugin/in_#{type}&quot;
    when 'output'
      path = &quot;fluent/plugin/out_#{type}&quot;
    when 'buffer'
      path = &quot;fluent/plugin/buf_#{type}&quot;
    else
      return
    end
||&lt;
&gt;&gt;
Or you can create gem package that includes lib/fluent/plugin/&lt;TYPE&gt;_&lt;NAME&gt;.rb file.
&lt;&lt;
がここで効いてくるわけか。

そしたら$LOAD_PATHの中にfluent/plugin/in_inputs.rbがないか探しに行ってる。そしてそこにもなかった場合、インストールしたGemの中を探す。
&gt;|ruby|
    # prefer LOAD_PATH than gems
    files = $LOAD_PATH.map {|lp|
puts &quot;!try_load_plugin:#{lp}&quot;
      lpath = File.join(lp, &quot;#{path}.rb&quot;)
      File.exist?(lpath) ? lpath : nil
    }.compact
    unless files.empty?
      # prefer newer version
      require files.sort.last
      return
    end

    # search gems
    if defined?(::Gem::Specification) &amp;&amp; ::Gem::Specification.respond_to?(:find_all)
      specs = Gem::Specification.find_all {|spec|
        spec.contains_requirable_file? path
      }

      # prefer newer version
      specs = specs.sort_by {|spec| spec.version }
      if spec = specs.last
        spec.require_paths.each {|lib|
          file = &quot;#{spec.full_gem_path}/#{lib}/#{path}&quot;
          require file
        }
      end
||&lt;
っていう流れになっているらしい。

うーんGemで入れたら読めるんだけどなー。
</body>
<comments>
<comment>
<username>tagomoris</username>
<body>-I PATH オプションも同時に指定するとうまくいきませんか</body>
<timestamp>1347520990</timestamp>
</comment>
<comment>
<username>kk_Ataka</username>
<body>なるほど！-Iオプションで指定してもうまくいきますね。&lt;br&gt;それが一番良さそうです！　ありがとうございます！&lt;br&gt;&lt;br&gt;今回は、-p PATHの直下がディレクトリの場合でも、その先が&lt;br&gt;lib/fluent/plugin/xx_xx.rbのようになっていれば&lt;br&gt;再帰的に探してくれないのかなーと思い調べてみた次第です！</body>
<timestamp>1347545408</timestamp>
</comment>
<comment>
<username>repeatedly</username>
<body>個人的には「オプション-pを複数指定する」というのはあまり気にならないですね．そもそも形になっていプラグインを平行で開発する，という状況があまりないのと，C++とかのリンク先指定で複数追加するのに自分が慣れてしまっているのかもしれませんが…^^;</body>
<timestamp>1347910588</timestamp>
</comment>
</comments>
</day>
<day date="2012-09-14" title="">
<body>
*1347595853*[Ruby][StartUp][Jekyll]JekyllとJekyll Bootstrapでかんたん静的サイト生成…するための準備
**あらすじ
-はてな記法、綺麗に出力できて今までお気に入りだったんだけど、欠点として、はてなでしか使わないという問題が
-他にも文章書く時にreSTとかMarkdownを使うと捗るが、結局アウトプットするのは個人でははてなが多い……((個人でない場合はExcelとか))
-そもそもはてな記法は基本はてなじゃなきゃ見れない
-なら最初から…？

うーん。他の記法使う時がきたのか。

**Jekyllとは
&gt;https://github.com/mojombo/jekyll/wiki&gt;
Jekyll is a simple, blog aware, static site generator.
&lt;&lt;
静的サイトのジェネレーターなのね。 HTML, Markdown, textile なんでもござれ。

**参考サイト
-[https://github.com/mojombo/jekyll:title]
-[http://mattn.kaoriya.net/software/lang/ruby/20090409185248.htm:title]
-[http://melborne.github.com/2012/05/13/first-step-of-jekyll/:title]
-[http://tokkonopapa.github.com/blog/2011/12/28/easy-usage-of-jekyll-on-github/:title]
-[http://d.hatena.ne.jp/yuum3/20120620/1340180894:title]
-[http://d.hatena.ne.jp/takuti/20110724/1311464070:title]
-[http://dsuket.hatenablog.com/entry/2012/03/06/191459:title]
-[http://d.hatena.ne.jp/seinzumtode/20120426/1335402322:title]

**環境
-CentOS 6.2 と、WindowsXP
-Ruby 1.9.2
--Bundler 1.1.4
-Git 1.7.9.6
-Jekyll 0.11.2
-RedCloth 4.2.9

**いきなり動かす
本来は決まったディレクトリを作ったり、コンフィグファイルを作ったり、レイアウトファイルを作ったりしていく……のだけど、Jekyll Bootstrapを使えばいきなりフルセットで動かす事ができる。

取得はGitで。
&gt;||
$ git clone http://github.com/plusjade/jekyll-bootstrap.git JEKYLL_HOME
||&lt;

JekyllはBundlerでインストールするので移動してGemfileを作成。そしてjekyllコマンドで実行！
&gt;||
$ cd JEKYLL_HOME
$ vi Gemfile
$ cat Gemfile
source :rubygems
source &quot;http://rubygems.org&quot;

gem 'jekyll'
gem 'RedCloth'

$ bundle install --path vendor/bundle
$ bundle exec jekyll --server
||&lt;
これで、http://localhost:4000 にアクセスしてみると超カッコいいサンプルページが出来上がっている。CentOSは以上。

**ハマり for Windows
ところで、Windows XPで同じ事やっても_site下に静的ファイルが全然できなかった。……まあ、そもそもXP使うなって話？

結果としては、&lt;span class=&quot;deco&quot; style=&quot;color:#FF0000;&quot;&gt;RedCloth-4.2.9-x86-mingw32直下のspecディレクトリを削除したら生成されるようになった。&lt;/span&gt;静的ファイル生成の流れを追っていくと、
-jekyll/bin/jekyll内でsite.processメソッドが呼ばれている
-jekyll/lib/jekyll/site.rbのprocessメソッドからread,readからread_directoriesメソッドが呼ばれている
-read_directoriesメソッドは以下のようになっている
&gt;|ruby|
     def read_directories(dir = '')
       base = File.join(self.source, dir)
       entries = Dir.chdir(base) { filter_entries(Dir['*']) }
       self.read_posts(dir)

       entries.each do |f|
         f_abs = File.join(base, f)
         f_rel = File.join(dir, f)
         if File.directory?(f_abs)
           next if self.dest.sub(/\/$/, '') == f_abs
           read_directories(f_rel)
         elsif !File.symlink?(f_abs)
           first3 = File.open(f_abs) { |fd| fd.read(3) }
           if first3 == &quot;---&quot;
#＼yaml！／
             # file appears to have a YAML header so process it as a page
             pages &lt;&lt; Page.new(self, self.source, dir, f)
           else
             # otherwise treat it as a static file
             static_files &lt;&lt; StaticFile.new(self, self.source, dir, f)
           end
         end
       end
     end
||&lt;
-読み込むファイルをputs して眺めていると、＼yaml！／のところでRedCloth-4.2.9-x86-mingw32\spec\fixtures\basic.ymlを呼んだ瞬間止まっている模様……
-まあ、specファイルだしなくてもいいよね？　削除、で、動いたという事で((なんでbasic.ymlを読もうとして止まったかまでは調べてないです……))

で、動かす(Windows)。
&gt;||
$ be jekyll --server
Configuration from C:/HOGE/jekyll/_config.yml
Auto-regenerating enabled: C:/HOGE/project/jekyll -&gt; C:/HOGE/project/jekyll/_site
[2012-09-12 23:50:51] regeneration: 983 files changed
[2012-09-12 23:50:54] INFO  WEBrick 1.3.1
[2012-09-12 23:50:54] INFO  ruby 1.9.2 (2011-07-09) [i386-mingw32]
[2012-09-12 23:50:54] INFO  WEBrick::HTTPServer#start: pid=5944 port=4000

 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Unclosed span (waiting for [&quot;_&quot;])
| ---------------------------------------------------------------------------
| Included file 'sig.markdown' not found in _includes directoryEOF
| -------------------------------------------------------------|--------------
|                                                              +--- Byte 61
| Shown bytes [0 to 61] of 61:
| &gt;Included file 'sig.markdown' not found in _includes directory
|
| At line 2
|       text     |Included file 'sig.markdown' not found in _includes directory|
|      empty --&gt; ||
|       text     |This _is_ cool|
|
|
| Elements read in span:
|
| Current string:
|   &quot;includes directory&quot;
+---------------------------------------------------------------------------
!C:/HOGE/project/jekyll/vendor/bundle/ruby/1.9.1/gems/maruku-0.6.0/lib/maruku/errors_management.rb:49:in `maruku_error'
!C:/HOGE/project/jekyll/vendor/bundle/ruby/1.9.1/gems/maruku-0.6.0/lib/maruku/input/parse_span_better.rb:222:in `read_span'
!C:/HOGE/project/jekyll/vendor/bundle/ruby/1.9.1/gems/maruku-0.6.0/lib/maruku/input/parse_span_better.rb:423:in `read_em'
!C:/HOGE/project/jekyll/vendor/bundle/ruby/1.9.1/gems/maruku-0.6.0/lib/maruku/input/parse_span_better.rb:202:in `read_span'
!C:/HOGE/project/jekyll/vendor/bundle/ruby/1.9.1/gems/maruku-0.6.0/lib/maruku/input/parse_span_better.rb:46:in `parse_span_better'
\___________________________________________________________________________

||&lt;
エラーは出てるけど、これで http://localhost:4000にアクセスするとページが見れる！
sig ... 署名？　あんまりよくないけど、空っぽでも存在さえすれば怒られないっぽい。
</body>
</day>
</diary>
