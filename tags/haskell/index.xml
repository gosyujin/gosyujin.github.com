<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haskell on kk_Atakaの日記</title>
    <link>https://gosyujin.github.io/tags/haskell/</link>
    <description>Recent content in Haskell on kk_Atakaの日記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Tue, 19 Feb 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://gosyujin.github.io/tags/haskell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>すごいHaskellたのしく学ぼうでHaskellことはじめ4</title>
      <link>https://gosyujin.github.io/2013/02/19/haskell-helloworld5/</link>
      <pubDate>Tue, 19 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://gosyujin.github.io/2013/02/19/haskell-helloworld5/</guid>
      <description>前回までのあらすじ すごいHaskellたのしく学ぼうでHaskellことはじめ3
なんとなーく再帰は書けたかなー？というレベル。
この先生きのこれるのか……。
参考  すごいHaskellたのしく学ぼう  5章 高階関数 カリー化  Haskellでは すべての関数が引数を一つだけとる 事になっている。  ……んでも今まで普通に二つとか引数とってなかったっけ？ max とか   max関数 本書より、 max 4 5 の場合……。
 はじめに max 4 が適用される max 4 の返り値は 5 に適用するための別の関数 別の関数 5 が適用され、最終的な値が返る  ふーむ……？
max関数の型はこう。
Prelude&amp;gt; :t max max :: Ord a =&amp;gt; a -&amp;gt; a -&amp;gt; a こう書く事もできる。 a型の値を引数にとり、a型の値を返す
max :: Ord a =&amp;gt; a -&amp;gt; ( a -&amp;gt; a ) 関数を本来より少ない引数で呼び出すことを 部分適用する という。 部分適用 すると、関数をその場で作りだし、それを他の関数に渡せる。</description>
    </item>
    
    <item>
      <title>すごいHaskellたのしく学ぼうでHaskellことはじめ3</title>
      <link>https://gosyujin.github.io/2013/02/04/haskell-helloworld4/</link>
      <pubDate>Mon, 04 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://gosyujin.github.io/2013/02/04/haskell-helloworld4/</guid>
      <description>前回までのあらすじ すごいHaskellたのしく学ぼうでHaskellことはじめ2
参考  すごいHaskellたのしく学ぼう  4章 再帰 リストの中の最大値を取得するmax&amp;rsquo;関数を実装する。
max&amp;rsquo;関数 手順  動作原理はP53の図の通り。max&amp;rsquo;をずーっと掘っていく max&amp;rsquo;にリストを渡すと、ずーっと3番目のmax&amp;rsquo;が実行されるが、最後の一回だけは要素一つのリストになっているので、2番目の式が実行される 最後までいったらさかのぼる  max&amp;#39; [] = error &amp;#34;empty&amp;#34; -- 1番目 max&amp;#39; [x] = x -- 2番目 max&amp;#39; (x:xs) = max x (max&amp;#39; xs) -- 3番目 実行結果 *Main&amp;gt; max&amp;#39; [1,4,3,2,5,6] 6 *Main&amp;gt; max&amp;#39; [2] 2 *Main&amp;gt; max&amp;#39; [] *** Exception: empty 他の再帰 残りの再帰例も写経してみる+一部いじってみる。
replicate&amp;#39; n x | n &amp;lt;= 0 = [] | otherwise = x:concat where concat = replicate&amp;#39; (n-1) x take&amp;#39; n _ | n &amp;lt;= 0 = [] take&amp;#39; _ [] = [] take&amp;#39; n (x:xs) = x:concat where concat = take&amp;#39; (n-1) xs reverse&amp;#39; [] = [] reverse&amp;#39; (x:xs) = reverse&amp;#39; xs ++ [x] zip&amp;#39; [] _ = [] zip&amp;#39; _ [] = [] zip&amp;#39; (x:xs) (y:ys) = (x,y):concat where concat = zip&amp;#39; xs ys 写経してみれば、なんとなく書きっぷりはわかってくるな。</description>
    </item>
    
    <item>
      <title>すごいHaskellたのしく学ぼうでHaskellことはじめ2</title>
      <link>https://gosyujin.github.io/2013/01/24/haskell-helloworld3/</link>
      <pubDate>Thu, 24 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://gosyujin.github.io/2013/01/24/haskell-helloworld3/</guid>
      <description>前回までのあらすじ すごいHaskellたのしく学ぼうでHaskellことはじめ
GitHub Pagesの方にリンクを貼ってみよう。
参考  すごいHaskellたのしく学ぼう  3章 関数の構文 パターンマッチ  関数の場合分け 上から順番に調べられる 全てに合致するパターンを最後に入れておくと吉  lucky 7 = &amp;#34;SEVEN !&amp;#34; lucky x = &amp;#34;Other Number&amp;#34;*Main&amp;gt; lucky 1 &amp;#34;Other Number&amp;#34; *Main&amp;gt; lucky 7 &amp;#34;SEVEN !&amp;#34; *Main&amp;gt; lucky 9 &amp;#34;Other Number&amp;#34; 上から順番なので、一行目と二行目をひっくり返すと、引数に7を渡しても &amp;ldquo;SEVEN !&amp;rdquo; が出力されなくなる。
タプルのパターンマッチ addVectors (x1, y1) (x2, y2) = (x1 + x2, y1 + y2)*Main&amp;gt; addVectors (1,3) (5,9) (6,12) リストのパターンマッチ x:xs … リストの先頭要素xと残りのxs(リスト [1,2,3] は 1:2:3:[] と表せる)</description>
    </item>
    
    <item>
      <title>すごいHaskellたのしく学ぼうでHaskellことはじめ</title>
      <link>https://gosyujin.github.io/2013/01/21/haskell-helloworld2/</link>
      <pubDate>Mon, 21 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://gosyujin.github.io/2013/01/21/haskell-helloworld2/</guid>
      <description>あらすじ Halkellを学ぶにあたってのメモやわからない所を以下に時系列でつらつらと。
参考  すごいHaskellたのしく学ぼう  2章 型を信じろ！  Haskellでは、すべての式の型がコンパイル時にわかっている また、自分で書かなくても型推論でなんとかしてくれる 式の型は :t コマンドで調べられる  *Main&amp;gt; :t &amp;#34;Hello&amp;#34; &amp;#34;Hello&amp;#34; :: [Char] *Main&amp;gt; :t [1,2,3] [1,2,3] :: Num t =&amp;gt; [t] *Main&amp;gt; :t (True, &amp;#34;Hello&amp;#34;) (True, &amp;#34;Hello&amp;#34;) :: (Bool, [Char]) *Main&amp;gt; :t 4 == 5 4 == 5 :: Bool  :: は の型を持つ の意味  &amp;ldquo;Hello&amp;rdquo;はChar型のリスト(文字列)を持つ   こんな関数を作る。
removeNonUppercase :: [Char] -&amp;gt; [Char] removeNonUppercase st = [c | c &amp;lt;- st, c `elem` [&amp;#39;A&amp;#39;.</description>
    </item>
    
    <item>
      <title>プログラミングHaskellでHaskellことはじめ</title>
      <link>https://gosyujin.github.io/2013/01/09/haskell-helloworld/</link>
      <pubDate>Wed, 09 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://gosyujin.github.io/2013/01/09/haskell-helloworld/</guid>
      <description>あらすじ やりたいことがあるのだけど、調べていたらHaskellでやってみました系の記事が多い気がしたので読めるようになりたい！
参考  プログラミングHaskell  ※ とても良書だと思うのだけど、超初心者が挑むには早すぎたので、以下の簡単なライブラリを使用してみた後は「すごいHaskell」にいったん移行しました。
(本の中の記述が数学記号で書かれているのが予想外にキツい。記号の意味はわかるんだけど、 Haskellでの書き方が わからないので脳内で数学記号をHaskellに戻して…をやっていると全く進まなかった…。一周目はまず無心で写経しないとダメなタイプ)
インストール Haskell入門 5ステップ - HaskellWiki によると、HaskellはGHCかHugsのどちらかで行けるよう。
ただし、Hugsはもうメンテナンスされていないみたい。
Hugs Downloading Hugs からDL。Windows版は.exeなのでそのままインストール。
GHC The Glasgow Haskell Compiler からDL。これもWindows版は.exeがあるのでそのままインストールできる。
※ これよりもHaskellPlatformも入れた方が良いらしい。オールインワン的な？
Downloadページには Bundled packages and cabal-install と書かれている。cabalとは
 Cabal is a system for building and packaging Haskell libraries and programs.
 パッケージを作る…とかはまだ必要ないと思うけど。The Haskell Cabal からDLできるのだが、setupファイルが.hsで、Haskellファイルのようなので、Haskellを入れてからsetupする感じか。まだいらない。
ghciのコマンド コロンから始まるいろいろなコマンドでファイルをロードしたり、ghciを終了したりできる。まずは脱出できるように。
変数 小文字から始まればよいみたい。意外なのはシングルクォーテーションが使えること。まじか。
test.hsとして、関数をこう定義する。
double x&amp;#39; = x&amp;#39; + x&amp;#39; ghciから呼ぶ。
Prelude&amp;gt; :load test.hs [1 of 1] Compiling Main ( test.</description>
    </item>
    
  </channel>
</rss>