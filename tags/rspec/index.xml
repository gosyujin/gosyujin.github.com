<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RSpec on kk_Atakaの日記</title>
    <link>https://note.gosyujin.com/tags/rspec/</link>
    <description>Recent content in RSpec on kk_Atakaの日記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Sun, 03 Jun 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://note.gosyujin.com/tags/rspec/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TDD Boot Camp 大阪 1.0( #tddbc ) に参加しました</title>
      <link>https://note.gosyujin.com/2012/06/03/1338724924/</link>
      <pubDate>Sun, 03 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2012/06/03/1338724924/</guid>
      <description>[TDD][RSpec][Ruby][イベント]TDD Boot Camp 大阪 1.0( #tddbc ) に参加しました 概要  http://atnd.org/events/28762:title なかなかスケジュールの都合がつかず、近場で開催されても参加できないことが多かったので、「次こそは！」と思った矢先の大阪開催だったので参加しました  まとめ  楽天カフェテリア＠大阪、非常に素晴らしい会場でした。素晴らしい会場でした！  カフェテリアは木製の椅子のため、半日近いイベントの場合腰が悪い人は座布団を持って行ったほうがいいですね  TDDとペアプロに関しての経験をつむことができた  よしおかさん、関さん、和田さんを独占していたRubyのテーブル…  その中でも恐れ多くも関さんと和田さんを独占してしまった。会場撮影されていた様子^^; http://via.me/-1nhb1te:title  成果物はStep3のはじめまで[https://github.com/gosyujin/tddbc:title=GitHub]にあげました  他の言語でどう書くか、書き方などを見て、自分のメイン言語のテスティングフレームワークでも出来るかな？　と調べる事が大事 ねんがんのグリーンバンドを手に入れたぞ！ TDDは一人でも出来るので、どんどん書いて量を質に転化させていく！ 主催の@[https://twitter.com//bufferings:title] さん、TAの皆さん、スピーカーである@[https://twitter.com/t_wada:title] さん、@[https://twitter.com//hyoshiok:title] さん、@[https://twitter.com//m_seki:title] さん、Ruby島の皆さんお疲れ様でした！  以下、時系列にそったまとめ
TDDのこころ @[https://twitter.com//t_wada:title] さん BootCampとは  新兵に教官が優しく教える しかしスライドの画像[1]は2012年現在もはや厳しい…  今日やること  ペアプログラミングを体験してみる コードレビュー大会  同じコードを同僚と解くという機会はほぼない 同じお題を他の人はどう考えるのか、他の言語ではどうなるのか   ふりかえり  KPT形式でフィードバック  ソフトウェア開発の三本柱  バージョン管理、テスティング、自動化  RPGのノーセーブクリア＝バージョン管理なしの開発 今コードが動いているのか動いていないのか＝テスティング 人間が手作業でやっているものをシェル化、Jenkinsで回したりで機械に任せる＝自働化、自動化  機械がうまくいってない時だけ教えてくれる    「テスト」とは  誰が、なんのためにテストをするのかで簡単に分類  Developer Testing  開発者が開発促進のため  Customer Testing  顧客が進捗管理のため(受入テストとか)  QA Testing  品質保証担当者が品質保証のため    「TDD」とは  テスト駆動開発入門 ケント・ベック 動く、きれいなコードへ  そこに至るための道へは？  きれいな設計をして、それを実装して、それが動作する…きれいな設計とは？   動かすことで初めてわかることがソフトウェア開発にはとても多い  なら早く超えよう(ただしここで止まると技術的負債になる)   TDDのサイクル  テストを書き テストを実行して失敗させ(Red) 目的のコードを書き テストを成功させ(Green) そのテスト通るまま中を綺麗にしていく(Refactor) これを繰り返す  TDDのやり方  大きな問題は切り分けて1つずつ たくさんの問題も1つずつ 何をテストすればよいのか  開発を進めにくくする要因→何かわからないもの、不安   TDDをすることにより  即座にフィードバックを得る 書いたコードへの自信持つ これから書くコードに自信を持つ  TDDの真の目的  不安の克服 健康  コードの健康=仕様変更に対応できる チームの健康=仕様変更に備える事ができる   ペアプロ デモ(FizzBuzz)  ゴールから書く！  Fizzの場合  何がゴール？ Fizzが返る どうなった時Fizz？ …としていく   テストコードのテストってどうするの？  テストコードと実装コードを互いにテストしあう！  そのタイミングは実装する前にやってしまう、仮実装してしまう   実際にペアプロのデモを第三者視点で見て、以下のようなことを思った  文化の違いをどう解決していくか  エディタ、キーバインド、などなど  細かなTipsが共有されていく  「xxはyyっていうショートカットで出せますよ」「知らんかった…」  ナビゲータって一人で仕事をしているときはやる事がないので結構難しそう…   ペアプロ  Ruby島は4人でした  @[https://twitter.</description>
    </item>
    
  </channel>
</rss>