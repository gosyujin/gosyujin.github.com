<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on kk_Atakaの日記</title>
    <link>/tags/scala/</link>
    <description>Recent content in Scala on kk_Atakaの日記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Sat, 30 Jul 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Gatlingを使用してみた</title>
      <link>/2016/07/30/gatling-helloworld/</link>
      <pubDate>Sat, 30 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/07/30/gatling-helloworld/</guid>
      <description>あらすじ サーバーにリクエストをいっぱい投げて負荷をかけたい。(いわゆる弾投げ)
 WEB+DB-PRESS-Vol.83 Javaの鉱脈 Gatlingによる多彩で柔軟な負荷テスト 便利すぎる負荷試験テストツールGatlingの使い方~自力ソース編~ - Qiita Scala 初心者が Gatling をぶっ放して負荷テストをやってみました - SHANON　Engineer&amp;rsquo;s　Blog  Gatlingとは  負荷テストツール 2011年頃から作成 Scalaで実装されている Scalaでテストケースを書く ライバルはJMeter  実際に使う  Gatling Project, Stress Tool  からダウンロードできる。今回はzipでDLした。
 DLしたzipファイルを解凍、ディレクトリに移動し、適当なテストケースを作成する  cd gatling-charts-highcharts-bundle-2.2.1 vi user-files/simulations/computerdatabase/advanced/Sample.scala  テストコードはサンプルを見ながら…scalaやったことないからちょっと難しい  import io.gatling.core.Predef._ import io.gatling.http.Predef._ import scala.concurrent.duration._ class Sample extends Simulation { // プロトコルの定義  val httpConf = http .baseURL(&amp;#34;http://localhost:8080&amp;#34;) // シナリオの定義  val scn = scenario(&amp;#34;Sample&amp;#34;) .</description>
    </item>
    
  </channel>
</rss>