<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>StartUp on kk_Atakaの日記</title>
    <link>https://blog.gosyujin.com/tags/startup/</link>
    <description>Recent content in StartUp on kk_Atakaの日記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Fri, 09 Aug 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.gosyujin.com/tags/startup/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WindowsにRedmine2.3をインストールする手順と、プラグイン作成用メモ</title>
      <link>https://blog.gosyujin.com/2013/08/09/redmine2/</link>
      <pubDate>Fri, 09 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.gosyujin.com/2013/08/09/redmine2/</guid>
      <description>あらすじ Redmine 2.0台におけるインストール方法〜起動方法とプラグインの作り方のメモ。
環境  Windows 7 32bit Ruby 1.9.3  Bundler 1.3.5 導入済 DevKit 導入済  Redmine 2.3.1 MySql 5.6.12.1  参考サイト  Redmineのインストール — Redmine Guide 日本語訳 Hooks - Redmine Hooks List - Redmine プラグイン ホック - r-labs ビュー(view) - Railsドキュメント  Redmineインストール手順 まずは準備。
MySQL 実はMySQLさわるのはじめてかもしれない。
 MySQL :: Download MySQL Installer からインストーラをDL。Oracleのアカウントが必要 基本的にPathなどの設定はそのまま。  Choosing a Setup Type: Developer Default を選択 MySQL Server Configuration: Server Configuration Type は Development Machine ポートは 3306 root のパスワードを入力 Windows Service Details の Start the MySQL Server at System Startup のチェックだけ KILL そんなに使わないしPCがしょぼいので常時起動させておくこともない   全部終わると MySQL Workbench が立ち上がる。</description>
    </item>
    
    <item>
      <title> 入門Chef Solo - Infrastructure as Code を読みながらChef Soloで遊べるようになるまで</title>
      <link>https://blog.gosyujin.com/2013/04/01/chef-helloworld/</link>
      <pubDate>Mon, 01 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.gosyujin.com/2013/04/01/chef-helloworld/</guid>
      <description>あらすじ Chefを触ってみたいと思いつつ、取っ掛かりを作るにはかなり用語が多いなーとウダウダしていたら、3/11にこんな本が出版されており。
 Amazon.co.jp： 入門Chef Solo - Infrastructure as Code eBook: 伊藤直也: Kindleストア  早速購入。
本書のはじめにはこんな事が書かれていました。
 公式ドキュメントがあまりにしっかり書かれすぎていることもあって「はじめの一歩」としてどの辺りを知ればいいのか、つまり「普通に使う分にはこの程度知っていればOK」というのがどの辺りなのかを掴むのが難しい…というのが筆者の個人的な印象です。
 はじめの一歩をどうしようか迷ってる場合オススメと……。
ではHello Worldしてみよう。
環境(Windows編)  Windows XP Ruby 1.9.3 Rubygems 1.8.24  手順 Chef インストール ネットワークに繋がっていないぼっち環境のため、vendor/cacheディレクトリに必要なGemをありったけ放り込んでbundle install。
$ bundle install --local --path vendor/bundle Installing erubis (2.7.0) Installing highline (1.6.16) Installing json (1.7.7) Installing mixlib-log (1.4.1) Installing mixlib-authentication (1.3.0) Installing mixlib-cli (1.3.0) Installing mixlib-config (1.1.2) Installing win32-api (1.4.8) Installing windows-api (0.4.2) Installing windows-pr (1.</description>
    </item>
    
    <item>
      <title>Ruby 2.0.0 をpikとrvm経由でインストール&amp;環境構築</title>
      <link>https://blog.gosyujin.com/2013/02/25/ruby200-helloworld-pik-rvm/</link>
      <pubDate>Mon, 25 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.gosyujin.com/2013/02/25/ruby200-helloworld-pik-rvm/</guid>
      <description>あらすじ Ruby 2.0.0 がリリースされたので、インストールしつつ、新機能を使ってみる。
…と思ったけど、意外とてこずったので、とりあえずインストールと準備だけ。
後途中にGemの作り方めも。
環境1  Windows XP Ruby 2.0.0 pik  インストール まずはインストール。pikなので pik install で。
$ pik install ruby 2.0.0 ** Downloading: http://rubyforge.org/frs/download.php/76807/ruby-2.0.0-p0-i386-mingw32.7z to: C:\Documents and Settings\user\.pik\downloads\ruby-2.0.0-p0-i386-mingw32.7z ruby-2.0.0-p0-i386-mingw32.7z: 100% |oooooooooo| 8.9MB/ 8.9MB Time: 00:00:57 ** Extracting: C:\Documents and Settings\user\.pik\downloads\ruby-2.0.0-p0-i386-mingw32.7z to: C:\rubies\Ruby-200-p0 done ** Adding: 200: ruby 2.0.0p0 (2013-02-24) [i386-mingw32] Located at: C:\rubies\Ruby-200-p0\bin あっさり。
$ pik default $ ruby -v bundler is found: bundle exec ruby -v ruby 1.</description>
    </item>
    
    <item>
      <title>JekyllをGitHub Pagesに上げるための準備</title>
      <link>https://blog.gosyujin.com/2012/09/20/jekyll/</link>
      <pubDate>Thu, 20 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.gosyujin.com/2012/09/20/jekyll/</guid>
      <description>GitHub Pagesに登録 GitHubより New Repository を選択。
Repository Name を GitHubのID.github.com と入力しリポジトリ作成。
前回の記事で作成していたJekyll Bootstrapのプッシュ先を追加し、プッシュ。
$ git remote add origin git@github.com:gosyujin/gosyujin.github.com.git $ git push -u origin master http://gosyujin.github.com にアクセスしても多分404なので。気長に待つ。
その間にSite Urlに上のUrlでも入れとく。
そんなこんなでサイトが表示されるようになっているはず。(メールが来たら？)
色々な設定 まずは _config.yml 。
デフォルトのmarkdownパーサの maruku は日本語をうまくパースしてくれないみたいなので(日本語でリスト表記ができなかった)、 kramdown に変更する。以下の記述を追加。
markdown:kramdown 他、タイトルや名前、TwitterIDなどを編集。
title:kk_Atakaの日記tagline:author:name:kk_Atakaemail:kk_ataka@ring.skr.jpgithub:gosyujintwitter:kk_Atakafeedburner:feedname production_urlをGitHub Pagesに。
production_url:http://gosyujin.github.com ここから先はJekyll Bootstrapでインストールした時に入ったコメント機能とかアクセス解析の設定。
コメント機能 デフォルトでは DISQUS というツールを使用している。まずDISQUS - Elevating the discussionでユーザ登録をする必要がある。(TwitterID等でも可能)
アカウントを作ったら自分のサイトを登録。
ここで入力する shortname を控えておく。
_config.yml にさっきの shortname を記述する。 provider もDISQUSになっている事を確認する。
comments:provider:disqusdisqus:short_name:kkataka(略) これでいけるはず。(だめならUniversalコードを _includes/JB/comments-providers/disqus に貼り付けてみる？) 自分のサイトにコメントが書き込まれると、こんな感じでDISQUSに表示される。</description>
    </item>
    
    <item>
      <title>JekyllとJekyll Bootstrapでかんたん静的サイト生成…するための準備</title>
      <link>https://blog.gosyujin.com/2012/09/14/1347595853/</link>
      <pubDate>Fri, 14 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.gosyujin.com/2012/09/14/1347595853/</guid>
      <description>[Ruby][StartUp][Jekyll]JekyllとJekyll Bootstrapでかんたん静的サイト生成…するための準備 あらすじ  はてな記法、綺麗に出力できて今までお気に入りだったんだけど、欠点として、はてなでしか使わないという問題が 他にも文章書く時にreSTとかMarkdownを使うと捗るが、結局アウトプットするのは個人でははてなが多い……[1] そもそもはてな記法は基本はてなじゃなきゃ見れない なら最初から…？  うーん。他の記法使う時がきたのか。
Jekyllとは  Jekyll is a simple, blog aware, static site generator.
https://github.com/mojombo/jekyll/wiki
 静的サイトのジェネレーターなのね。 HTML, Markdown, textile なんでもござれ。
参考サイト  [https://github.com/mojombo/jekyll:title] http://mattn.kaoriya.net/software/lang/ruby/20090409185248.htm:title http://melborne.github.com/2012/05/13/first-step-of-jekyll/:title http://tokkonopapa.github.com/blog/2011/12/28/easy-usage-of-jekyll-on-github/:title http://d.hatena.ne.jp/yuum3/20120620/1340180894:title http://d.hatena.ne.jp/takuti/20110724/1311464070:title http://dsuket.hatenablog.com/entry/2012/03/06/191459:title http://d.hatena.ne.jp/seinzumtode/20120426/1335402322:title  環境  CentOS 6.2 と、WindowsXP Ruby 1.9.2  Bundler 1.1.4  Git 1.7.9.6 Jekyll 0.11.2 RedCloth 4.2.9  いきなり動かす 本来は決まったディレクトリを作ったり、コンフィグファイルを作ったり、レイアウトファイルを作ったりしていく……のだけど、Jekyll Bootstrapを使えばいきなりフルセットで動かす事ができる。
取得はGitで。
$ git clone http://github.com/plusjade/jekyll-bootstrap.git JEKYLL_HOME JekyllはBundlerでインストールするので移動してGemfileを作成。そしてjekyllコマンドで実行！
$ cd JEKYLL_HOME $ vi Gemfile $ cat Gemfile source :rubygems source &amp;#34;http://rubygems.</description>
    </item>
    
    <item>
      <title>さくらVPSの初期設定メモ</title>
      <link>https://blog.gosyujin.com/2011/12/14/1323868360/</link>
      <pubDate>Wed, 14 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.gosyujin.com/2011/12/14/1323868360/</guid>
      <description>[Unix][備忘録][さくらVPS][StartUp]さくらVPSの初期設定メモ さくらVPSで最初に行ったとりあえず最低クラスの設定を発掘したのでメモ。OSはCentOSか。
参考サイト  http://blog.myfinder.jp/2010/09/vpsssh.html:title http://d.hatena.ne.jp/h-yano/20080225/1203952174:title http://d.hatena.ne.jp/rubellum/20100901/1283321253:title http://havelog.ayumusato.com/develop/server/e135-sakura-vps-setup1.html:title  サーバ ユーザを作成する。
# useradd kk_Ataka # passwd kk_Ataka ユーザをwheelグループに。
# usermod -G wheel kk_Ataka クライアント 鍵を作る。
$ ssh-keygen -t rsa 鍵をサーバに送る。(既に作ってある場合は~/.ssh/にあるid_rsa.pubを)
$ scp id_rsa.pub USER@ADDRESS:PATH ※ポート変えた場合はscpコマンドに -P ポート番号 をつける。
$ scp -P PORT id_rsa.pub USER@ADDRESS:PATH 再びサーバ SSHの設定 鍵を受け取ったらホームディレクトリに.sshディレクトリを作りコピー。
$ mkdir .ssh $ mv id_rsa.pub .ssh/authorized_keys 権限を変更。
$ chmod 700 ~demo/.ssh $ chmod 600 ~demo/.ssh/authorized_keys sshd_configファイルを編集。
# vi /etc/ssh/sshd_config# 使用ポートをデフォルトから変更 Port XXXXX # sshでrootでのログインを許可しない PermitRootLogin no # パスワード認証でのsshログインを許可しない PasswordAuthentication no # PAMによる認証を許可しない UsePAM no 編集したら再起動。[1]</description>
    </item>
    
  </channel>
</rss>