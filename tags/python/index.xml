<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on kk_Atakaの日記</title>
    <link>https://gosyujin.github.io/tags/python/</link>
    <description>Recent content in Python on kk_Atakaの日記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Sun, 26 Jun 2011 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://gosyujin.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PyConJP 2016 in TokyoでSphinxハンズオンのTAをしてきた #pyconjp</title>
      <link>https://gosyujin.github.io/2016/11/30/pyconjp-sphinx-handson-kpt/</link>
      <pubDate>Wed, 30 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gosyujin.github.io/2016/11/30/pyconjp-sphinx-handson-kpt/</guid>
      <description>あらすじ さる9/20のPyConJP 2016 Tutorial day(1日目)にて行われたSphinxハンズオンにTAとして参加しました。
 Sphinx ハンズオン ｜ PyCon JP 2016 in TOKYO  講師: @usaturnさん TA: @takuan_oshoさん、自分   振り返り  参加者は6名  OSはWindows 3人Mac 3人  参加動機など  仕事でドキュメントが残ってない、まとめるにあたってツール選定していたらSphinxを知った 重いWordファイルを操作するのが困難、別のフォーマットで簡単に扱いたい Pythonでデータ解析をするにあたって使用しているツールのドキュメントがほぼSphinx製だったので、Sphinxとは何なのか知っておきたい   簡単にメモ。</description>
    </item>
    
    <item>
      <title>PyConJP 2015 in TokyoでSphinxハンズオンのTAをしてきた #pyconjp</title>
      <link>https://gosyujin.github.io/2015/10/13/pyconjp-sphinx-handson-kpt/</link>
      <pubDate>Tue, 13 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://gosyujin.github.io/2015/10/13/pyconjp-sphinx-handson-kpt/</guid>
      <description>あらすじ さる10/9のPyConJP 2015 Tutorial day(1日目)にて行われたSphinxハンズオンにTAとして参加しました。
ので振り返りメモ。
 プレゼンテーション：Sphinxハンズオン ｜ PyCon JP 2015 in TOKYO  講師: 清水川さん TA: 渋川さん、自分   Sphinx hands-on!! at #PyConJP by #sphinxjp (@ プラザ平成 in 江東区, 東京都 w/ @takanory) https://t.co/0xK38ataBA pic.twitter.com/zkC4ZJJ5zf
&amp;mdash; Takayuki Shimizukawa (@shimizukawa) 2015, 10月 9 
振り返りKPT Keep  会場には遅刻せず余裕を持って到着できた  会場が開場する前に着いちゃって途方に暮れてるところ、@takanoryさんに拾ってもらった。ありがとうございました りんかい線？が遅れてたみたい  教室設営も余裕を持ってできた  …が、1点確認漏れあり、詳しくはpで   Problem  教室設営の時間でPCとプロジェクタの接続確認までやっておけばよかった  ハンズオン開始後にプロジェクタに接続したらまったく映らず スタッフの方が早急に代替機を用意してくれたので無事オンタイムで進められた  質問にパッと答えるのが難しかった  質問は過去に自分がググった記憶があるものも多かった そのため、解決するためのググるワードおよびサイト(sphinx-users.jpの逆引きページに書いてあったな、とか)はおぼろげにわかる しかし、すぐ出てこない あせる  Sphinx Tシャツ持っていくの忘れた  去年のSphinxCon JPで買ったTシャツ、ここで着なくていつ着るんだ！清水川さんが着替えてるのを見て後悔   Try  準備はプロジェクタつなげるまで  まあありがち  もっとSphinxを使おう PyConJPの別日も参加してみたい  その他の感想  ハンズオン参加者の方は大きく分けて「プロダクトガンガン作っているがドキュメントがない=書ける(良い)環境を作りたい」「Officeつらいので代替ツールの導入を考えたい」という2派が多かった  1GBのWordというすさまじいドキュメントの修正をしているという話も…  こんな機能もあるよ Sphinxウェブサポート — Sphinx 1.</description>
    </item>
    
    <item>
      <title>Sphinxをインストールしようとしたら全然関係ないproxy周りでハマった話 続き</title>
      <link>https://gosyujin.github.io/2013/08/23/sphinx-install-python-proxy2/</link>
      <pubDate>Fri, 23 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://gosyujin.github.io/2013/08/23/sphinx-install-python-proxy2/</guid>
      <description>前回までのあらすじ  Sphinxをインストールしようとしたら全然関係ないproxy周りでハマった話  easy_install で見に行く proxy の順番はこんな感じだった。
 引数に明示的に指定した場合は引数を使う ↑を満たさず、環境変数 xxxx_proxy が設定されている場合はそこから読み込む ↑を満たさない場合、 Windows ではレジストリ( IE の proxy 設定)を見にいく  で、なぜか環境変数 HTTP_PROXY を読み込んだ場合は失敗して、 HTTP_PROXY をクリアしてレジストリの proxy 設定を使ったら DL が成功しちゃったという話。
なんでか気になったので調べた。
結論 http 以外 の proxy 設定をしていなかったから。というマヌケなオチ。
次から気をつけよう。
レジストリ( IE の設定)から IE の 設定では、 ツール &amp;gt; インターネットオプション &amp;gt; 接続 &amp;gt; LAN の設定 &amp;gt; 詳細設定 の Secure にも proxy の設定が入れていた。
すべてのプロトコルに同じプロキシサーバーを使用する にチェックを入れていたので。
レジストリから読み込んだ場合、 Python 実行中に取得した変数 proxies (使用する proxy をしまっておく変数)の値はこんな感じだった。
[(&amp;#39;http&amp;#39;, &amp;#39;http://PROXY:PORT/&amp;#39;), (&amp;#39;https&amp;#39;, &amp;#39;https://PROXY:PORT/&amp;#39;), (&amp;#39;ftp&amp;#39;, &amp;#39;ftp://PROXY:PORT&amp;#39;)] 環境変数から 一方、環境変数には HTTP_PROXY しか指定していなかった。 proxies を出力するとこう。</description>
    </item>
    
    <item>
      <title>Sphinxをインストールしようとしたら全然関係ないproxy周りでハマった話</title>
      <link>https://gosyujin.github.io/2013/08/21/sphinx-install-python-proxy/</link>
      <pubDate>Wed, 21 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://gosyujin.github.io/2013/08/21/sphinx-install-python-proxy/</guid>
      <description>あらすじ Sphinx を導入しようとして Python周りの環境を整えていたら easy_install がやたら失敗したりして困った。
環境  Windows 7 Python 2.7  Python インストール …は、以前入れるだけ入れていた 2.7 があったので割愛。
Sphinx-Users.jp のインストール手順では 2.6 が使われていたので、 2.7 でも大丈夫そう。
環境変数 PATH に以下のパスを追加。
 C:\Python27  Pythonのコマンドが含まれるフォルダ  C:\Python27\Scripts  次に説明するeasy_installコマンドや、Sphinxのコマンドが格納されるフォルダ   easy_install インストール(distribute_setup.py) Ruby でいうところの Bundler のようなもの？
 setuptools - 清水川Web  setuptoolsの互換パッケージを導入。
 python-distribute.org から distribute_setup.py をDLし実行。  $ python distribute_setup.py Downloading http://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz Extracting in c:\users\USER\appdata\local\temp\tmp00_lbf Now working in c:\users\USER\appdata\local\temp\tmp00_lbf\distribute-0.6.49 Installing Distribute Before install bootstrap.</description>
    </item>
    
    <item>
      <title>Pygmentsを使ってJekyll内記事のコードハイライトを実現する</title>
      <link>https://gosyujin.github.io/2012/09/21/jekyll-pygments/</link>
      <pubDate>Fri, 21 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://gosyujin.github.io/2012/09/21/jekyll-pygments/</guid>
      <description>あらすじ Jekyllではデフォルトでコードにハイライトをつける事はできないようなので、Pygmentsという拡張を入れる。
環境  Python 2.7.3 (2.6以上が必要)  easy_install   easy_installはhttp://peak.telecommunity.com/dist/ez_setup.pyからDLし $ (sudo) python ez_setup.py でインストールする。
※ 後に以下のようなエラーが出るかもしれない。
 Liquid error: undefined method &amp;lsquo;Py_IsInitialized&amp;rsquo; for RubyPython::Python:Module
 これはRubyからPythonを呼びに行くRubypythonというライブラリの中で、libpython2.7.soというファイルを探しに行くが、見つからないとすぐあきらめるようなので？　--enable-shared オプションつけてのインストールが吉。
また、以下の様なエラーが出た場合、libpython2.7.so.1.0が見つからなくてpythonコマンドが実行できなくなった。
$ python &amp;gt; python: error while loading shared libraries: libpython2.7.so.1.0: cannot open shared object file: No such file or directory $ ldd python linux-vdso.so.1 =&amp;gt; (0x00007fff9cf94000) libpython2.7.so.1.0 =&amp;gt; not found libpthread.so.0 =&amp;gt; /lib64/libpthread.so.0 (0x000000343d600000) libdl.so.2 =&amp;gt; /lib64/libdl.so.2 (0x000000343ce00000) libutil.</description>
    </item>
    
    <item>
      <title>PythonでCOBOLファイルの行頭に連番をふる</title>
      <link>https://gosyujin.github.io/2011/06/26/1309044393/</link>
      <pubDate>Sun, 26 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://gosyujin.github.io/2011/06/26/1309044393/</guid>
      <description>[Python]PythonでCOBOLファイルの行頭に連番をふる あらすじ 限られた環境の中でCOBOLを書かなくてはならかった。(FF2)
COBOL自体はviやらでゴリゴリ書いていけるんですが、ソース書いて間に挿入…を繰り返していると行頭の連番[1]にズレが生じていきます。幸いPythonは入っていたので書いてみました。Python初心者なので練習も兼ねる。
ソース  結果  このCOBOLファイルに  f:id:kk_Ataka:20110626081707j:image
 こうはさがってきた場合  f:id:kk_Ataka:20110626081706j:image
 こう置換できた！  f:id:kk_Ataka:20110626081705j:image
[1] 一連番号領域と呼ぶようです。</description>
    </item>
    
  </channel>
</rss>