<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Solaris on kk_Atakaの日記</title>
    <link>https://note.gosyujin.com/tags/solaris/</link>
    <description>Recent content in Solaris on kk_Atakaの日記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Tue, 17 Apr 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://note.gosyujin.com/tags/solaris/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Subversionで2ヶ所のリポジトリの同期を取るメモ</title>
      <link>https://note.gosyujin.com/2012/04/17/1334669770/</link>
      <pubDate>Tue, 17 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2012/04/17/1334669770/</guid>
      <description>[Solaris][備忘録][Subversion]Subversionで2ヶ所のリポジトリの同期を取るメモ 前回のあらすじ  http://d.hatena.ne.jp/kk_Ataka/20120115/1326624864:title  参考サイト  http://www.asahi-net.or.jp/~iu9m-tcym/svndoc/svn_backup.html:title http://www.ilovex.co.jp/blog/system/other/subversion.html:title http://www.02.246.ne.jp/~torutk/subversion/intro.html:title http://d.hatena.ne.jp/pasela/20090206/svn_backup:title http://terai.xrea.jp/Subversion.html:title  前提  以下の二つのサーバがある  Aサーバ:開発を進んでいるリポジトリがある(r222) Bサーバ:これからAサーバのリポジトリと同期をとりたいリポジトリがある(r111)   差分のdumpとってload(失敗) Aサーバ  進んでいる分のダンプを取る。  rオプションでダンプを取るリビジョンを指定できる。一つだけだとそのリビジョンだけ。(222ならリビジョン222)範囲指定する場合はAAA:BBBとする   $ svnadmin dump リポジトリパス(/home/xxx/yyyなど) -r 111:222 --incremental &amp;gt; repo.dump  これをなんらかの方法でBサーバへ移動する(ftpでもUSBでも)  Bサーバ  svnadmin loadコマンドで差分ダンプファイルを流しこむ。  リビジョンがかぶっているとエラー(リビジョン111未満のもの)   $ svnadmin load リポジトリパス(/home/xxx/yyyなど) &amp;lt; repo.dump &amp;lt;&amp;lt;&amp;lt; オリジナルのリビジョン 111 に基づき、新しいトランザクションを開始しました * パスを追加しています : trunk/xxx ...svnadmin: ファイルが既に存在します: ファイルシステム &amp;#39;リポジトリパス&amp;#39;, トランザクション xxx-xx, パス &amp;#39;trunk/xxx&amp;#39;  - 112からダンプしたファイルをloadする…とうまくいく予定だったのだが、なんかファイルのチェックサムが違うといわれた……。  $ svnadmin load リポジトリパス(/home/xxx/yyyなど) &amp;lt; repo.</description>
    </item>
    
    <item>
      <title>Subversionのリポジトリをサーバ間でまるごと移動する</title>
      <link>https://note.gosyujin.com/2012/01/15/1326624864/</link>
      <pubDate>Sun, 15 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2012/01/15/1326624864/</guid>
      <description>[Solaris][備忘録][Subversion]Subversionのリポジトリをサーバ間でまるごと移動する あらすじ AサーバからBサーバにリポジトリを引っ越しする。
参考サイト http://hain.jp/index.php/tech-j/2008/03/24/p199:title
手順 引っ越し元のサーバ まずはリポジトリのダンプファイルを作成。
$ svnadmin dump リポジトリパス(/home/xxx/yyyなど) &amp;gt; repo.dump * リビジョン 0 をダンプしました。 * リビジョン 1 をダンプしました。 * リビジョン 2 をダンプしました。 * リビジョン 3 をダンプしました。 * リビジョン 4 をダンプしました。 * リビジョン 5 をダンプしました。 引っ越し先のサーバ まずリポジトリを作る。
$ svnadmin create repos 次に引っ越し元で作ったdumpファイルを引っ越し先のサーバに持って来る。(FTPでもなんでも)
そして、svnadmin loadコマンドでダンプファイルを流しこむ。
$ svnadmin load repos &amp;lt; repo.dump * パスを追加しています... (略) ------- リビジョン xxx をコミットしました。 同期を取るため、最新のリビジョンを移動するとかもできるそうなので、必要になったらその辺も調べてみる。</description>
    </item>
    
    <item>
      <title>SolarisにSubversionをインストールするときのメモ</title>
      <link>https://note.gosyujin.com/2011/12/22/1324573161/</link>
      <pubDate>Thu, 22 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2011/12/22/1324573161/</guid>
      <description>[Solaris][備忘録][Subversion]SolarisにSubversionをインストールするときのメモ インストール  http://www.sunfreeware.com/ ftp://ftp.ne.jp/Sun/sunfreeware/  から必要なライブラリをダウンロード。
 - neon 0.29.5[1]  swig 1.3.40[2] expat 2.0.1[3] libxml2 2.7.8[4] db 4.2.52 REV=1.0.12[5] openssl 1.0.0d[6] libiconv 1.13.1[7] libintl 3.4.0[8] sasl 2.1.21[9] gcc(libgcc 3.4.6((The GNU C compiler and related programs - installs in /usr/local. This package includes the GNU C, C++, and f77 suites and support files. These gcc packages require the installation of libiconv. It was compiled to use the SUN assembler and loader usually in /usr/ccs/bin if the SUNW developer packages are installed.</description>
    </item>
    
    <item>
      <title>RedmineとApacheを連携させるPassengerをインストールできなかった</title>
      <link>https://note.gosyujin.com/2011/12/15/1323951847/</link>
      <pubDate>Thu, 15 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2011/12/15/1323951847/</guid>
      <description>[Ruby][Solaris][備忘録][Redmine]RedmineとApacheを連携させるPassengerをインストールできなかった あらすじ  Redmineを自動起動するようにしたい  Phusion Passenger(mod_rails for Apache)を使えばApacheと連携できるらしい    特徴
\* Apache単独でRailsアプリケーションを実行可能です。Apacheのモジュールとして実装されており、別途デーモンを起動する必要がありません。tcpポートも使いません。 \* Railsアプリケーションのデプロイが簡単になります。ファイルをアップロードするだけ。ほぼPHP感覚です。 \* サーバのメモリを節約できます。Railsインスタンスは必要なタイミングで生成します。また、一定時間アクセスがなければインスタンスを終了させます。 http://redmine.jp/tech_note/apache-passenger/
 ふーむ。
参考サイト  http://redmine.jp/faq/system_management/redmine-auto-start/:title http://redmine.jp/tech_note/apache-passenger/:title http://d.hatena.ne.jp/rx7/20080412/p1:title http://d.hatena.ne.jp/r7kamura/20110212/1297452845:title  手順 passengerインストール Passengerを使うにはfastthread、daemon_controllerが必要らしい。
$ gem install --local fastthread-1.0.7.gem $ gem install --local daemon_controller-0.2.6.gem $ gem install --local passenger-3.0.9.gem ※スタンドアロンなマシンだったため。ネットにつながっていればgem install passengerで全部入るはず。
passenger-install-apache2-module実行 対話形式でApacheのモジュール等を確認・インストールしていく。はじめにpassener-install-apache2-moduleを実行するとこんなメッセージが出てくる。
$ passenger-install-apache2-module Welcome to the Phusion Passenger Apache 2 module installer, v3.0.9. This installer will guide you through the entire installation process.</description>
    </item>
    
    <item>
      <title>ファイルの拡張子を見て適切なコマンドで解凍してくれるスクリプトを組んだ</title>
      <link>https://note.gosyujin.com/2011/12/12/1323701022/</link>
      <pubDate>Mon, 12 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2011/12/12/1323701022/</guid>
      <description> [Unix][Shell][備忘録][Solaris]ファイルの拡張子を見て適切なコマンドで解凍してくれるスクリプトを組んだ  http://d.hatena.ne.jp/kk_Ataka/20111209/1323474254:title http://d.hatena.ne.jp/kk_Ataka/20111210/1323541524:title  を基に引数に指定したらよろしく解凍してくれるスクリプトを組んでみる。とりあえずオプション指定できないし圧縮できないけど必要になったら実装していこう。
 </description>
    </item>
    
    <item>
      <title>tarコマンドでzオプションを使わずにファイルを解凍する</title>
      <link>https://note.gosyujin.com/2011/12/10/1323541524/</link>
      <pubDate>Sat, 10 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2011/12/10/1323541524/</guid>
      <description>[Solaris][備忘録]tarコマンドでzオプションを使わずにファイルを解凍する あらすじ Solarisにデフォルトで入っているtarではzオプションなどが使えない。のでtar.gzやtar.bz2ファイルを一発で解凍するにはパイプでつないでやる必要がある。
コマンド $ gzip -cd xxxx.tar.gz | tar -xvf - こんな感じ。cオプションを指定してやる。……やってる事はわかるけど、tarの最後にあるハイフンはなんじゃろう。tar -f -で標準入力から持ってくるルール？
 http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1120031991:title  ふむ。マニュアルを見てみる。
 tarfile の名前が - である場合は、tarは標準出 力への書き込みあるいは標準入力からの読み取り のいずれか適当な操作を行います。tarはパイプ ラインの先頭もしくは末尾として使用することが できます。また、次のコマンドを使えば、tar は、 ディレクトリ階層を移動するためにも使用す ることができます。 ルールだったようだ。</description>
    </item>
    
    <item>
      <title>Unixでファイル圧縮・解凍するときに使うコマンドをまとめた</title>
      <link>https://note.gosyujin.com/2011/12/09/1323474254/</link>
      <pubDate>Fri, 09 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2011/12/09/1323474254/</guid>
      <description>[Unix][備忘録][Solaris]Unixでファイル圧縮・解凍するときに使うコマンドをまとめた あらすじ 不意に.Zファイルがやってきて解凍の仕方を調べてしまった。あとだいたいオプションを忘れるのでメモ。対象ファイルは以下。
 .zip .Z .gz .bz2 .tar.gz .tgz .tar.bz2 .tbz .tar.Z  こんなファイルを固めたり解凍したり。
extracted ┣direct/ ┃┗ls.txt # man ls &amp;gt;&amp;gt; ls.txt ┣slink ┣tar.txt # man tar &amp;gt;&amp;gt; tar.txt ┗zip.txt # man zip &amp;gt;&amp;gt; zip.txt tar ┗sample.tar $ tar tvf sample.tar ../extracted drwxr-xr-x 9999/9999 0 12月 8日 19:14 2011年 ../extracted/ lrwxrwxrwx 9999/9999 7 12月 8日 19:13 2011年 ../extracted/slink tar.txt へのシンボリックリンク drwxr-xr-x 9999/9999 0 12月 8日 19:37 2011年 ../extracted/direct/ -rw-r--r-- 9999/9999 36890 12月 8日 19:37 2011年 .</description>
    </item>
    
    <item>
      <title>Solarisで現在のOSバージョンやパッチバージョンを確認する</title>
      <link>https://note.gosyujin.com/2011/12/08/1323357042/</link>
      <pubDate>Thu, 08 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2011/12/08/1323357042/</guid>
      <description>[Solaris][備忘録]Solarisで現在のOSバージョンやパッチバージョンを確認する SPARC向けだろうか。そんなことなかったぜ！
参考サイト  http://www.rose.sannet.ne.jp/nterasim/solaris/patch.html:title  unameコマンドでパッチ確認+α uname(現在のシステム名の表示)コマンドを使用していろいろ取得する。
   コマンド 引数 意味 出力内容     uname OSの表示 SunOS   uname -n ホスト名の表示 XXXXXXX   uname -r OSリリースレベルの表示 5.10   uname -v カーネルパッチバージョンの表示 Generic_999999-99   uname -m マシンタイプの表示 sunXX   uname -p プロセッサタイプの表示 sparc   uname -i プラットフォーム名の表示 SUNXX,SPARC-ZZZZZZZZZZ   uname -a 全部 SunOS XXXXXXX 5.10 Generic_141999-99 (以下略)    [f:id:kk_Ataka:20111210091242j:image]</description>
    </item>
    
    <item>
      <title>DAT装置の使い方 超簡易版(Solaris)</title>
      <link>https://note.gosyujin.com/2011/12/01/1322746718/</link>
      <pubDate>Thu, 01 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2011/12/01/1322746718/</guid>
      <description>[Solaris][備忘録]DAT装置の使い方 超簡易版(Solaris) あらすじ 結局はtarコマンド+αなんだけど、どうもDAT装置とテープというデバイスが使い慣れないので操作方法をメモしておく。とりあえず
 状態確認 何も考えずに書き込み 全部取り出し  くらい。
コマンド 使用するコマンドはmt(磁気テープの制御)とtar。まずはmt。
テープの状態表示  -fオプションでテープデバイスの指定 /dev/rmt/0はテープデバイスのパス  $ mt -f /dev/rmt/0 status テープの巻き戻し 今回は使わなかった。
$ mt -f /dev/rmt/0 rewind テープの取り出し データの取り出しではなく、DAT装置からの取り出し。
$ mt -f /dev/rmt/0 offline ここからtar。
 fオプションはtarファイル引数の指定。  fを省略した場合は$TAPE(設定されている場合) $TAPEもない場合は/etc/default/tarを見に行く[1]  vオプションはファイル名の出力  テープの内容を表示  tオプションは指定されたtarファイルの内容一覧表示  $ tar tvf /dev/rmt/0 tオプションで表示される内容はこんな感じ。
$ tar tf test.tar test/aaa.txt ... vオプションと併用すると詳細に。
$ tar tvf openssl-xxx.tar -rw-r--r-- 9/9 99999 3月 19日 22:22 2011年 test/aaa.</description>
    </item>
    
    <item>
      <title>Solarisのパッケージを作ってみる もう少し学んだ版</title>
      <link>https://note.gosyujin.com/2011/09/14/1316002377/</link>
      <pubDate>Wed, 14 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2011/09/14/1316002377/</guid>
      <description>[Solaris][備忘録]Solarisのパッケージを作ってみる もう少し学んだ版 前回までのあらすじ  http://d.hatena.ne.jp/kk_Ataka/20110912/1315826713:title  もう少し調べてみた。
参考サイト  http://dlc.sun.com/osol/g11n/content/PACKINSTALL/ja/ch2buildpkg-11300.html:title  必要なもの パッケージコンテンツ
ディレクトリ含めたソース一式。ざっくりソース一式とか言ってるのでここは作るものによってもう少しブレークダウンする必要がある
pkginfoファイル
パッケージ名等のパラメータを定義するファイル。コマンドではなくファイル。
Prototypeファイル
パッケージのコンポーネント一覧を記載するファイル
場合によって用意するもの(必須ではない) compverファイル
パッケージと互換性がある以前のバージョンのパッケージの定義ファイル
dependファイル
パッケージと関連があるパッケージの定義ファイル
spaceファイル
インストールに必要なディスク容量の定義ファイル
copyrightファイル
インストール時に表示される著作権メッセージの定義ファイル
パッケージコンテンツの作成 作成ディレクトリと内訳。
$ pwd /home/kk_Ataka/pkgroot/ MYAPpkg┳bin┳proccess ┃　┗start ┣lib━common.lib ┗etc━etcFile これを/直下にインストールしたい。
pkginfoファイル作成 /にインストールしたいので、BASEDIRが/でいいのか？
PKG=&amp;#34;MYAPpkg&amp;#34; NAME=&amp;#34;MyApplyPackage&amp;#34; ARCH=&amp;#34;sparc&amp;#34; VERSION=&amp;#34;release 1.0 /svn revision r222&amp;#34; CATEGORY=&amp;#34;application&amp;#34; DESC=&amp;#34;This is my test packages.&amp;#34; VENDOR=&amp;#34;MYAPPLY&amp;#34; BASEDIR=&amp;#34;/&amp;#34; pkginfoファイル書式 |*PKG|必須|32文字以内|パッケージの省略名 英数字で構成、頭に数字は× 予約語(install, new等)は使用できない。最初の4文字は社名などがお勧め|
|*NAME|必須|256文字以内 |パッケージの完全名 英数字で構成 必要なタイミング、インストールするパーティション等を明瞭に記載する[1]|
|*ATCH|必須|16文字以内|アーキテクチャ 複数対応している場合はカンマ区切り|
|*VERSION|必須|256文字以内|バージョン 先頭に(は×|</description>
    </item>
    
    <item>
      <title>Solarisのパッケージを作ってみる</title>
      <link>https://note.gosyujin.com/2011/09/12/1315826713/</link>
      <pubDate>Mon, 12 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2011/09/12/1315826713/</guid>
      <description>[Solaris][備忘録]Solarisのパッケージを作ってみる もう少し学んだ。http://d.hatena.ne.jp/kk_Ataka/20110914/1316002377:title
あらすじ  Solarisのパッケージの作り方を学ぶ刻がきた  参考サイト  http://www.syuhitu.org/other/package/package.html:title http://www.nognog.com/techmemo/Solaris_Package_Creation_HOWTO.php:title http://blogs.oracle.com/yappri/entry/create_solaris_package  インストール後のファイルを作成する 作業用ディレクトリに移動する。
$ cd /tmp/kk_Ataka 次にインストール後のファイル構成を作る。今回はこんなパッケージを作る。
/home/kk_Ataka/testpkg /home/kk_Ataka/testpkg/readme.txt 実際に作る。
$ mkdir /home/kk_Ataka/testpkg $ touch /home/kk_Ataka/testpkg/readme.txt あと、パッケージ名を考えておく。今回はTESTPKGでいいかな。
Prototypeファイルを作成する 以下のような内容のファイルを作成し保存する。名前は適当でよいので今回はtext.txtとした。これはまだPrototypeファイルではない。
/home/ /home/kk_Ataka/ /home/kk_Ataka/testpkg/ /home/kk_Ataka/testpkg/readme.txt 次に下記コマンドを実行する。
pkgproto &amp;lt; test.txt &amp;gt; Prototype 成功したら、カレントディレクトリにPrototypeというファイルが出来ている。中身はこんなもん。
d none /home 0755 root root d none /home/kk_Ataka 0755 kk_Ataka users d none /home/kk_Ataka/testpkg 0755 kk_Ataka users f none /home/kk_Ataka/testpkg/readme.txt 0644 kk_Ataka users 左がファイルのタイプ？(d:ディレクトリ、f:ファイル)　noneはなんだろう？作成するファイル、権限、ユーザ名、グループ名かな。
PrototypeファイルができたらPrototypeファイルの先頭に以下を追加する。
i pkginfo なのでこうなる。</description>
    </item>
    
    <item>
      <title>vmstatとかiostatとかsarとかswapコマンドのメモ</title>
      <link>https://note.gosyujin.com/2011/09/04/1315146050/</link>
      <pubDate>Sun, 04 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2011/09/04/1315146050/</guid>
      <description>[Solaris][備忘録]vmstatとかiostatとかsarとかswapコマンドのメモ すぐ忘れるのでメモ。あと略称とかも。
vmstat  表示  kthr memory page disk faults cpu r b w swap free re mf pi po fr de sr ** ** ** ** in sy cs us sy id  kthr: KernelTHRead  |*r|Run queue|待ち行列内のカーネルスレッド数(mpstatやprstatでも取得可能)|
|*b|?|I/Oで待たされているカーネルスレッド数|
|*w|?|スワップアウトされたカーネルスレッド数|
 memory  |*swap|-|現在利用可能なスワップ領域(ディスク上+メモリ上のスワップ領域)|
|*free|-|空きメモリ領域|
 page  |*re|pageREclaims|freeListに入れられた後、復帰したページ数|
|*mf|MinorFault|HAT faultとAddress Space faultを足した数|
|*pi|PageIn|ページインされたメモリサイズ(キロバイト)|
|*po|PageOut|ページアウトされたメモリサイズ(キロバイト)|
|*fr|FRee?|解放されたメモリサイズ(キロバイト)|
|*de|DEficit|次のプロセスで必要と予測しSolarisが確保する仮想メモリのバッファ|
|*sr|?|ページデーモンによってスキャンされたページ数(0以外だと実行されている)|
 disk  |*最高4台のデータを表示|読み書きした回数|
 fault  |*in|INterrupt|1秒あたりの割り込み(インタラプト)回数|
|*sy|SYstemcall|1秒あたりのシステムコース回数|</description>
    </item>
    
  </channel>
</rss>