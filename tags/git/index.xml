<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on note.gosyujin.com - kk_Atakaの日記</title>
    <link>https://note.gosyujin.com/tags/git/</link>
    <description>Recent content in Git on note.gosyujin.com - kk_Atakaの日記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Sat, 14 Dec 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://note.gosyujin.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Gitの.git/objectsの中身を追ってみる</title>
      <link>https://note.gosyujin.com/2013/12/14/git-dotgit-objects/</link>
      <pubDate>Sat, 14 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2013/12/14/git-dotgit-objects/</guid>
      <description>あらすじ この記事は Git Advent Calendar 2013 の 14 日目の記事です。
 12 日目: @ton1517さん - gitのサブコマンドを自分で作る - ton-tech-ton 13 日目: @horimislimeさん - git mergeでコンフリクトが発生するか前もって調べる方法 - Qiita [キータ] 14 日目: ここ 15 日目: kyanroさん - git - rebase 直後に、自分が修正していたファイルが変更されたかどうかを調べる - Qiita [キータ]  とりあえず 12 日目へつなげておきますね。
最近 Subversion を使うことが多く、めっきり Git を使っていないので、復習として .git/objects の中身を追ってみた。
参考  Pro Git 9章 Git - Gitの内側 アリスとボブのGit入門レッスン Chapter 14 Dive into .git 日本語版 - SlideShare 見えないチカラ: 【翻訳】Gitをボトムアップから理解する  結論 とりあえず add さえしていれば 、ファイルを救える。</description>
    </item>
    
    <item>
      <title>Jekyllバージョンアップの際に思いのほか手こずった話 てっく煮さん製プラグインの更新に追従したい編</title>
      <link>https://note.gosyujin.com/2013/09/07/jekyll-maintenance-2/</link>
      <pubDate>Sat, 07 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2013/09/07/jekyll-maintenance-2/</guid>
      <description>前回までのあらすじ  Jekyllバージョンアップの際に思いのほか手こずった話 Jekyll Bootstrapの更新に追従したい編  結論 fork していれば、だいたいなんとかなる。
環境  Ruby 1.9.3  RedCloth (4.2.9) bundler (1.3.5) classifier (1.3.3) colorator (0.1) commander (4.1.4) directory_watcher (1.4.1) fast-stemmer (1.0.2) highline (1.6.19) hparser (0.4.0 dc35f05) jekyll (1.0.0 9f94eaf) kramdown (0.14.2) liquid (2.5.1) maruku (0.6.1) posix-spawn (0.3.6) pygments.rb (0.4.2) rake (10.1.0) rdiscount (2.1.6) redcarpet (2.2.2) safe_yaml (0.7.1) syntax (1.0.0) yajl-ruby (1.1.0)   参考サイト  Git で複数のリポジトリをまとめたり、逆に切り出したりする - Qiita [キータ]  やりたい事: てっく煮プラグイン編 @nitoyon さんが公開しているリポジトリ( https://github.</description>
    </item>
    
    <item>
      <title>Subversionのproxy設定でいつもハマるやつ</title>
      <link>https://note.gosyujin.com/2013/09/05/svn-proxy-error-by-git-svn/</link>
      <pubDate>Thu, 05 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2013/09/05/svn-proxy-error-by-git-svn/</guid>
      <description>あらすじ git svn しようとしたらエラー。
$ git svn rebase Malformed file: /c/Users/xxx/.subversion/servers:68: Option expected at /usr/lib/perl5/site_perl/Git/SVN/Ra.pm line 81 環境  Windows  svn バージョン等は失念。まあ、多分バージョンはあまり関係ないと思われる？
結論 git-svn の問題ではなく proxy 環境下 においての svn 設定ミスだった。
原因 .subversion/server の該当部分を見に行くとこうなっている。
[global] # http-proxy-exceptions = *.exception.com, www.internal-site.org http-proxy-host = proxy.xxx.jp http-proxy-port = 8080 proxy 設定を追加するためにコメントアウトを消したが。
 コメントアウト # を 一文字 消しただけではダメ(上記の状態) スペース も消さなければならない  ただしくはこう。
[global] # http-proxy-exceptions = *.exception.com, www.internal-site.org http-proxy-host = proxy.xxx.jp http-proxy-port = 8080 これ、毎回設定する時にひっかかってるような気がする。</description>
    </item>
    
    <item>
      <title>Jekyllバージョンアップの際に思いのほか手こずった話 Jekyll Bootstrapの更新に追従したい編</title>
      <link>https://note.gosyujin.com/2013/08/07/jekyll-maintenance-1/</link>
      <pubDate>Wed, 07 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2013/08/07/jekyll-maintenance-1/</guid>
      <description>あらすじ forkとか、fetchとか、本で読んでるだけじゃ実際やりたい時にどうやりゃいいかわからん…という話。
Github Pagesで運用しているJekyllのバージョンアップをする時に死んだ
 原因は、他の人が公開しているプラグインやcssをほいほい コピペ していたため  公開先ではもちろんJekyllの更新に追従しており、更新を怠った己が自爆しているだけ)  なんとか自分のリポジトリでも追従したい。でもコピペはやだ  追従したいのは、主に Jekyll Bootstrap ファイル全般と @nitoyon さんのてっく煮ブログで使われているプラグイン。(特にはてな系)
パッパとやって手順だけメモするかーと思ったら凄まじくてこずったので、今回はBootstrapだけ。
環境  Ruby 1.9.3  RedCloth (4.2.9) bundler (1.3.5) classifier (1.3.3) colorator (0.1) commander (4.1.4) directory_watcher (1.4.1) fast-stemmer (1.0.2) highline (1.6.19) hparser (0.4.0 dc35f05) jekyll (1.0.0 9f94eaf) kramdown (0.14.2) liquid (2.5.1) maruku (0.6.1) posix-spawn (0.3.6) pygments.rb (0.4.2) rake (10.1.0) rdiscount (2.1.6) redcarpet (2.2.2) safe_yaml (0.7.1) syntax (1.0.0) yajl-ruby (1.1.0)   参考サイト  Git - サブモジュール Git で複数のリポジトリをまとめたり、逆に切り出したりする - Qiita [キータ] gitでforkしたrepoにoriginalのrepoをmergeする手順 - memo.</description>
    </item>
    
    <item>
      <title>GitHub PagesでJekyllプラグインを使えるようにするには…</title>
      <link>https://note.gosyujin.com/2013/05/21/jekyll-plugin-githubpages/</link>
      <pubDate>Tue, 21 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2013/05/21/jekyll-plugin-githubpages/</guid>
      <description>あらすじ Jekyll＠GitHub Pagesの場合、Liquidで(自分で)作ったプラグインは使えないという事が判明した。(ローカルで起動した場合/safeモードじゃない場合は関係ない)
 俺の最強ブログシステムも火を噴いてたぜ - Webtech Walker  これを回避するには
 GitHub Pages をやめる(レンタルサーバを借りてデプロイ) GitHub Pages に 静的ファイル としてhtml自体をデプロイ  する方法がありそう。今回はGitHub Pagesを使い続けたいので後者で頑張ってみる。
参考サイト  github:help  そもそもGitHub Pagesとはなんぞや  User &amp;amp; Organization Pages User &amp;amp; Organization Pages はPagesファイル専用のスペシャルリポジトリとして生きている。このリポジトリはaccount nameを使用する。例えば、defunkt/defunkt.github.com
 このリポジトリは username/username.github.com というnaming schemeを使わなければならない master ブランチからのコンテンツはビルドとパブリッシュに使用される
 &amp;hellip;
  Project Pages Project Pages は同じリポジトリからプロジェクトとして維持される。これらのページはUser PageとOrg Pagesほとんど正確に同じである。いくつかのわずかな違いはある。
 gh-pages ブランチはビルドとパブリッシュに使用される カスタムドメインを使っていないなら、Project PagesはUser Pageのサブパスの下で使われる。 username.github.com/projectname &amp;hellip;   ということは まず、GitHub Pagesは2種類ある。</description>
    </item>
    
    <item>
      <title>git-svnインストールからgit svn dcommit完了までの手順</title>
      <link>https://note.gosyujin.com/2012/12/12/git-svn-dcommit/</link>
      <pubDate>Wed, 12 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2012/12/12/git-svn-dcommit/</guid>
      <description>あらすじ CentOSのインストール時に入れたGitにはgit-svnが入っていない(？)ので、一から入れようとしたが、ネットに繋がっていない環境だと結構依存とかがめんどくさかったのでメモ。
環境  CentOS 6.2 Git 1.7.1  git は入っているが、git svnは実行できない console $ git svn git: &#39;svn&#39; is not a git command. See &#39;git --help&#39;.   svn 1.6.11 (r934486) ネットにつながっていないぼっち環境  yumとかで入れられると一発っぽいんだけどなー。
手順 まずは、git-svnのrpmをDLしてくる。
 RPM resource git-svn  インストールしたいPCに持ってきて、rpmコマンド。 perl(SVN::Core) と、 perl(Term:ReadKey) がないと言われる。
# rpm -ivh git-svn-1.7.1-2.el6_0.1.noarch.rpm 警告: git-svn-1.7.1-2.el6_0.1.noarch.rpm: ヘッダ V3 RSA/SHA256 Signature, key ID c105b9de: NOKEY エラー: 依存性の欠如: perl(SVN::Core) は git-svn-1.7.1-2.el6_0.1.noarch に必要とされています perl(Term::ReadKey) は git-svn-1.7.1-2.el6_0.1.noarch に必要とされています perl(SVN::Core) SVN::Coreは subversion-perl というパッケージから入れられるよう。</description>
    </item>
    
    <item>
      <title>Git add, commitをした時、中でどんな事が起こっているのか</title>
      <link>https://note.gosyujin.com/2012/08/29/1346242547/</link>
      <pubDate>Wed, 29 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2012/08/29/1346242547/</guid>
      <description>[Git][備忘録]Git add, commitをした時、中でどんな事が起こっているのか あらすじ いまだにファイルがどういうタイミングでリポジトリ、インデックス、ワーキングエリア間を行き来しているのかわからんので色々調べてみることに。
参考資料、サイト  実用Git http://www8.atwiki.jp/git_jp/pub/Documentation.ja/tutorial-2.html:title http://keijinsonyaban.blogspot.jp/2011/05/git.html:title http://git-scm.com/book/ja/Git%E3%81%AE%E5%86%85%E5%81%B4-Git%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88:title  やってみる まずは、空のREADMEファイルを作ってFirst commit。
$ git init Initialized empty Git repository in /tmp/repos/.git/ $ touch README $ git add README $ git commit -m &amp;#34;first commit&amp;#34; [master (root-commit) b0d99b3] first commit 0 files changed create mode 100644 README $ git log --graph --date-order --all --date=short -C -M --pretty=format:&amp;#34;%h&amp;#34;\ %t\ %ad\ %Cblue%cn%Creset\ %Cgreen%d%Creset\ %s * b0d99b3 543b9be 2012-08-29 kk_Ataka (HEAD, master) first commit 色々確認 ※確認スクリプト</description>
    </item>
    
    <item>
      <title>Pro Gitと入門Gitと入門gitと実用GitでGitの復習 無名ブランチ(detached HEAD)からの復活編</title>
      <link>https://note.gosyujin.com/2012/04/24/1335270486/</link>
      <pubDate>Tue, 24 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2012/04/24/1335270486/</guid>
      <description>[Git][Windows][備忘録]Pro Gitと入門Gitと入門gitと実用GitでGitの復習 無名ブランチ(detached HEAD)からの復活編 前回までのあらすじ  http://d.hatena.ne.jp/kk_Ataka/20120305/1330951640:title http://d.hatena.ne.jp/kk_Ataka/20120311/1331472478:title http://d.hatena.ne.jp/kk_Ataka/20120315/1331816663:title http://d.hatena.ne.jp/kk_Ataka/20120410/1334058674:title http://d.hatena.ne.jp/kk_Ataka/20120423/1335185906:title  参考  http://progit.org/:title 入門Git 入門git 実用Git  無名ブランチ(detached HEAD)とは 要約すると「過去のコミットの状態を眺めるための&amp;rdquo;便利機能&amp;rdquo;なのでここに永続的な変更をするなんてとんでもない！」という事らしい。
無名ブランチ状態で作業するとどうなるか ちょっと「ブランチにいると思いこんだまま無名ブランチで作業し、さーてmasterブランチに戻ってmergeするかぁ……はぁ！？」な状況を作り出してみる。
まずは無名ブランチの準備としてnobraブランチを作る。(これ以降の作業は、本当はnobraブランチでやっていきたいと思っている)
$ git checkout -b nobra Switched to a new branch &amp;#39;nobra&amp;#39; $ touch nobra $ git add nobra $ git commit -m &amp;#34;Add nobra&amp;#34; [nobra d62e4cb] Add nobra 0 files changed, 0 insertions(+), 0 deletions(-) create mode 100644 nobra $ git g * d62e4cb (HEAD, nobra, master) Add nobra * 7ab5db8 (topic) Add message line 3 * cf6c3d6 Add message line 2 * 38f8aff Add message line 1 * 93b8e52 Add message line 4 * 0b91a9f Add message line 5 * 15f636f Add line number * fa9eabc first commit $ git br master d62e4cb Add nobra * nobra d62e4cb Add nobra topic 7ab5db8 Add message line 3 次に、このnobraブランチのSHA1を指定してcheckoutする。</description>
    </item>
    
    <item>
      <title>Pro Gitと入門Gitと入門gitと実用GitとGit道場#1でGitの復習 rebase編</title>
      <link>https://note.gosyujin.com/2012/04/23/1335185906/</link>
      <pubDate>Mon, 23 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2012/04/23/1335185906/</guid>
      <description>[Git][備忘録][Windows]Pro Gitと入門Gitと入門gitと実用GitとGit道場#1でGitの復習 rebase編 前回までのあらすじ  http://d.hatena.ne.jp/kk_Ataka/20120305/1330951640:title http://d.hatena.ne.jp/kk_Ataka/20120311/1331472478:title http://d.hatena.ne.jp/kk_Ataka/20120315/1331816663:title http://d.hatena.ne.jp/kk_Ataka/20120410/1334058674:title   http://d.hatena.ne.jp/kk_Ataka/20120422/1335108555:title  参考  http://progit.org/:title 入門Git 入門git 実用Git New !! Git道場#1 講義 http://speakerdeck.com/u/ogawa/p/git New !!  rebaseとは  入門git P126
土台の置き換え(リベース)にはgit rebaseコマンドを使う。
実用Git P176
一連のコミットのもととなるもの(基点)を変更する際に使います。
Git道場 講義
コミットをかぶせる事[1]
 コミットの基を変更すると。
パターン1 一般的な？場合(前方移植(forward-port)) Git道場で繰り返したパターンに近いかな。こういうブランチを作る。
1---2---3(topic) / A---B---C---D(master) まずは1-5行目にそれぞれ1-5と入力したファイルを用意。
$ touch num $ git add num $ git commit -am&amp;#34;first commit&amp;#34; [master (root-commit) fa9eabc] first commit 0 files changed, 0 insertions(+), 0 deletions(-) create mode 100644 num $ vi num $ cat num $ git commit -am &amp;#34;Add line number&amp;#34; [master 15f636f] Add line number 1 files changed, 5 insertions(+), 0 deletions(-) $ git g * 15f636f (HEAD, master) Add line number * fa9eabc first commit 次にtopicブランチを作成しを育てる。</description>
    </item>
    
    <item>
      <title> Git道場#1に参加しました と、pullとpull --rebase備忘録 #gitdojo</title>
      <link>https://note.gosyujin.com/2012/04/22/1335108555/</link>
      <pubDate>Sun, 22 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2012/04/22/1335108555/</guid>
      <description>[Git][イベント] Git道場#1に参加しました と、pullとpull &amp;ndash;rebase備忘録 #gitdojo 概要  http://git-dojo.doorkeeper.jp/events/979-git%E9%81%93%E5%A0%B4:title  対象者が
 merge / rebaseにちょっと自信がない
conflictが怖い
 まさにそんな状況だったので、打破するために参加しました。
心「Git総論、心構え」  @[https://twitter.com/#!/iwamatsu:title=iwamatsu]さんの講義  Gitにはリモートリポジトリ、ローカルリポジトリがある  集中型のリポジトリにはリモートリポジトリとローカルリポジトリの区別がない  皆のリポジトリなので履歴参照などはすべてリポジトリを見にいかなければならない  分散型では、主な作業はローカルで行い、データを管理できる ローカルリポジトリからリモートリポジトリに反映(プッシュ)する事で他人と共有 ローカルリポジトリは俺のもの、リモートリポジトリは皆のもの  Gitは頑健である Gitは時間的な変遷を管理する  昨日のこの時間何してたかな？ testブランチを消してもコミットは残っている 作業履歴が残っているのでreflogで参照できる  reflogで救済できる期間は90日以内、またはgit gc が実行されるまで   他(質疑応答の回答など)  ブランチを削除してもコミットは残っている。git branch -D GitHub重い……  イントラにbareリポジトリ用意して毎朝GitHubから持ってくるなど   技「本日の課題、テクニックの解説」  @[https://twitter.com/#!/conceal_rs:title=conceal_rs]さんの講義  課題  今日はチームで一つのファイルを編集 pull, rebaseを怖がらずに  コンフリクトが起こった時の対処法を学ぶ  pullとの違いを理解する  ≒mergeとrebaseの違いでいいのかな？   ルール  1-10までのNumbersファイルの後ろに記号を追加削除していく コミットメッセージだけで語る チーム間ではコミットメッセージのみを介して会話する 「好きにやっていいので、ぐちゃぐちゃを楽しんでください」 今回は@[https://twitter.</description>
    </item>
    
    <item>
      <title>Pro Gitと入門Gitと入門gitでGitの復習 HEADのキャレットとかチルダとか補講編</title>
      <link>https://note.gosyujin.com/2012/04/10/1334058674/</link>
      <pubDate>Tue, 10 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2012/04/10/1334058674/</guid>
      <description>[Git][備忘録][Windows]Pro Gitと入門Gitと入門gitでGitの復習 HEADのキャレットとかチルダとか補講編 前回までのあらすじ  http://d.hatena.ne.jp/kk_Ataka/20120305/1330951640:title http://d.hatena.ne.jp/kk_Ataka/20120311/1331472478:title http://d.hatena.ne.jp/kk_Ataka/20120315/1331816663:title  GitHubで他の人の.gitconfigとかを見たりすると、HEAD^とかHEAD~~とかにエイリアスが貼ってあるけど、これってなんなの？
今の認識: 書いた分だけリビジョンが戻ってくれる程度
参考  http://progit.org/:title 入門Git New !! 入門git  調査 入門Git P87 コミットの祖先の指定によると、
   記法 意味     ^ 指定したコミットの1番目の親   ^番号 指定したコミットのN番目の親   ~ 指定したコミットの1世代前の親   ~世代 指定したコミットのN世代前の親    という事らしい……が、番目と世代は何が違うんだろう？　とりあえずこんな歴史があるとして、masterから戻ってみる。
確認 * b467307 2012-04-05 kk_Ataka (HEAD, origin/master, master) Add get_sheetname.rb(convert exe file b | * b025b6b 2012-04-05 kk_Ataka (1.</description>
    </item>
    
    <item>
      <title>Pro Gitと入門gitでGitの復習 マージ編</title>
      <link>https://note.gosyujin.com/2012/03/15/1331816663/</link>
      <pubDate>Thu, 15 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2012/03/15/1331816663/</guid>
      <description>[Git][備忘録][Windows]Pro Gitと入門gitでGitの復習 マージ編 前回までのあらすじ  http://d.hatena.ne.jp/kk_Ataka/20120305/1330951640:title http://d.hatena.ne.jp/kk_Ataka/:title  今回はマージから。
参考  http://progit.org/:title 入門git  マージ 前準備 ここでブランチ用にリポジトリを作りなおした。
$ cat field.html &amp;lt;h1&amp;gt;僕にその手を汚せというのか&amp;lt;/h1&amp;gt; というファイルを作成し、chapter1というブランチを切る。
$ git branch chapter1 $ git branch chapter1 * master ブランチはこうなるはず。
*master/chapter1/HEAD ↓ ↓ ○  次にchapter2を作成し、ブランチ切り替え。
$ git checkout -b chapter2law chapter1 Switched to a new branch &amp;#39;chapter2law&amp;#39; 文言を追加し、コミット。
$ cat field.html &amp;lt;h1&amp;gt;僕にその手を汚せというのか&amp;lt;/h1&amp;gt; &amp;lt;h2&amp;gt;誰も僕を責めることはできない&amp;lt;/h2&amp;gt; $ git commit -a -m &amp;#34;Add chapter2 law route&amp;#34; ブランチはこうなるはず。chapter2lawに切り替えているのでHEADもこちらへ。
master/chapter1 ↓　*chapter2law/HEAD ↓　↓ ↓┌○ ○┘  同様にchapter3lawも作る。</description>
    </item>
    
    <item>
      <title>Pro Gitと入門gitでGitの復習 ブランチ編</title>
      <link>https://note.gosyujin.com/2012/03/11/1331472478/</link>
      <pubDate>Sun, 11 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2012/03/11/1331472478/</guid>
      <description>[Git][備忘録][Windows]Pro Gitと入門gitでGitの復習 ブランチ編 前回までのあらすじ  http://d.hatena.ne.jp/kk_Ataka/20120305/1330951640:title  今回はローカルブランチから。
参考  http://progit.org/:title 入門git  他のVCSとの違い  Subversionなどは各ファイルに対しての差分を時間軸で持っていた Gitではコミットのたびにその時のリポジトリ全体のスナップショットをとる  ただし、変更がなかったファイルは以前のスナップショットで格納したファイルへのリンクを貼っている   Gitのオブジェクト Gitには大きく分けて4つのオブジェクトが存在する。
 Commitオブジェクト Treeオブジェクト Blobオブジェクト Tagオブジェクト  Commitオブジェクト リポジトリのルート。ファイル情報(ツリー)やメタデータを格納している。以下のコミットのCommitオブジェクトを見てみる。
$ git log --pretty=oneline 5f431a8cf6023e7398102dfef8b88baf1c581023 Typo 4 log &amp;ndash;pretty=rawコマンドを実行するとハッシュタグがいろいろと。
$ git log --pretty=raw 5f431a8cf6023e7398102dfef8b88baf1c581023 commit 5f431a8cf6023e7398102dfef8b88baf1c581023 tree de445cf5b526c554dea465d09cea6d65059d1f80 parent a59ff99de68cbf359c814f25cda9c926ef9cdad9 author kk_Ataka &amp;lt;test@example.com&amp;gt; 1329818747 +0900 committer kk_Ataka &amp;lt;test@example.com&amp;gt; 1329819044 +0900 Typo 4 |*commit|このコミットに対するSHA1名|
|*tree|このコミットの中身を記載しているSHA1名|
|*parent|一つ前のコミットのSHA1名。存在しない場合はそれが一発目(Rootコミット)、マージされた場合は1つ以上になる場合もある|
|*author|作成者|
|*committer|コミッター|
author, committerあたりがメタデータになるのかな。</description>
    </item>
    
    <item>
      <title>Pro Gitと入門gitでGitの復習 基本操作編</title>
      <link>https://note.gosyujin.com/2012/03/05/1330951640/</link>
      <pubDate>Mon, 05 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2012/03/05/1330951640/</guid>
      <description>[Git][備忘録][Windows]Pro Gitと入門gitでGitの復習 基本操作編 あらすじ めっきりadd, commitくらいしか使っていないGitをもう一回さわってみて学びなおす。Pro Gitのページもブクマしただけで真剣に読んでいなかったので読み進める。
続き。
 http://d.hatena.ne.jp/kk_Ataka/20120311/1331472478:title  参考  http://progit.org/:title 入門git  リポジトリの作成 リポジトリにしたいディレクトリの中でinitコマンドで作成 or init ディレクトリ で生成。
$ git init Initialized empty Git repository in c:/project/testRemote/test/.git/ 以後は基本的にリポジトリの中で作業。
コンフィグ コンフィグファイルの適用範囲と優先度 下に行くほど適用範囲は狭くなり、優先度が上がる。(同じオプションがあったら下のものが適用される)
   ファイル Windows(msysGit)では 範囲 優先度 configコマンドでの設定方法     /etc/gitconfig (msysのルート)/etc/gitconfig システム全体 低 &amp;ndash;system   ~/.gitconfig %USERPROFILE%\.gitconfig あるユーザ 中 &amp;ndash;global   (リポジトリ内).git/config (リポジトリ内).git/config そのリポジトリ 高 (指定なし)    コンフィグの一覧を見る そのリポジトリのコンフィグを見る。</description>
    </item>
    
    <item>
      <title>GitプロジェクトをコミットしたタイミングでJenkinsにビルドをしてもらいたい！</title>
      <link>https://note.gosyujin.com/2012/02/23/1330001338/</link>
      <pubDate>Thu, 23 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2012/02/23/1330001338/</guid>
      <description>[Jenkins][備忘録][Git]GitプロジェクトをコミットしたタイミングでJenkinsにビルドをしてもらいたい！ あらすじ  全然CIっぽくJenkinsを使っていなかったので本格的に使ってみたい。 Gitを連携させたい GitリポジトリにコミットしたタイミングでJenkinsにビルドさせてみたい  …のだが、いきなりビルド時にcloneできないという現象でハマっていた。
ERROR: Error cloning remote repo &amp;#39;origin&amp;#39; : Could not clone C:/project/excel_for_ruby.git 上記の原因 cloneできない問題はJenkins実行時にgit.exeにパスが通ってなかった、設定していなかったという非常に残念なものだった。Jenkins実践入門にも手順が書いてあった。[1]
Jenkinsの「ビルド実行」でGitリポジトリのソースのテストをする  Jenkinsの管理 =&amp;gt; プラグインの管理 =&amp;gt; Jenkins GIT plugin をインストール 新規ジョブ作成 =&amp;gt; フリースタイル・プロジェクト でプロジェクト作成 ソースコードシステム  Gitを選択 リポジトリを入力  C:\project\excel_for_ruby   ビルド  Windowsバッチコマンドの実行  rspecを実行できるように記述する    cd &amp;#34;C:\project\excel_for_ruby&amp;#34; rspec -fs spec\* これでビルドするとはじめのcloneできないエラー。
Error cloning remote repo &amp;#39;origin&amp;#39; : Could not clone C:\project\excel_for_ruby  Jenkinsから見たGitのパスを設定  Jenkinsの管理 =&amp;gt; システムの設定  Gitのパスを追加するフォームがあるのでこれを追加 Nameもなんでもいいから入力する(Defaultにした)    GitでCommitしたらJenkinsがビルドをしてくれるようにする 「wget ビルド実行パス」というコマンドをGitのフックスクリプトに記述すればコミット時にビルド実行できるらしい。とりあえずWindows用のwgetを取得。http://users.</description>
    </item>
    
    <item>
      <title>BPStudy#41に参加しました</title>
      <link>https://note.gosyujin.com/2011/01/30/1296401919/</link>
      <pubDate>Sun, 30 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2011/01/30/1296401919/</guid>
      <description>[JavaScript][Git][イベント]BPStudy#41に参加しました  詳細: http://atnd.org/events/11755:title  ATNDなどでBPStudyの存在は知っていたのですが、今回初参加。
分散SCMを勉強しようと思って最近Gitを使いはじめたのですが、リアル周りに使っている人がいないので知識共有ができず……。他の人はどうやって使っているのかなーと思っているところに神速さんがGitの発表をすると聞いたので、自重せずに参加しました。
以下メモ。前半戦のjsも、聞けばわかるかなーとか思っていたら甘かった……jsは勉強不足でした。もう少し使えないと話にもついていけない……。
JavaScript @[http://twitter.com/monjudoh:title=monjudoh]さん  http://d.hatena.ne.jp/monjudoh/20110128/1296205331:title  RequireJS実践編  RequireJSって何？  jsの依存性解決をしてくれるライブラリ モジュール内で他のモジュールを再帰的に読み込みを行いたい場合…define関数を使用して読み込んでいく require関数を使うと逆に読み込んでいく    RequireJS読み込みの前にrequireなんたらという名前が付いているグローバル変数がある場合、設定ファイルとして使ってくれる   モジュールjsのあるディレクトリが深い場合呼び出しがめんどい  baseUrlを指定してjsがあるパスを基底のパスにすると楽になる    パスの上書きもできる  スタブモジュールと置き換える事もできる    キャッシュされた古いJavaScriptを読みこまないようにもできる  クエリパラメータにデプロイ日時を入れる   jQuery custom event 応用編  custom eventって何？  ブラウザがサポートしてないイベント[1]を定義する独自のイベント    普通のプログラムのような事もcustom eventでできる  関数呼び出し 引数付き呼び出し インスタンス変数へのアクセス クラス作成のような事 mixin callback mixout 同名のn(≧0)個の関数呼び出し   疎結合なUIコンポーネントの作成について  複数画面で使えるAjaxformダイアログのコンポーネントを作りたい  例えば、Googleカレンダーのように日付セルをクリックしたらスケジュール登録ダイアログが出るように    仕様変更  セルをクリックしたらアクティブ、アクティブをクリックしたらスケジュール登録ダイアログが出るように ダイアログを開く→custom eventにして「開く」と「ユーザアクションの検知」を別に    仕様変更  スケジュール一覧画面を作る、画面に新規追加ボタンもあり、カレンダーのセルをクリックしたときと同じダイアログをだす ユーザアクション検知のモジュールをカレンダー画面とスケジュール表示画面に分ける callback処理も分ける    本体の再利用性も高いし、挿し込むパーツも機能が明確なので再利用性が高くなる  マスタリング非同期読み込み @[http://twitter.</description>
    </item>
    
  </channel>
</rss>