<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on kk_Atakaの日記</title>
    <link>https://note.gosyujin.com/tags/golang/</link>
    <description>Recent content in Golang on kk_Atakaの日記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Sat, 05 Mar 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://note.gosyujin.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golangで作ったスクリプトをbrew install&amp;brew updateできるようにする</title>
      <link>https://note.gosyujin.com/2016/03/05/go-bin-install-from-homebrew/</link>
      <pubDate>Sat, 05 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2016/03/05/go-bin-install-from-homebrew/</guid>
      <description>あらすじ Golangでスクリプトを作ったので、バイナリにしてhomebrewでインストール/アップデートできるようにしてみた。
細かく色々できるけど、とりあえず今回は最小で。
参考  HomeBrewで自作ツールを配布する ｜ SOTA Go言語でつくったツールをHomebrewで配布する · THINKING MEGANE Mackerel  mackerelio/homebrew-mackerel-agent mackerelio/mackerel-agent   環境  MacOS X El Capitan 10.11.3 go version go1.5.3 darwin/amd64 ruby 2.1.4p265  要件  GitHubに上げたスクリプトをbrew install xxxでインストールできるようにしたい でもたまにはgo get github.com/xxxでもインストールしたい  ブツ まずはブツを作った。
 gosyujin/bulkrenamer  引数にディレクトリ与えたら、最下層のファイルを直前のディレクトリ名にリネームするっ的なスクリプト。こちらは特に意識する必要はない。
なんとなく動くようになったら、go buildして作ったファイルをGitHubのReleasesからv0.1として追加した。(割愛/今回は配布先のPCにgoコマンドがない前提なので、実行ファイルをそのまま配る)
 実行ファイルのUrlを覚えておく  https://github.com/gosyujin/bulkrenamer/releases/download/v0.1/bulkrenamer  sha1のハッシュ値を取っておく  Homebrew用設定 Formulaの作成  gosyujin/homebrew-bulkrenamer  brew createで作れるみたいだけど、とりあえず手打ち。
リポジトリの名前はhomebrew-APPNAMEとするルール。今回はbulkrenamerなのでhomebrew-bulkrenamerリポジトリを作った。
ファイルはAPPNAME.rb。今回はbulkrenamer.rb
class Bulkrenamer &amp;lt; Formula desc &amp;#34;BulkRenamer&amp;#34; homepage &amp;#34;https://github.</description>
    </item>
    
    <item>
      <title>golangでニコ動の動画をパトロールするツール「nicony」を作った</title>
      <link>https://note.gosyujin.com/2016/01/12/golang-nicony/</link>
      <pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2016/01/12/golang-nicony/</guid>
      <description>あらすじ 年末年始にかけてgolangをまたさわってみた。半年以上触ってないと全部忘れてる。
作ったもの  gosyujin/nicony  デモ できること/やりたいこと  ニコレポページに上がる動画一覧をチェックして、コメントと動画をパトロールできる id指定で単一動画でも同じ事ができる マイリストID指定でマイリストの動画を順番にパトロールしたい  学んだこと  コマンドオプションのパース(flagパッケージ) 標準以外のロガー(seelog cihub/seelog)  ログレベル分け、ローテートとかできるやつを探してみた  ファイル操作など(os, pathパッケージ) 構造体フィールドタグ(Goのencoding/xmlを使いこなす - Qiita) goqueryでWebページのスクレイピング(Big Sky :: Go言語で jQuery ライクな操作が出来る goquery を試した。) ニコニコAPIの仕様を少し  あとやりたいこと  我流で書きまくってるから、goのお作法を知ったらそっちに寄せる テスト作る  とりあえず(30分位で作った)ロゴがあるとテンション上がる。ロゴ駆動開発。</description>
    </item>
    
    <item>
      <title>Hugoを使ってみた</title>
      <link>https://note.gosyujin.com/2015/06/30/hugo-helloworld/</link>
      <pubDate>Tue, 30 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2015/06/30/hugo-helloworld/</guid>
      <description>あらすじ 自分がローカルで取りためているメモをいい感じで見るために使用する静的サイトジェネレータを選別してみた。
要望とか環境とか。
 PCの外には出さない  ローカルで作成して、出力して、ローカルで見る  プレーンテキストでバージョン管理したい タグとかカテゴリである程度ジャンル分けしたい (できれば)Windowsでも(苦労せず)動かしたい  こんなことができそうな静的サイトジェネレータを探してみる…。
 Jekyll Middleman Pelican Sphinx Hugo あとはJavascript系からいくつか…  結果、Hugoにした 公式に書かれていることを信じて。
 Make the Web Fun Again Run Anywhere Fast &amp;amp; Powerful Flexible  Windowsでも結構使うので、個人的にはRun Anywhareがいいかなと思った。
Fast &amp;amp; Powerfulに関しては、他のサイトジェネレータから乗り換えた人が感じているようだけど、そんなに記事数増えない予定だからな～…と思っていた。
が、ビルド速度意外と大事だった。(後述)
インストール手順 公式のQuickstartガイドより。
Hugoインストール 割愛。バイナリファイルもあるので、それを持ってきてパス通す。hugoコマンドが実行できればOK。
&amp;gt;hugo version Hugo Static Site Generator v0.13 BuildDate: 2015-05-12T10:43:12+09:00 サイト新規作成 &amp;gt;hugo new site mysite こんな感じの階層でファイルができる。
C:. │ config.toml │ ├─archetypes ├─content ├─data ├─layouts └─static これがデフォルトの構造っぽい。</description>
    </item>
    
    <item>
      <title>golangでサーバのファイルをゆっくりダウンロードするツール作ってみた</title>
      <link>https://note.gosyujin.com/2015/04/30/golang-helloworld/</link>
      <pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://note.gosyujin.com/2015/04/30/golang-helloworld/</guid>
      <description>あらすじ golangやるやる詐欺してたので、ようやくさわってみた。
参考サイト  golang.jp - プログラミング言語Goの情報サイト  を中心に、いろいろググりつつ。
バージョン  go version go1.4.2  やりたいこと  サーバに負荷がかからないようにちょっとずつ落とせる ネットワークに負荷がかからないようにゆっくり落とせる 落とし切る前に終了→再実行したら途中から落とせる  作ったもの gosyujin/yukkuri-downloader
 byte-rangeリクエストを投げて(初めて知った)ちょっとずつ落とせる  StatusPartialContentでレスポンスくれないサーバでは一気に落としてしまう  インターバルを指定できてゆっくり落とせる レジュームできる  他、
 設定ファイル(jxon)から設定を読み込める コマンドライン引数から設定を読み込める(設定ファイルより強い) proxyは環境変数HTTP_PROXYとHTTPS_PROXYを読み込める(使わない事もできる) WindowsとCentOSで動かせる  ビルドして実行すると
$ ./yukkuri-downloader -h [go-tran] 2015/04/30 19:17:47 Initialize. [go-tran] 2015/04/30 19:17:47 Read setting file: /home/kk_Ataka/go-tran.json Usage of ./yukkuri-downloader: -i=0: download interval(sec) -no-proxy=false: NOT use proxy -proxy=false: use proxy -r=0: getRange(byte) -u=&amp;#34;&amp;#34;: download file $ .</description>
    </item>
    
  </channel>
</rss>